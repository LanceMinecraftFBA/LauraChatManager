using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Requests;
using Telegram.Bot.Types.InlineQueryResults;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Requests.Abstractions;
using Telegram.Bot.Types.ReplyMarkups;
using System.Linq;
using System.Net.Http;
using System.Net;
using Telegram.Bot.Types;
using QiwiShop;
using System.Reflection;
using System.Threading;
using System.Threading.Tasks;
using System.Data;
using System.IO;
using WeatherApiClass;
using File = System.IO.File;
using System.Data.OleDb;

namespace Laura_Bot_Chat_Manager
{

    class Program
    {
        private static string token { get; set; } = "token_bot";
        private static TelegramBotClient client;
        public static string Username { get; set; }
        public long Id { get; set; }
        private static User user;
        static SqlConnection sql = new SqlConnection(connectionString: "DataBase not created!");
        static BotCommand command;
        private static ChatPermissions ChatPermissions;

        static void Main(string[] args)
        {

            client = new TelegramBotClient(token);
            client.StartReceiving(new UpdateType[] { UpdateType.Message });
            client.OnMessage += OnMessageHandler;
            Console.Title = "LauraBotLogConsole";
            Console.WriteLine("–ë–æ—Ç Ô£ø–õ–∞—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω!");
            Console.WriteLine("===============================");
            Console.WriteLine("Bot Developed on C#\nDev: @LanceMinecarft,\n@TheShadow_hk (Telegram)");
            Console.WriteLine("Version: 0.7.1 closed alpha");
            Console.WriteLine("===============================");
            Console.WriteLine($"Time of start: {DateTime.Now}");
            Console.WriteLine("Begin of console log:");
            try
            {
                Thread.Sleep(Timeout.Infinite);
            }
            catch (ArgumentOutOfRangeException exc)
            {
                Console.WriteLine(exc.Message + "\nBot working is long!");
                return;
            }
            client.StopReceiving();
        }

        private static async void OnMessageHandler(object sender, MessageEventArgs e)
        {

            var msg = e.Message;
            var Admin = ChatMemberStatus.Administrator;
            var Member = ChatMemberStatus.Member;
            var Owner = ChatMemberStatus.Creator;
            var Banned = ChatMemberStatus.Kicked;
            var Muted = ChatMemberStatus.Restricted;




            if (msg == null)
            {
                return;
            }

            if (msg.NewChatMembers != null)
            {
                await client.SendStickerAsync(chatId: msg.Chat.Id, sticker: "https://t.me/ScladOfRes/57", replyToMessageId: msg.MessageId);
                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, <a href = \"tg://openmessage?user_id={msg.NewChatMembers[0].Id}\">{msg.NewChatMembers[0].FirstName} {msg.NewChatMembers[0].LastName}</a>!\n–í—ã –ø–æ–ø–∞–ª–∏ –≤ ¬´{msg.Chat.Title}¬ª!", parseMode: ParseMode.Html, disableWebPagePreview: true);
                Console.WriteLine($"{DateTime.Now} New member in chat: {msg.Chat.Id}");
            }

            if (msg.LeftChatMember != null)
            {
                await client.SendStickerAsync(chatId: msg.Chat.Id, sticker: "https://t.me/ScladOfRes/59");
                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.LeftChatMember.Id}\">{msg.LeftChatMember.FirstName} {msg.LeftChatMember.LastName}</a> –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!", parseMode: ParseMode.Html, disableWebPagePreview: true);

                Console.WriteLine($"{DateTime.Now} Member ID{msg.LeftChatMember.Id} left from chat: {msg.Chat.Id}");
            }


            if (msg.Text != null)
            {
                try
                {
                    Console.WriteLine($"{DateTime.Now} New Message from ID{msg.Chat.Id}, it's message: {msg.Text}");

                    //Logchat (FOR DEVELOPERS!!!!)
                    var LogChat = -763013536; //set chat id for log if you developer or delete lines 111-134 if you don't want using log chat
                    if (msg.From.Username == null)
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            await client.SendTextMessageAsync(chatId: LogChat, $"–§–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{msg.From.FirstName} {msg.From.LastName}</b>\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{msg.From.Id}</code>\n\n–¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n<i>{msg.Text}</i>", parseMode: ParseMode.Html);
                        }
                        else
                        {
                            await client.SendTextMessageAsync(chatId: LogChat, $"–§–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{msg.From.FirstName} {msg.From.LastName}</b>\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{msg.From.Id}</code>\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã: <b>{msg.Chat.Title}</b>\nID –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥—ã: <code>{msg.Chat.Id}</code>\n\n–¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n<i>{msg.Text}</i>", parseMode: ParseMode.Html);
                        }
                    }
                    else
                    {
                        if (msg.Chat.Id != msg.From.Id)
                        {
                            await client.SendTextMessageAsync(chatId: LogChat, $"–§–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{msg.From.FirstName} {msg.From.LastName}</b>\n–Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{msg.From.Username}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{msg.From.Id}</code>\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –±–µ—Å–µ–¥—ã: <b>{msg.Chat.Title}</b>\nID –¥–∞–Ω–Ω–æ–π –±–µ—Å–µ–¥—ã: <code>{msg.Chat.Id}</code>\n\n–¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n<i>{msg.Text}</i>", parseMode: ParseMode.Html);
                        }
                        else
                        {
                            await client.SendTextMessageAsync(chatId: LogChat, $"–§–ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <b>{msg.From.FirstName} {msg.From.LastName}</b>\n–Æ–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{msg.From.Username}\nID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{msg.From.Id}</code>\n\n–¢–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n<i>{msg.Text}</i>", parseMode: ParseMode.Html);
                        }
                    }

                    //start command & help command
                    if (msg.Text.StartsWith("/start"))
                    {
                        if (msg.Chat.Id != msg.From.Id)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç –õ–∞—É—Ä–∞!\n–ù–∞–ø–∏—à–∏—Ç–µ üëâ/help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.");
                            BotCommand[] botCommands = { new() { Command = "start", Description = "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥" }, new() { Command = "help", Description = "–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞" }, new() { Command = "getchatid", Description = "–ü–æ–ª—É—á–∏—Ç—å ID –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞" }, new() { Command = "nightmode", Description = "–í–∫–ª—é—á–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤ —á–∞—Ç–µ" }, new() { Command = "statemode", Description = "–í–µ—Ä–Ω—É—Ç—å —á–∞—Ç –≤ —à—Ç–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º" } };
                            await client.SetMyCommandsAsync(botCommands);
                            await client.GetMyCommandsAsync();
                            await client.SetMyCommandsAsync(botCommands);
                            Console.WriteLine($"Bot was started in chat: ID{msg.Chat.Id}");
                            return;
                        }
                        else
                        {
                            BotCommand[] botCommands = { new() { Command = "start", Description = "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥" }, new() { Command = "getmyid", Description = "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π ID" } };
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç –õ–∞—É—Ä–∞!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—Éüëâ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüìö¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.");
                            await client.SetMyCommandsAsync(botCommands);
                            await client.GetMyCommandsAsync();
                            await client.SetMyCommandsAsync(botCommands);
                            Console.WriteLine($"Bot was started in chat: ID{msg.Chat.Id}");
                            return;
                        }
                    }

                    if (msg.Text.StartsWith("/help"))
                    {
                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, "<b>–í–Ω–∏–º–∞–Ω–∏–µ!\n–í –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ–∫–∞ —á—Ç–æ –ª–µ–∂–∞—Ç –Ω–µ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã, —Ç–∞–∫ –∫–∞–∫ –±–æ—Ç –µ—â—ë –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!\n</b><a href = \"https://telegra.ph/Polnyj-spisok-komand-bota-Laura-06-21\">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>", parseMode: ParseMode.Html, disableWebPagePreview: true);
                        return;
                    }
                    
                    //Admins Commands
                    if (msg.Text.ToUpper() == "–ë–ê–ù")
                    {
                        {
                            if (msg.Chat.Id == msg.From.Id)
                            {
                                return;
                            }
                            else if (msg.ReplyToMessage == null)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                return;
                            }
                            else if (msg.ReplyToMessage.From.IsBot)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ!");
                                return;
                            }
                            else if (msg.ReplyToMessage != null)
                            {


                                Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                var MemberTarget = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);
                                if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    return;
                                }
                                else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.ReplyToMessage.From.Id; }) != null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    return;

                                }
                                else
                                {
                                    await client.KickChatMemberAsync(userId: msg.ReplyToMessage.From.Id, chatId: msg.Chat.Id, cancellationToken: default);
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùå–£—á–∞—Å—Ç–Ω–∏–∫ <a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    return;
                                }
                            }
                            return;
                        }
                    }

                    if (msg.Text.ToUpper() == "–†–ê–ó–ë–ê–ù")
                    {
                        {
                            if (msg.Chat.Id == msg.From.Id)
                            {
                                return;
                            }

                            else if (msg.ReplyToMessage.From.IsBot)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ!");
                                return;
                            }

                            else if (msg.ReplyToMessage == null)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                return;
                            }
                            else if (msg.ReplyToMessage != null)
                            {
                                Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                var MemberTarget = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);
                                if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    return;
                                }
                                else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.ReplyToMessage.From.Id; }) != null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    return;
                                }
                                else if (MemberTarget.Status != Banned)
                                {
                                    if (msg.ReplyToMessage.From.Username == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µüòï!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                }
                                else
                                {
                                    await client.UnbanChatMemberAsync(userId: msg.ReplyToMessage.From.Id, chatId: msg.Chat.Id, cancellationToken: default);
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚úÖ–£—á–∞—Å—Ç–Ω–∏–∫ <a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º <a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>¬ª!\n–¢–µ–ø–µ—Ä—å –µ–≥–æ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤ —á–∞—Çü§ó.", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    return;
                                }
                            }
                            return;
                        }
                    }

                    if (msg.Text.ToUpper() == "–†–ê–ó–ú–£–¢")
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }

                        else if (msg.ReplyToMessage.From.IsBot)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ!");
                            return;
                        }

                        else if (msg.ReplyToMessage == null)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                            return;
                        }
                        else if (msg.ReplyToMessage != null)
                        {
                            Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                            bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                            var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                            var MemberTarget = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);
                            if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                return;
                            }
                            else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.ReplyToMessage.From.Id; }) != null)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                return;
                            }
                            else if (MemberTarget.Status != ChatMemberStatus.Restricted)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> –Ω–µ –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ωüòê!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                return;
                            }
                            else
                            {
                                await client.PromoteChatMemberAsync(userId: msg.ReplyToMessage.From.Id, chatId: msg.Chat.Id, cancellationToken: default);
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚úÖ–£—á–∞—Å—Ç–Ω–∏–∫ <a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –æ–±—â–∞—Ç—å—Å—è!\n\n–¢–æ–ª—å–∫–æ –ª—É—á—à–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º —è–∑—ã–∫–æ–º –∏ –Ω–µ —Ä–∞–∑–∂–∏–≥–∞—Ç—å —Å—Å–æ—Ä—ãüòä.\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: <a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                return;
                            }
                        }
                        return;
                    }

                    if (msg.Text.ToUpper() == "–ú–£–¢")
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }
                        else if (msg.ReplyToMessage == null)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                            return;
                        }
                        else if (msg.ReplyToMessage.From.IsBot)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ!");
                            return;
                        }

                        else if (msg.ReplyToMessage != null)
                        {
                            Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                            bool isAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                            var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                            var MemberTarget = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);
                            if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                return;
                            }
                            else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.ReplyToMessage.From.Id; }) != null)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                return;
                            }
                            else if (MemberTarget.Status == ChatMemberStatus.Restricted)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> —É–∂–µ –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ωüìõ!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                return;
                            }
                            else
                            {
                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(15), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç!\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: <a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                return;
                            }
                        }
                        return;
                    }

                    if (msg.Text.StartsWith("/nightmode"))
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }

                        else if (msg.Chat.Id != msg.From.Id)
                        {
                            Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                            bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                            var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                            if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                            {
                                if (msg.From.Username == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"https://t.me/{msg.From.Username}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    return;
                                }
                            }
                            else
                            {
                                await client.SetChatPermissionsAsync(chatId: msg.Chat.Id, permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                if (msg.From.Username == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –æ–±—ä—è–≤–ª—è–µ—Ç –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–ºü§´!", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"https://t.me/{msg.From.Username}\">{msg.From.FirstName} {msg.From.LastName}</a> –æ–±—ä—è–≤–ª—è–µ—Ç –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–ºü§´!", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                }
                                return;
                            }
                        }
                        return;
                    }

                    if (msg.Text.StartsWith("/statemode"))
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }

                        else if (msg.Chat.Id != msg.From.Id)
                        {
                            Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                            bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                            var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                            if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                            {
                                if (msg.From.Username == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"https://t.me/{msg.From.Username}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    return;
                                }
                            }
                            else
                            {
                                await client.SetChatPermissionsAsync(chatId: msg.Chat.Id, permissions: new ChatPermissions { CanSendMessages = true, CanSendMediaMessages = true, CanSendOtherMessages = true, CanAddWebPagePreviews = true });
                                if (msg.From.Username == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Ç –≤ —à—Ç–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º‚úÖ", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"https://t.me/{msg.From.Username}\">{msg.From.FirstName} {msg.From.LastName}</a> –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Ç –≤ —à—Ç–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º‚úÖ", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                }
                            }
                        }
                        return;
                    }



                    //RP commands
                    if (msg.Text.StartsWith("+"))
                    {
                        {
                            if (msg.Chat.Id == msg.From.Id)
                            {
                                return;
                            }
                            else if (msg.ReplyToMessage == null)
                            {
                                return;
                            }
                            else if (msg.ReplyToMessage != null)
                            {
                                if (msg.ReplyToMessage.From.Id == msg.From.Id)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –∞ —É –≤–∞—Å, –∫–∞–∫ —è –≤–∏–∂—É, –≤—ã—Å–æ–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞üòè", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                            }
                            return;
                        }
                    }

                    if (msg.Text.StartsWith("-"))
                    {
                        {
                            if (msg.Chat.Id == msg.From.Id)
                            {
                                return;
                            }
                            else if (msg.ReplyToMessage == null)
                            {
                                return;
                            }
                            else if (msg.ReplyToMessage != null)
                            {
                                if (msg.ReplyToMessage.From.Id == msg.From.Id)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –∑–∞—á–µ–º —Å–µ–±—è —Ç–∞–∫ —É–Ω–∏–∂–∞—Ç—åüòï", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                            }
                            return;
                        }
                    }


                    if (msg.Text.ToUpper() == "–û–ë–ù–Ø–¢–¨")
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }
                        else if (msg.ReplyToMessage == null)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName}</a> –æ–±–Ω—è–ª —Å–µ–±—èü§ó", parseMode: ParseMode.Html, disableWebPagePreview: true);
                            return;
                        }
                        else
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id{msg.From.Id}\">{msg.From.FirstName}</a> –æ–±–Ω—è–ª <a href = \"tg://openmessage?user_id{msg.ReplyToMessage.From.Username}\">{msg.ReplyToMessage.From.FirstName}</a>ü§ó", parseMode: ParseMode.Html, disableWebPagePreview: true);
                            return;
                        }

                    }

                    if (msg.Text.ToUpper() == "–£–î–ê–†–ò–¢–¨")
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }
                        else if (msg.ReplyToMessage == null)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName}</a> —É–¥–∞—Ä–∏–ª —Å–æ –≤—Å–µ–π —Å–∏–ª–æ–π –≤ –ø—É—Å—Ç–æ—Ç—Éüò∂", parseMode: ParseMode.Html, disableWebPagePreview: true);
                            return;
                        }
                        else
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName}</a> —É–¥–∞—Ä–∏–ª —Å–æ –≤—Å–µ–π —Å–∏–ª–æ–π –≤ <a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>ü§ï", parseMode: ParseMode.Html, disableWebPagePreview: true);
                            return;
                        }
                    }

                    if (msg.Text.ToUpper() == "–£–ë–ò–¢–¨")
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }
                        else if (msg.ReplyToMessage == null)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName}</a> –ø–æ–∫–æ–Ω—á–∏–ª —Å–≤–æ—é –∂–∏–∑–Ω—å —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ–ºü§°üî™", parseMode: ParseMode.Html, disableWebPagePreview: true);
                            return;
                        }
                        else
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName}</a> —É–±–∏–≤–∞–µ—Ç <a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üî™üò¢", parseMode: ParseMode.Html, disableWebPagePreview: true);
                            return;
                        }

                    }

                    if (msg.Text.ToUpper() == "–£–ö–£–°–ò–¢–¨")
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }
                        else if (msg.ReplyToMessage == null)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName}</a> —É–∫—É—Å–∏–ª —Å–µ–±—èü§°", parseMode: ParseMode.Html, disableWebPagePreview: true);
                            return;
                        }
                        else
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName}</a> –¥–µ–ª–∞–µ—Ç —É–∫—É—Å <a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üê∫", parseMode: ParseMode.Html, disableWebPagePreview: true);
                            return;
                        }

                    }

                    if (msg.Text.ToUpper() == "–ü–û–ö–ê–ó–ê–¢–¨ –Ø–ó–´–ö")
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }
                        else if (msg.ReplyToMessage == null)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName}</a> –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞–ª —è–∑—ã–∫üëÖ", parseMode: ParseMode.Html, disableWebPagePreview: true);
                            return;
                        }
                        else
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName}</a> –ø–æ–∫–∞–∑–∞–ª —è–∑—ã–∫ <a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üòú", parseMode: ParseMode.Html, disableWebPagePreview: true);
                            return;
                        }

                    }

                    if (msg.Text.ToUpper() == "–ù–ê–ö–û–†–ú–ò–¢–¨")
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }
                        else if (msg.ReplyToMessage == null)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName}</a> –≤–∫—É—Å–Ω–æ –ø–æ–∫–æ—Ä–º–∏–ª —Å–µ–±—èüòã", parseMode: ParseMode.Html, disableWebPagePreview: true);
                            return;
                        }
                        else
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName}</a> –≤–∫—É—Å–Ω–æ –ø–æ–∫–æ—Ä–º–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞ <a href = \"tg://openmessage?user_id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üçîüçüüå≠", parseMode: ParseMode.Html, disableWebPagePreview: true);
                        return;
                    }


                    //Easter RP command

                    if (msg.Text.Contains("–û–±–æ—Å—Ä–∞–ª—Å—è") | msg.Text.Contains("–æ–±–æ—Å—Ä–∞–ª—Å—è"))
                    {
                        await client.SendVideoNoteAsync(chatId: msg.Chat.Id, videoNote: "https://telesco.pe/ScladOfRes/63");
                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–¢–∞–∫ –≤–æ—Ç –∫—Ç–æ –¥–≤–µ—Ä—å –∏—Å–ø–∞—á–∫–∞–ªüòè", replyToMessageId: msg.MessageId);
                        return;
                    }

                    //Buttons/easters
                    switch (msg.Text)
                    {
                        
                        //Just button
                        case "–ù–∞–∑–∞–¥üîÉ":
                            {
                                if (msg.Chat.Id != msg.From.Id)
                                {
                                    break;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é", replyMarkup: GetButtons());
                                    break;
                                }

                            }

                        //Buttons from "GetButtons"
                        case "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüìö":
                            if (msg.Chat.Id != msg.From.Id)
                            {
                                break;
                            }
                            else
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–ë–æ—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, –ø–æ—ç—Ç–æ–º—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è —è–≤–ª—è–µ—Ç—Å—è –Ω–µ –ø–æ–ª–Ω–æ–π!\n<a href = \"https://telegra.ph/Polnyj-spisok-komand-bota-Laura-06-21\">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</a>", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                break;
                            }

                        case "–û –Ω–∞—Åüìí":
                            if (msg.Chat.Id != msg.From.Id)
                            {
                                break;
                            }
                            else
                            {
                                InlineKeyboardButton ProjectNews = new InlineKeyboardButton();
                                InlineKeyboardButton Dev1 = new InlineKeyboardButton();
                                InlineKeyboardButton Dev2 = new InlineKeyboardButton();
                                InlineKeyboardButton ScladOfRes = new InlineKeyboardButton();

                                ProjectNews.Text = "–ö–∞–Ω–∞–ª –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º –ø—Ä–æ–µ–∫—Ç–æ–≤üì°";
                                ProjectNews.Url = "https://t.me/FBA_Studio";

                                Dev1.Text = "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—åü§¥";
                                Dev1.Url = "https://t.me/LanceMinecraft";

                                Dev2.Text = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ 2üë®‚Äçüíª";
                                Dev2.Url = "https://t.me/TheShadow_hk";

                                ScladOfRes.Text = "–ö–∞–Ω–∞–ª —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –¥–ª—è –±–æ—Ç–∞üìö";
                                ScladOfRes.Url = "https://t.me/ScladOfRes";

                                InlineKeyboardButton[] Row1 = new InlineKeyboardButton[] { ProjectNews };
                                InlineKeyboardButton[] Row2 = new InlineKeyboardButton[] { Dev1, Dev2 };
                                InlineKeyboardButton[] Row3 = new InlineKeyboardButton[] { ScladOfRes };

                                InlineKeyboardButton[][] InfoButtons = new InlineKeyboardButton[][] { Row1, Row2, Row3 };
                                InlineKeyboardMarkup InfoKeyboard = new InlineKeyboardMarkup(InfoButtons);

                                await client.SendTextMessageAsync(
                                    chatId: msg.Chat.Id,
                                    "–ü–æ–∫–∞ –µ—â—ë –Ω–µ—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å, –Ω–æ –º–æ–∂–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–≥ –∫–∞–Ω–∞–ª, –≥–¥–µ –±—É–¥—É—Ç –≤—ã–∫–ª–∞–¥—ã–≤–∞—Ç—å—Å—è –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ –≤—Å–µ–º –ø—Ä–æ–µ–∫—Ç–∞–º –Ω–∞—à–∏–º)",
                                    replyMarkup: InfoKeyboard);
                                break;
                            }


                        case "–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç‚ûï":
                            if (msg.Chat.Id != msg.From.Id)
                            {
                                break;
                            }
                            else
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, text: $"<b>‚ùó–ü—Ä–∞–≤–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏ –±–æ—Ç–∞:</b>\n\n<i>-–∏–∑–º–µ–Ω–µ–Ω–Ω–∏—è –ø—Ä–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞</i>\n<i>-—É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —á–∞—Ç–∞</i>\n<i>-—É–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</i>\n<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —á–∞—Ç–∞</i>", parseMode: ParseMode.Html, replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithUrl("–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É", "http://t.me/Laura_cm_bot?startgroup=start")));
                                break;
                            }


                        case "–ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ãüéÆ":
                            if (msg.Chat.Id == msg.From.Id)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µüõ†!", replyMarkup: GameModes());
                                break;
                            }
                            else
                            {
                                break;
                            }

                        //Easter commands
                        case "–ò–¥–∏ –Ω–∞—Ö—É–π —à–ª—é—Ö–∞":
                            await client.SendVideoAsync(chatId: msg.Chat.Id, video: "https://t.me/ScladOfRes/61", replyToMessageId: msg.MessageId);
                            break;

                        case "–ö—Ç–æ —Ç–∞–∫–æ–π –ö–∏–Ω–∞—É—Ç":
                            if (msg.Chat.Id == msg.From.Id)
                            {
                                break;
                            }
                            else
                                await client.SendVideoAsync(chatId: msg.Chat.Id, video: "https://t.me/ScladOfRes/2");
                                Console.WriteLine(" ");
                                Console.WriteLine($"{msg.From.FirstName} {msg.From.LastName} ask question who this Kinaut!");
                                Console.WriteLine(" ");
                                await client.SendTextMessageAsync(chatId: msg.From.Id, "–ü–æ—è—Å–Ω–∏—Ç–µ–ª—å–Ω–∞—è –±—Ä–∏–≥–∞–¥–∞:\n –ö–∏–Ω–∞—É—Ç - –≤—Ä–∞–≥ —Å–æ–∑–¥–∞—Ç–µ–ª—è –±–æ—Ç–∞ –≤ —Ç–æ–º –ø–ª–∞–Ω–µ, —á—Ç–æ –æ–Ω —à–∞–Ω—Ç–∞–∂–æ–º —Å –Ω–µ–≥–æ –≤—ã—Ç—Ä—è—Ö–∏–≤–∞–ª –¥–µ–Ω—å–≥–∏. –ö–∏–Ω–∞—É—Ç —Ç–∞–∫–∂–µ —Ä–µ–π–¥–∏–ª –µ–≥–æ —Ç–≥ –∫–∞–Ω–∞–ª –∏ —á–∞—Ç 8-9 —Ä–∞–∑ @RiceTeamStudio, –≤–ø–ª–æ—Ç—å –¥–æ —Ç–≥ –∞–∫–∫–∞(–ø–µ—Ä–≤—ã–π —Ä–∞–∑ —É–¥–∞–ª–∏–ª —Ç–≥ –∞–∫–∫, –≤—Ç–æ—Ä–æ–π —Ä–∞–∑ - –¥–æ–≤—ë–ª –¥–æ –≤–µ—á–Ω–æ–≥–æ —Å–ø–∞–º –±–∞–Ω–∞).\n–¢—è–∂—ë–ª—ã–µ —É –Ω–µ–≥–æ –±—ã–ª–∏ –≤—Ä–µ–º–µ–Ω–∞üòï.");
                                break;

                        case "–ö–∏–¥–∞–µ–º –ø–ª–æ—Ç–Ω—É—é –∑–∏–≥—É":
                            if (msg.Chat.Id == msg.From.Id)
                            {
                                break;
                            }
                            else
                                await client.SendVideoAsync(chatId: msg.Chat.Id, video: "https://t.me/LanceYouTube/13");
                            Console.WriteLine(" ");
                            Console.WriteLine($"Warning! User @{msg.From.Username} in chat ID{msg.Chat.Id} drop the Ziga!");
                            Console.WriteLine($"Sending warning to @{msg.From.Username}...");
                            Console.WriteLine(" ");
                            await client.SendTextMessageAsync(chatId: msg.From.Id, $"@{msg.From.Username}, –≤–∞—à–∞ –∑–∏–≥–∞ —Å–ø–∞–ª–µ–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –±–æ—Ç–∞! ");
                            break;

                        case "–≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –≤–∑–ª–æ–º–∞–Ω":
                            await client.SendVideoAsync(chatId: msg.Chat.Id, video: "https://t.me/RiceTeamChat/2354", replyToMessageId: msg.MessageId);
                            break;

                        case "–Ø –≥—É–ª—å":
                            if (msg.Chat.Id == msg.From.Id)
                            {
                                break;
                            }
                            else
                                await client.SendVideoAsync(chatId: msg.Chat.Id, video: "https://t.me/DichBlogOfLance/723", caption: "1000-7, –ø—Ä–æ—Å—Ç–∏, —Ç—ã —É–º–µ—Ä");
                            Console.WriteLine(" ");
                            Console.WriteLine($"@{msg.From.Username} - is dead inside!");
                            Console.WriteLine(" ");
                            await client.SendTextMessageAsync(chatId: msg.From.Id, "–ü–æ–ø–∞–ª—Å—è, –¥–µ–¥ –∏–Ω—Å–∞–π–¥–∏–∫!");
                            await client.SendAudioAsync(chatId: msg.Chat.Id, audio: "https://t.me/DichBlogOfLance/731");
                            break;

                        //Sponsors of the bot
                        case "–ü–∞—Ä—Ç–Ω—ë—Ä—ã –±–æ—Ç–∞":
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, text: "<b>–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã –±–æ—Ç–∞ü§ù:</b>\n<i>-@FlushaStudio(–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞)</i>\n<i>-@RiceTeamStudio(–ü–∏–∞—Ä –ø—Ä–æ–µ–∫—Ç–∞)</i>\n<i>-@banan4ikmoder(–ü–∏–∞—Ä)</i>\n<i>@TheShadow_hk(Dev, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –±–∞–Ω–∞ –≤ —á–∞—Ç–µ)</i>\n<i>Maxim Bysh(–ü–æ–º–æ–≥ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –º—É—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)</i>\n<i>–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è</i>", parseMode: ParseMode.Html);
                            break;
                    }

                    //Mute target user
                    if (msg.Text.StartsWith("–ú—É—Ç ") | msg.Text.StartsWith("–º—É—Ç "))
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }
                        else if (msg.ReplyToMessage == null)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                            return;
                        }
                        else if (msg.ReplyToMessage.From.IsBot)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ!");
                            return;
                        }

                        else if (msg.ReplyToMessage != null)
                        {
                            var MuteTimeout = msg.Text;
                            String[] SplitSymbol = MuteTimeout.Split(' ');
                            var TimeOut = Convert.ToDouble(SplitSymbol[1]);

                            Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                            bool isAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                            var MemberOutput = client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                            var MemberTarget = client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);

                            if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                            {
                                if (msg.From.Username == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://openmessage?user_id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!");
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"https://t.me/{msg.From.Username}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!");
                                    return;
                                }
                            }
                            else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.ReplyToMessage.From.Id; }) != null)
                            {
                                if (msg.ReplyToMessage.From.Username == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"https://t.me/{msg.ReplyToMessage.From.Username}\"></a> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª");
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª");
                                    return;
                                }
                            }
                            else
                                switch (SplitSymbol[2].Trim())
                                {
                                    //–ß–∞—Å–æ–≤–æ–π —Ç–∏–ø
                                    case "–ß–∞—Å":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddHours(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} —á–∞—Åüîá!");
                                        break;

                                    case "—á–∞—Å":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddHours(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} —á–∞—Åüîá!");
                                        break;

                                    case "–ß–∞—Å–∞":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddHours(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} —á–∞—Å–∞üîá!");
                                        break;

                                    case "—á–∞—Å–∞":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddHours(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} —á–∞—Å–∞üîá!");
                                        break;

                                    case "–ß–∞—Å–æ–≤":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddHours(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} —á–∞—Å–æ–≤üîá!");
                                        break;

                                    case "—á–∞—Å–æ–≤":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddHours(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} —á–∞—Å–æ–≤üîá!");
                                        break;


                                    //–ú–∏–Ω—É—Ç–Ω—ã–π —Ç–∏–ø
                                    case "–ú–∏–Ω—É—Ç":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–∏–Ω—É—Çüîá!");
                                        break;

                                    case "–º–∏–Ω—É—Ç":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–∏–Ω—É—Çüîá!");
                                        break;

                                    case "–ú–∏–Ω—É—Ç—É":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–∏–Ω—É—Ç—Éüîá!");
                                        break;

                                    case "–º–∏–Ω—É—Ç—É":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–∏–Ω—É—Ç—Éüîá!");
                                        break;

                                    case "–ú–∏–Ω—É—Ç–∞":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–∏–Ω—É—Ç—Éüîá!");
                                        break;

                                    case "–º–∏–Ω—É—Ç–∞":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–∏–Ω—É—Ç—Éüîá!");
                                        break;


                                    //–î–Ω–µ–≤–Ω–æ–π —Ç–∏–ø
                                    case "–î–µ–Ω—å":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddDays(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –¥–µ–Ω—åüîá!");
                                        break;

                                    case "–¥–µ–Ω—å":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddDays(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –¥–µ–Ω—åüîá!");
                                        break;

                                    case "–î–Ω–µ–π":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddDays(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –¥–Ω–µ–πüîá!");
                                        break;

                                    case "–¥–Ω–µ–π":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddDays(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –¥–Ω–µ–πüîá!");
                                        break;

                                    case "–î–Ω—è":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddDays(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –¥–Ω—èüîá!");
                                        break;

                                    case "–¥–Ω—è":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddDays(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –¥–Ω—èüîá!");
                                        break;


                                    //–ú–µ—Å—è—á–Ω—ã–π —Ç–∏–ø
                                    case "–ú–µ—Å—è—Ü":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMonths(Convert.ToInt32(TimeOut)), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–µ—Å—è—Üüîá!");
                                        break;

                                    case "–º–µ—Å—è—Ü":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMonths(Convert.ToInt32(TimeOut)), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–µ—Å—è—Üüîá!");
                                        break;

                                    case "–ú–µ—Å—è—Ü–∞":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMonths(Convert.ToInt32(TimeOut)), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–µ—Å—è—Ü–∞üîá!");
                                        break;

                                    case "–º–µ—Å—è—Ü–∞":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMonths(Convert.ToInt32(TimeOut)), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–µ—Å—è—Ü–∞üîá!");
                                        break;

                                    case "–ú–µ—Å—è—Ü–µ–≤":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMonths(Convert.ToInt32(TimeOut)), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–µ—Å—è—Ü–µ–≤üîá!");
                                        break;

                                    case "–º–µ—Å—è—Ü–µ–≤":
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMonths(Convert.ToInt32(TimeOut)), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–µ—Å—è—Ü–µ–≤üîá!");
                                        break;
                                }
                        }
                        return;
                    }

                    //Ban target user with comment
                    if (msg.Text.StartsWith("–ë–∞–Ω\n") | msg.Text.StartsWith("–±–∞–Ω\n"))
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }

                        else if (msg.ReplyToMessage.From.IsBot)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ!");
                            return;
                        }

                        else if (msg.ReplyToMessage == null)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                            return;
                        }
                        else if (msg.ReplyToMessage != null)
                        {
                            var InMsg = msg.Text;
                            InMsg = msg.Text.Split('\n')[1];
                            var BanText = InMsg;

                            Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                            bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                            var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                            var MemberTarget = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);
                            if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî@{msg.From.Username}, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!");
                                return;
                            }
                            else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.ReplyToMessage.From.Id; }) != null)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª");
                                return;
                            }
                            else
                                await client.KickChatMemberAsync(userId: msg.ReplyToMessage.From.Id, chatId: msg.Chat.Id, cancellationToken: default);
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùå–£—á–∞—Å—Ç–Ω–∏–∫ @{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: @{msg.From.Username}!\n–ü—Ä–∏—á–∏–Ω–∞: <i>{BanText}</i>", parseMode: ParseMode.Html);
                        }
                    }

                    //Add input Chat Rules(In Developing)
                    if (msg.Text.StartsWith("/NewRules("))
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }
                        else if (msg.Chat.Id != msg.From.Id)
                        {
                            Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                            bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                            var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                            if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî@{msg.From.Username}, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!");
                                return;
                            }

                            else
                            {
                                string InText = msg.Text;
                                InText = msg.Text.Split('(')[1].Split(')')[0];
                                var NewRule = InText;

                                if (sql.State == ConnectionState.Closed)
                                {
                                    sql.Open();
                                    SqlCommand command = new SqlCommand($"insert into ChatRules(ChatId, TextRule) values({msg.Chat.Id}, {NewRule})");
                                    await command.ExecuteNonQueryAsync();
                                    sql.Close();
                                }
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã‚úÖ");

                            }
                        }

                    }

                    //Output chat rules(In Developing)
                    if (msg.Text.ToUpper() == "–ü–†–ê–í–ò–õ–ê")
                    {
                        if (sql.State == ConnectionState.Closed)
                        {
                            sql.Open();
                            SqlCommand command = new SqlCommand($"");
                            await command.ExecuteNonQueryAsync();

                        }
                    }

                    //Get Chat Id (For admins)
                    if (msg.Text.StartsWith("/getchatid"))
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /getmyid");
                            return;
                        }
                        else if (msg.Chat.Id != msg.From.Id)
                        {
                            Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                            bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                            var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                            if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî@{msg.From.Username}, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!");
                                return;
                            }

                            else
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"ID –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞üÜî: <code>{msg.Chat.Id}</code>", parseMode: ParseMode.Html); ;
                            return;
                        }
                    }

                    //Get your id 
                    if (msg.Text == "/getmyid")
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–í–∞—à –ª–∏—á–Ω—ã–π ID: <code>{msg.From.Id}</code>", parseMode: ParseMode.Html);
                            return;
                        }
                        else if (msg.Chat.Id != msg.From.Id)
                        {
                            return;
                        }
                    }

                    //Random rating
                    if (msg.Text.StartsWith("–æ—Ü–µ–Ω–∫—É") | msg.Text.StartsWith("–û—Ü–µ–Ω–∫—É"))
                    {
                        string[] rateAnswer = { "-10/10, —á—Ç–æ –∑–∞ –∫—Ä–∏–Ω–∂ —Ç—ã –∫–∏–Ω—É–ªü§¢", "4/10, —Ç–∞–∫ —Å–µ–±–µ —Å–¥–µ–ª–∞–Ω–æüôÑ", "0/10, —Ñ–∏–≥–Ω—è, –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–π", "100/10, –ø—Ä–æ—Å—Ç–æ –∫—Ä—É—á–µ –Ω–µ–∫—É–¥–∞ü§©", "7/10, –Ω–µ–ø–ª–æ—Ö–æ, –≤–ø–æ–ª–Ω–µ –¥–æ—Å—Ç–æ–π–Ω–æüôÇ", "10/10, —Å—É–ø–µ—Ä‚ú®" };
                        Random rndAnswer = new Random();
                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, rateAnswer[rndAnswer.Next(rateAnswer.Length)]);
                    }

                    if (msg.Text.ToUpper() == "–õ–ò–í–ê–ô, –õ–ê–£–†–ê")
                    {
                        if (msg.From.Id != 5287392256)
                        {
                            return;
                        }
                        else
                        {
                            if (msg.Chat.Id != msg.From.Id)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –≤—ã–π—Ç–∏ —Å –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞!\n–í—Å–µ–º —É–¥–∞—á–∏...");
                                await Task.Delay(1500);
                                await client.LeaveChatAsync(chatId: msg.Chat.Id);
                                return;
                            }
                            else
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–õ–∞–Ω—Å, —ç—Ç–æ –ª—Å .-.");
                                return;
                            }
                        }
                    }    

                    //Delete Target Message
                    if (msg.Text.ToUpper() == "DELMSG")
                    {
                        if (msg.Chat.Id == msg.From.Id)
                        {
                            return;
                        }

                        else if (msg.ReplyToMessage == null)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                            return;
                        }
                        else if (msg.ReplyToMessage != null)
                        {
                            Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                            bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                            var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                            var MemberTarget = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);
                            if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî@{msg.From.Username}, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!");
                                return;
                            }
                            else
                                await client.DeleteMessageAsync(messageId: msg.ReplyToMessage.MessageId, chatId: msg.Chat.Id, cancellationToken: default);
                                await client.DeleteMessageAsync(messageId: msg.MessageId, chatId: msg.Chat.Id);
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ‚úÖ", parseMode: ParseMode.Html);
                        }
                    }

                    //Weather request from WeatherClassApi.cs
                    if (msg.Text.StartsWith("–ü–æ–≥–æ–¥–∞ –≤") | msg.Text.StartsWith("–ø–æ–≥–æ–¥–∞ –≤"))
                    {
                        String[] InpResponse = msg.Text.Split(' ');
                        var inputCityName = InpResponse[2];
                        WeatherApi.Weather(inputCityName);
                        WeatherApi.Celsius(celsius: WeatherApi.temperatureCity);
                        WeatherApi.WindCourse(WeatherApi.windDegCity);

                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<b>{WeatherApi.answer}</b>\n\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞ <code>{WeatherApi.nameCity}</code>:</b>\n\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–∞üå°: <code>{Math.Round(WeatherApi.temperatureCity)}¬∞C</code>\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <code>{Math.Round(WeatherApi.tempFeelsLikeCity)}¬∞C</code>\n–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ—Ä–æ–¥–∞üó∫: <code>{WeatherApi.lonCity} {WeatherApi.latCity}</code>\n–ü–æ–≥–æ–¥–∞‚õÖ: <code>{WeatherApi.weatherCity}</code>\n–î–∞–≤–ª–µ–Ω–∏–µ‚¨á:<code>{WeatherApi.pressureCity} –≥–ü–∞</code>\n–°—Ç—Ä–∞–Ω–∞üè≥: <code>{WeatherApi.countryCity}</code>\n–í–∏–¥–∏–º–æ—Å—Ç—åüëÅ: <code>{WeatherApi.visibilityCity} –∫–º</code>\n–í–ª–∞–∂–Ω–æ—Å—Ç—åüíß: <code>{WeatherApi.humidityCity}%</code>\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üå´: <code>{WeatherApi.windSpeedCity} –∫–º/—á</code>\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: <code>{WeatherApi.windDegCity}¬∞ ({WeatherApi.WindAnswer})</code>", parseMode: ParseMode.Html);
                    }

                    //Random % of question
                    if (msg.Text.StartsWith("–õ–∞—É—Ä–∞ –∏–Ω—Ñ–∞") | msg.Text.StartsWith("–ª–∞—É—Ä–∞ –∏–Ω—Ñ–∞"))
                    {
                        Random rndm_count = new Random();
                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"ü§î–Ø –¥—É–º–∞—é, —á—Ç–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞ {rndm_count.Next(0, 100)}%");
                    }

                    //if (msg.Text.StartsWith("–õ–∞—É—Ä–∞ –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è ") | msg.Text.StartsWith("–ª–∞—É—Ä–∞ –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è "))
                    //{
                    //    var SplitPredictPhrase = msg.Text.Split("–õ–∞—É—Ä–∞ –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è ");
                    //    var PredictPhrase = SplitPredictPhrase[1];

                    //    String[]MembersList = client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: );


                    //    await client.SendTextMessageAsync();
                    //}

                }


                catch(ApiRequestException exc)
                {
                    Console.WriteLine(exc.ToString());
                    return;
                }
                catch(FormatException exc2)
                {
                    Console.WriteLine(exc2.ToString());
                    return;
                }

                //Ban with Username(In Developing) 

                //if (msg.Text.StartsWith("–ë–∞–Ω @") | msg.Text.StartsWith("–±–∞–Ω @"))
                //{
                //    if (msg.Chat.Id == msg.From.Id)
                //    {
                //        return;
                //    }
                //    else
                //    {
                //        string MemberTargetUsername = msg.Text;
                //        MemberTargetUsername = msg.Text.Split('@')[1].Split(Username)[0];
                //        var username = MemberTargetUsername;



                //        Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                //        bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                //        if (admins.FirstOrDefault(a => { return a.User != null && a.User.Username == msg.From.Username; }) == null)
                //        {
                //            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî@{msg.From.Username}, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!");
                //            return;
                //        }
                //        else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Username == username; }) != null)
                //        {
                //            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó@{username} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª");
                //            return;
                //        }
                //        else
                //            await client.KickChatMemberAsync(username: user.Id, chatId: msg.Chat.Id, cancellationToken: default);
                //        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùå–£—á–∞—Å—Ç–Ω–∏–∫ @{username} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: @{msg.From.Username}!");
                //        return;
                //    }

                //}


            }

        }

            private static IReplyMarkup GetButtons() => new ReplyKeyboardMarkup
            {
                ResizeKeyboard = true,
                Keyboard = new List<List<KeyboardButton>>
                {
                    new List<KeyboardButton>{new KeyboardButton{ Text = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüìö" }, new KeyboardButton { Text = "–û –Ω–∞—Åüìí"}, },
                    new List<KeyboardButton>{new KeyboardButton{ Text = "–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç‚ûï"}, new KeyboardButton{ Text = "–ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ãüéÆ" } }
                }
            };


            private static IReplyMarkup GameModes() => new ReplyKeyboardMarkup
            {
                ResizeKeyboard = true,
                Keyboard = new List<List<KeyboardButton>>
                {
                    new List<KeyboardButton>{new KeyboardButton{ Text = "–ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" } },
                    new List<KeyboardButton>{new KeyboardButton{ Text = "–ö–Ω–æ–ø–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞" } },
                    new List<KeyboardButton>{new KeyboardButton{ Text = "–ù–∞–∑–∞–¥üîÉ"} }
                }
            };

    }
}
