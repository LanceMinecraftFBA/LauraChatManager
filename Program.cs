using System;
using System.Collections.Generic;
using Telegram.Bot;
using Telegram.Bot.Args;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Types.ReplyMarkups;
using System.Linq;
using Telegram.Bot.Types;
using MySql.Data.MySqlClient;
using System.Threading;
using System.Threading.Tasks;

using Connector;
using WeatherApiClass;
using AIClass;
using BotSettings;
using Functions;

namespace Laura_Bot_Chat_Manager
{

    class Program
    {

        private static string token { get; set; } = "5565507778:AAEP06oTph93z6Y2BeGxZX0kjXMROxPlQRQ";
        private static long myId = 5565507778;

        //private static string token { get; set; } = "5562501226:AAHKm5EtifOR_SLYH2Qx160JCOlxj9z8Pjg";
        //private static long myId = 5562501226;

        private static TelegramBotClient client;
        private static long channel = 777000;
        private static long group = 1087968824;
        private static long anonim = 136817688;
        private static string chat_id;
        private static long fbaNews = -1001562946820;
        private static DateTime timeOfStart = DateTime.Now;

        private static string host { get; set; } = "185.252.147.37";
        private static string user { get; set; } = "lance";
        private static string passwrd { get; set; } = "V1oletIsTop!";
        private static string database { get; set; } = "lance_db";

        private static string conn { get; set; } = $"server={host};user={user};database={database};password={passwrd}";

        static void Main(string[] args)
        {

            client = new TelegramBotClient(token);
            client.StartReceiving(new UpdateType[] { UpdateType.Message, UpdateType.CallbackQuery, UpdateType.Unknown});
            client.OnMessage += OnMessageHandler;
            client.OnCallbackQuery += OnCallbackQueryHandler;
            Console.Title = "LauraBotLogConsole";
            Console.WriteLine("–ë–æ—Ç Ô£ø–õ–∞—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω!");
            Console.WriteLine("===============================");
            Console.WriteLine("Bot Developed on C#\nDev: @LanceMinecraft,\n@TheShadow_hk (Telegram)");
            Console.WriteLine("Version: 1.6.3 open Beta");
            Console.WriteLine("===============================");
            Console.WriteLine($"Time of start: {DateTime.Now}");
            Console.WriteLine("Begin of console log:");
            Console.WriteLine(DateTime.Now + " Checker was started!");
            while (true)
            {
                Checker();
                Thread.Sleep(1250);
            }
            client.StopReceiving();
        }

        private static async void OnCallbackQueryHandler(object sender, CallbackQueryEventArgs e)
        {
            var call = e.CallbackQuery;
            if(call != null)
            {
                try
                {
                    var data = Connector.Connector.GetCapchaByUser(call.From.Id, call.Message.Chat.Id);
                    if(data != null)
                    {
                        if (call.Data == "no_capcha" && call.From.Id == Convert.ToInt64(data[1].ToString()))
                        {
                            var data1 = Connector.Connector.GetCapchaByUser(call.From.Id, call.Message.Chat.Id);
                            if (data1 != null)
                            {
                                var attemps = Convert.ToInt32(data1[4]) - 1;
                                var deadLine = DateTime.Parse(data1[3].ToString());
                                var message = Convert.ToInt32(data1[2].ToString());
                                if (attemps <= 0)
                                {
                                    Connector.Connector.DeleteCapchaUser(call.Message.Chat.Id, call.From.Id);
                                    try
                                    {
                                        await client.DeleteMessageAsync(call.Message.Chat.Id, message);
                                        await client.SendTextMessageAsync(call.Message.Chat.Id, $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href=\"tg://user?id={call.From.Id}\">{call.From.FirstName}</a> –±—É–¥–µ—Ç –∏–∑–≥–Ω–∞–Ω –∏–∑ —á–∞—Ç–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –ø–æ—Ç—Ä–∞—Ç–∏–ª –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏‚ùå", ParseMode.Html, disableWebPagePreview: true);
                                        await client.KickChatMemberAsync(call.Message.Chat.Id, call.From.Id);
                                    }
                                    catch (ApiRequestException exe)
                                    {
                                        await client.SendTextMessageAsync(call.Message.Chat.Id, $"<code>üëæError occured: {exe.Message}</code>", ParseMode.Html);
                                    }
                                }
                                else
                                    Connector.Connector.UpdateAttempsUser(call.From.Id, call.Message.Chat.Id, attemps);
                                    await client.AnswerCallbackQueryAsync(call.Id, showAlert: true, text: $"üôÖüèª‚Äç‚ôÄÔ∏è–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç!\n–û—Å—Ç–∞–ª–æ—Å—å {deadLine.Minute - DateTime.Now.Minute} –º–∏–Ω—É—Ç‚è±\n–ü–æ–ø—ã—Ç–∫–∏: {attemps}");
                            }
                        }
                        if (call.Data == "yes_capcha" && call.From.Id == Convert.ToInt64(data[1].ToString()))
                        {
                            var message = Convert.ToInt32(Connector.Connector.GetCapchaByUser(call.From.Id, call.Message.Chat.Id)[2]);
                            Connector.Connector.DeleteCapchaUser(call.Message.Chat.Id, call.From.Id);
                            await client.RestrictChatMemberAsync(call.Message.Chat.Id, call.From.Id, new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false }, DateTime.Now.AddMinutes(1));
                            await client.DeleteMessageAsync(call.Message.Chat.Id, message);
                            await client.SendTextMessageAsync(call.Message.Chat.Id, $"<b>–í—ã —Ä–µ—à–∏–ª–∏ –∫–∞–ø—á—É‚úÖ!</b> –ß–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ –æ–±—â–∞—Ç—å—Å—èü§ó", ParseMode.Html);
                        }
                    }
                    else if(data == null)
                    {
                        if (call.Data != null)
                        {
                            await client.AnswerCallbackQueryAsync(call.Id, showAlert: true, text: "–ö–∞–ø—á–∞ –Ω–µ –¥–ª—è –≤–∞—Å‚õîÔ∏è");
                        }
                    }
                }
                catch(ApiRequestException exc)
                {
                    Console.WriteLine(exc);
                }
                catch(IndexOutOfRangeException exc2)
                {
                    Console.WriteLine(exc2);
                }
                catch(NullReferenceException exc3)
                {
                    Console.WriteLine(exc3);
                }
            }
        }

        private static async void Checker()
        {
            long chatId = 0;
            long userId = 0;

            try
            {
                MySqlConnection mySql = new MySqlConnection(conn);
                MySqlCommand myCmd;
                MySqlDataReader myReader;

                #region –ê–Ω—Ç–∏—Å–ø–∞–º —Ö—ç–Ω–¥–ª–µ—Ä
                var counter = 0;
                mySql.Open();
                myCmd = new MySqlCommand("SELECT COUNT(*) FROM antispam", mySql);
                myReader = myCmd.ExecuteReader();
                if (myReader.Read() == false)
                {
                    Console.WriteLine("no spam");
                    mySql.Close();
                }
                else
                {
                    counter = Convert.ToInt32(myReader[0].ToString());
                    mySql.Close();

                    var i = 0;
                    while (i < counter)
                    {
                        mySql.Open();
                        var getSpam = "SELECT * FROM antispam";

                        myCmd = new MySqlCommand(getSpam, mySql);
                        myReader = myCmd.ExecuteReader();
                        if (myReader.Read() != false)
                        {
                            userId = Convert.ToInt64(myReader[2].ToString());
                            chatId = Convert.ToInt64(myReader[1].ToString());

                            mySql.Close();

                            Connector.Connector.DeleteAntiSpam(chatId, userId);
                            Console.WriteLine($"Deleting AS for {userId} from {chatId}");
                        }
                        else
                        {
                            mySql.Close();
                            return;
                        }
                        i++;
                    }
                }
                #endregion

                #region –í–∞—Ä–Ω—ã
                mySql.Open();
                var checkDL = "SELECT * FROM warn_users";
                myCmd = new MySqlCommand(checkDL, mySql);
                myReader = myCmd.ExecuteReader();
                while (myReader.Read())
                {
                    userId = Convert.ToInt64(myReader[1].ToString());
                    chatId = Convert.ToInt64(myReader[2].ToString());
                    var warns = myReader[3].ToString();
                    var deadLine = DateTime.Parse(myReader[4].ToString());
                    var dateNow = DateTime.Now;
                    if (deadLine <= dateNow)
                    {
                        Connector.Connector.DeleteWarnUser(userId, chatId);
                        Connector.Connector.DeleteReasonsOfWarns(userId, chatId);
                        Console.WriteLine($"DeadLine for {userId} was expired!");
                    }
                    else
                    {
                        Console.WriteLine($"DeadLine for {userId} ended in {deadLine}!");
                    }

                }
                mySql.Close();
                #endregion

                #region –ü—Ä–æ–≤–µ—Ä–∫–∞ nightmode
                mySql.Open();
                var nightmode = $"SELECT chat_id, nightmode, statemode, status FROM nightmode";
                myCmd = new MySqlCommand(nightmode, mySql);
                myReader = myCmd.ExecuteReader();
                if(myReader.Read() == false)
                {
                    Console.WriteLine("not found");
                    mySql.Close();
                }
                else
                {
                    mySql.Close();

                    mySql.Open();
                    myCmd = new MySqlCommand(nightmode, mySql);
                    myReader = myCmd.ExecuteReader();
                    while (myReader.Read())
                    {
                        chatId = Convert.ToInt64(myReader[0].ToString());
                        var night = myReader[1].ToString().Split(':');
                        var state = myReader[2].ToString().Split(':');
                        var status = myReader[3].ToString();

                        if(status == "statemode")
                        {
                            if (Convert.ToInt32(night[0]) == DateTime.Now.Hour && Convert.ToInt32(night[1]) <= DateTime.Now.Minute)
                            {
                                Connector.Connector.UpdateStatusNight(chatId, "nightmode");
                                await client.SetChatPermissionsAsync(chatId, permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                await client.SendTextMessageAsync(chatId, $"<b>üåô–û–±—ä—è–≤–ª—è–µ—Ç—Å—è –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º!</b>\n–¢–µ–ø–µ—Ä—å –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ –Ω–µ –º–æ–≥—É—Ç –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ {myReader[2].ToString()}", ParseMode.Html);
                            }
                            else
                            {
                                Console.ForegroundColor = ConsoleColor.Cyan;
                                Console.WriteLine("not today");
                                Console.ForegroundColor = ConsoleColor.White;
                            }
                        }
                        else if(status == "nightmode")
                        {
                            if (Convert.ToInt32(state[0]) == DateTime.Now.Hour && Convert.ToInt32(state[1]) <= DateTime.Now.Minute)
                            {
                                Connector.Connector.UpdateStatusNight(chatId, "statemode");
                                await client.SetChatPermissionsAsync(chatId, permissions: new ChatPermissions { CanSendMessages = true, CanSendMediaMessages = true, CanSendOtherMessages = true });
                                await client.SendTextMessageAsync(chatId, $"<b>üåû–ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n–¢–µ–ø–µ—Ä—å –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —á–∞—Ç–∞ –º–æ–≥—É—Ç —Å–≤–æ–±–æ–¥–Ω–æ –ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è", ParseMode.Html);
                            }
                            else
                            {
                                Console.ForegroundColor = ConsoleColor.Cyan;
                                Console.WriteLine("not today");
                                Console.ForegroundColor = ConsoleColor.White;
                            }
                        }

                    }
                    mySql.Close();
                }
                #endregion

                #region –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–≥–æ–¥—ã
                mySql.Open();
                var query = "SELECT user_id, city, next_response FROM weather_subs";
                myCmd = new MySqlCommand(query, mySql);
                myReader = myCmd.ExecuteReader();
                if (myReader.Read() == false)
                {
                    mySql.Close();
                }
                else
                {
                    mySql.Close();

                    mySql.Open();
                    myCmd = new MySqlCommand(query, mySql);
                    myReader = myCmd.ExecuteReader();
                    while (myReader.Read())
                    {
                        var dl = DateTime.Parse(myReader[2].ToString());
                        userId = Convert.ToInt64(myReader[0].ToString());
                        var city = myReader[1].ToString();

                        if (dl > DateTime.Now)
                        {
                            Console.WriteLine("He will not get response");
                        }
                        else
                        {
                            WeatherApi.Weather(city);
                            WeatherApi.Celsius(celsius: WeatherApi.temperatureCity);
                            WeatherApi.WindCourse(WeatherApi.windDegCity);

                            var MainWeather = await client.SendTextMessageAsync(chatId: userId, $"<b>–ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã {dl}</b>\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞ <code>{WeatherApi.nameCity}</code>:</b>\n–ò–Ω–¥–µ–∫—Å Air Pollutionüí®: <code>{WeatherApi.aqi}</code>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–∞üå°: <code>{Math.Round(WeatherApi.temperatureCity)}¬∞C</code>\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <code>{Math.Round(WeatherApi.tempFeelsLikeCity)}¬∞C</code>\n–ü–æ–≥–æ–¥–∞‚õÖ: <code>{WeatherApi.weatherCity}</code>\n–î–∞–≤–ª–µ–Ω–∏–µ‚¨á:<code>{WeatherApi.pressureCity} –≥–ü–∞</code>\n–í–∏–¥–∏–º–æ—Å—Ç—åüëÅ: <code>{WeatherApi.visibilityCity} –∫–º</code>\n–í–ª–∞–∂–Ω–æ—Å—Ç—åüíß: <code>{WeatherApi.humidityCity}%</code>\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üå´: <code>{WeatherApi.windSpeedCity} –º/c</code>\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: <code>{WeatherApi.windDegCity}¬∞ ({WeatherApi.WindAnswer})</code>", parseMode: ParseMode.Html);
                            await client.SendTextMessageAsync(
                                        userId,
                                        replyToMessageId: MainWeather.MessageId,
                                        text:
@$"<b>AirPollution - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–æ–∑–¥—É—Ö–∞:</b>
CO: <i>{WeatherApi.co} –º–∫–≥/–º3</i>
NO: <i>{WeatherApi.no} –º–∫–≥/–º3</i>
NO2: <i>{WeatherApi.no2} –º–∫–≥/–º3</i>
O3: <i>{WeatherApi.o3} –º–∫–≥/–º3</i>
SO2: <i>{WeatherApi.so2} –º–∫–≥/–º3</i>
PM2.5: <i>{WeatherApi.pm2_5} –º–∫–≥/–º3</i>
PM10: <i>{WeatherApi.pm10} –º–∫–≥/–º3</i>
NH3: <i>{WeatherApi.nh3} –º–∫–≥/–º3</i>
",
                                        parseMode: ParseMode.Html);

                            Thread.Sleep(125);
                            await client.SendTextMessageAsync(userId, "üå¶–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–≥–∏–æ–Ω—É.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞ –∫–æ–º–∞–Ω–¥–æ–π /unsub_weatherüîï");
                            Connector.Connector.UpdateSubData(userId, city, DateTime.Now.AddHours(3));
                        }
                    }
                    mySql.Close();
                }
                #endregion
                Thread.Sleep(750);

                #region –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–ø—á–∏ —é–∑–µ—Ä–∞
                mySql.Open();
                var temp_capcha = "SELECT * FROM capcha_temp";
                myCmd = new MySqlCommand(temp_capcha, mySql);
                myReader = myCmd.ExecuteReader();
                if(myReader.Read() == false)
                {
                    Console.WriteLine("No users with capcha : (");
                    mySql.Close();
                }
                else
                {
                    mySql.Close();

                    mySql.Open();
                    myCmd = new MySqlCommand(temp_capcha, mySql);
                    myReader = myCmd.ExecuteReader();
                    while(myReader.Read())
                    {
                        chatId = Convert.ToInt64(myReader[1].ToString());
                        userId = Convert.ToInt64(myReader[2].ToString());
                        var messageId = Convert.ToInt32(myReader[3].ToString());
                        var end_in = DateTime.Parse(myReader[4].ToString());

                        if(end_in <= DateTime.Now)
                        {
                            Connector.Connector.DeleteCapchaUser(chatId, userId);
                            await client.DeleteMessageAsync(chatId, messageId);
                            try
                            {
                                await client.KickChatMemberAsync(chatId, userId);
                                await client.UnbanChatMemberAsync(chatId, userId);
                                await client.SendTextMessageAsync(chatId, $"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç –∏–∑ —á–∞—Ç–∞, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –Ω–µ –¥–æ–∫–∞–∑–∞–ª, —á—Ç–æ –æ–Ω –Ω–µ —Ä–æ–±–æ—ÇüôÖüèª‚Äç‚ôÄÔ∏è", ParseMode.Html, disableWebPagePreview: true);
                            }
                            catch (ApiRequestException exe)
                            {
                                await client.SendTextMessageAsync(chatId, $"<code>üëæError occured: {exe.Message}</code>", ParseMode.Html);
                            }
                        }
                        else
                        {
                            Console.WriteLine("Is capcha");
                        }
                    }
                    mySql.Close();
                }
                #endregion

                #region –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
                mySql.Open();
                var get_soc_control = $"SELECT * FROM social_control";
                myCmd = new MySqlCommand(get_soc_control, mySql);
                myReader = myCmd.ExecuteReader();
                if (myReader.Read() == false)
                {
                    Console.WriteLine("not found");
                }
                else
                {
                    mySql.Close();

                    mySql.Open();
                    myCmd = new MySqlCommand(get_soc_control, mySql);
                    myReader = myCmd.ExecuteReader();
                    while (myReader.Read())
                    {
                        DateTime deadL = DateTime.Parse(myReader[4].ToString());
                        var targId = Convert.ToInt64(myReader[2].ToString());
                        userId = Convert.ToInt64(myReader[1].ToString());
                        if (deadL <= DateTime.Now)
                        {
                            Connector.Connector.DeleteControlSocData(userId, targId);
                        }
                        else
                        {
                            Console.WriteLine("not now");
                        }
                    }
                    mySql.Close();
                }
                #endregion
            }
            catch (ApiRequestException except)
            {
                Console.WriteLine(except);
                if(except.Message == "chat not found")
                {
                    Cleaner.DeleteChatData(chatId);
                }    
            }
            catch (MySqlException eeee)
            {
                Console.ForegroundColor = ConsoleColor.Red;
                Console.WriteLine("Error with db!\n" + eeee.Message);
                Console.ForegroundColor = ConsoleColor.White;
            }
        }

        private static async void OnMessageHandler(object sender, MessageEventArgs e)
        {

            var msg = e.Message;
            var Admin = ChatMemberStatus.Administrator;
            var Member = ChatMemberStatus.Member;
            var Owner = ChatMemberStatus.Creator;
            var Banned = ChatMemberStatus.Kicked;
            var Muted = ChatMemberStatus.Restricted;


            if (msg != null)
            {
                if (msg.NewChatMembers != null)
                {
                    try
                    {
                        if (msg.NewChatMembers[0].Id == myId)
                        {
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "üòå–Ø —Ç–∞–∫ —Ä–∞–¥–∞, —á—Ç–æ –º–µ–Ω—è –¥–æ–±–∞–≤–∏–ª–∏ –≤ —á–∞—Ç\n–Ø –æ–±–µ—â–∞—é —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ –≤ –ø–æ—Å—Ç–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–≤üòâ!");
                            Console.WriteLine($"Bot was added in chat: {msg.Chat.Id}");
                        }
                        else
                        {
                            var USERID = msg.NewChatMembers[0].Id;
                            var FIRSTNAME = msg.NewChatMembers[0].FirstName;
                            var LASTNAME = msg.NewChatMembers[0].LastName;
                            var URLFRSTNAME = $"<a href={USERID}>{FIRSTNAME}</a>";
                            var URLFULLNAME = $"<a href={USERID}>{FIRSTNAME} {LASTNAME}</a>";
                            var TITLECHAT = msg.Chat.Title;

                            Connector.Connector.GetSocialData(msg.NewChatMembers[0].Id);
                            await client.SendStickerAsync(chatId: msg.Chat.Id, sticker: "https://t.me/ScladOfRes/110", replyToMessageId: msg.MessageId);
                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç, <a href = \"tg://user?id={msg.NewChatMembers[0].Id}\">{msg.NewChatMembers[0].FirstName}</a>!\n–í—ã –ø–æ–ø–∞–ª–∏ –≤ ¬´{msg.Chat.Title}¬ª!", parseMode: ParseMode.Html, disableWebPagePreview: true);
                            Thread.Sleep(250);
                            if (Connector.Connector.message == "not rated")
                            {
                                await client.SendTextMessageAsync(msg.Chat.Id, "–û–± —ç—Ç–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ —á–∞—Ç–∞ –º–Ω–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –±—É–¥—å—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã —Å –Ω–∏–º!");
                            }
                            else
                            {
                                var mesg = "";
                                if (Connector.Connector.user_rating < 0)
                                {
                                    mesg = $"üìâ\nüìõ–î–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–º, –¥–∏–∞–ª–æ–≥ —Å –Ω–∏–º –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–∫—Å–∏—á–Ω—ã–º‚ò¢Ô∏è";
                                }
                                else
                                {
                                    mesg = $"üìà\n–î–∞–Ω–Ω—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ —è–≤–ª—è–µ—Ç—Å—è –Ω–æ—Ä–º–∞–ª—å–Ω—ã–º, –æ–±—â–µ–Ω–∏–µ —Å –Ω–∏–º –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–ºüß∏";
                                }
                                await client.SendTextMessageAsync(msg.Chat.Id, $"<b>üóÑ–†–µ–π—Ç–∏–Ω–≥ —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞:</b> {Connector.Connector.user_rating}{mesg}", ParseMode.Html);
                            }
                            Console.WriteLine($"{DateTime.Now} New member in chat: {msg.Chat.Id}");
                            Thread.Sleep(350);
                            ChatMember[] admins = await client.GetChatAdministratorsAsync(msg.Chat.Id);
                            if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == myId; }) == null)
                            {
                                return;
                            }
                            else
                            {
                                Connector.Connector.GetCapchaSetting(msg.Chat.Id);
                                if (Connector.Connector.message == "not found")
                                {
                                    Connector.Connector.CreateCapchaSetting(msg.Chat.Id, "off", 5);
                                }
                                else
                                {
                                    if (Connector.Connector.capcha_status == "off")
                                    {
                                        return;
                                    }
                                    else
                                    {
                                        var mesg = await client.SendTextMessageAsync(msg.Chat.Id, $"üëæ<a href=\"{msg.NewChatMembers[0].Id}\">{msg.NewChatMembers[0].FirstName}</a>, —É –≤–∞—Å –µ—Å—Ç—å {Connector.Connector.minutes} –º–∏–Ω—É—Ç, —á—Ç–æ–±—ã –¥–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –≤—ã –Ω–µ –±–æ—Ç!\n–ù–∞–π–¥–∏—Ç–µ —Å–º–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è –æ—Ç 4 –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–º–∞–π–ª–æ–≤üîç:", ParseMode.Html, replyMarkup: CapchaButtons.GetRandomCapcha());
                                        try
                                        {
                                            await client.RestrictChatMemberAsync(msg.Chat.Id, msg.NewChatMembers[0].Id, new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false }, DateTime.Now.AddYears(1));
                                            Connector.Connector.TempingCapchaUser(msg.NewChatMembers[0].Id, msg.Chat.Id, mesg.MessageId, DateTime.Now.AddMinutes(Connector.Connector.minutes), 4);
                                        }
                                        catch (ApiRequestException exe)
                                        {
                                            await client.SendTextMessageAsync(msg.Chat.Id, $"<code>üëæError occured: {exe.Message}</code>", ParseMode.Html);
                                            Connector.Connector.DeleteCapchaUser(msg.Chat.Id, msg.NewChatMembers[0].Id);
                                        }
                                        catch (IndexOutOfRangeException exece)
                                        {
                                            Console.WriteLine("Oh shit");
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (ApiRequestException exc)
                    {
                        Console.WriteLine(exc);
                    }

                }

                if (msg.LeftChatMember != null)
                {
                    if (msg.LeftChatMember.Id == myId)
                    {
                        Connector.Connector.DeleteUserBot(msg.Chat.Id);
                        Connector.Connector.DeleteNightMode(msg.Chat.Id);
                        return;
                    }
                    else if(msg.From.Id != myId)
                    {
                        Connector.Connector.DeleteReasonsOfWarns(msg.LeftChatMember.Id, msg.Chat.Id);
                        Connector.Connector.DeleteWarnUser(msg.LeftChatMember.Id, msg.Chat.Id);
                        await client.SendStickerAsync(chatId: msg.Chat.Id, sticker: "https://t.me/ScladOfRes/59");
                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.LeftChatMember.Id}\">{msg.LeftChatMember.FirstName}</a> –ø–æ–∫–∏–Ω—É–ª —á–∞—Ç!", parseMode: ParseMode.Html, disableWebPagePreview: true);

                        Console.WriteLine($"{DateTime.Now} Member ID{msg.LeftChatMember.Id} left from chat: {msg.Chat.Id}");
                    }
                }

                if (msg.Photo != null)
                {
                    if (msg.Chat.Id == fbaNews && msg.From.Id == channel)
                    {
                        try
                        {
                            var news = msg.Caption;
                            var photo = msg.Photo[0].FileId;

                            var myComment = Connector.Connector.GetNotifComment(msg.Chat.Id);
                            if (myComment == null)
                            {
                                Console.WriteLine("not found");
                            }
                            else
                                await client.SendTextMessageAsync(msg.Chat.Id, myComment, ParseMode.Html, replyToMessageId: msg.MessageId);

                            MySqlConnection MySql1 = new MySqlConnection(conn);
                            MySqlCommand sqlCommand1;
                            MySqlDataReader sqlReader1;

                            MySql1.Open();
                            var sql1 = $"SELECT chat_id FROM userbot WHERE is_get = 'on'";
                            sqlCommand1 = new MySqlCommand(sql1, MySql1);
                            sqlReader1 = sqlCommand1.ExecuteReader();
                            while (sqlReader1.Read())
                            {
                                try
                                {
                                    await client.SendPhotoAsync(Convert.ToInt64(sqlReader1[0]), photo: photo, caption: $"<b>üì¨–ì–æ–≤–æ—Ä–∏—Ç <a href=\"https://t.me/FBA_Studio\">FBA Studio</a>:</b>\n<i>{news}</i>", ParseMode.Html, replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithUrl("–ü–æ—Å–µ—Ç–∏—Ç—å –∫–∞–Ω–∞–ª", "https://t.me/FBA_Studio")));
                                    Thread.Sleep(1500);
                                }
                                catch (ApiRequestException exception)
                                {
                                    Console.WriteLine(exception.Message);
                                    Connector.Connector.DeleteUserBot(Convert.ToInt64(sqlReader1[0]));
                                }
                            }
                        }
                        catch(Exception er)
                        {
                            Console.WriteLine(er);
                        }
                    }
                    else if (msg.From.Id == channel)
                    {
                        var myComment = Connector.Connector.GetNotifComment(msg.Chat.Id);
                        if (myComment == null)
                        {
                            return;
                        }
                        else
                            await client.SendTextMessageAsync(msg.Chat.Id, myComment, ParseMode.Html, replyToMessageId: msg.MessageId);
                    }
                    else
                    {
                        return;
                    }
                }

                if (msg.Video != null)
                {
                    if (msg.Chat.Id == fbaNews & msg.From.Id == channel)
                    {
                        try
                        {
                            var news = msg.Caption;
                            var video = msg.Video.FileId;

                            var myComment = Connector.Connector.GetNotifComment(msg.Chat.Id);
                            if (myComment == null)
                            {
                                Console.WriteLine("not found");
                            }
                            else
                                await client.SendTextMessageAsync(msg.Chat.Id, myComment, ParseMode.Html, replyToMessageId: msg.MessageId);

                            MySqlConnection MySql1 = new MySqlConnection(conn);
                            MySqlCommand sqlCommand1;
                            MySqlDataReader sqlReader1;

                            MySql1.Open();
                            var sql1 = $"SELECT chat_id FROM userbot WHERE is_get = 'on'";
                            sqlCommand1 = new MySqlCommand(sql1, MySql1);
                            sqlReader1 = sqlCommand1.ExecuteReader();
                            while (sqlReader1.Read())
                            {
                                try
                                {
                                    await client.SendVideoAsync(chatId: Convert.ToInt64(sqlReader1[0]), video: video, caption: $"<b>üì¨–ì–æ–≤–æ—Ä–∏—Ç <a href=\"https://t.me/FBA_Studio\">FBA Studio</a>:</b>\n<i>{news}</i>", parseMode: ParseMode.Html, replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithUrl("–ü–æ—Å–µ—Ç–∏—Ç—å –∫–∞–Ω–∞–ª", "https://t.me/FBA_Studio")));
                                    Thread.Sleep(1500);
                                }
                                catch (ApiRequestException exception)
                                {
                                    Console.WriteLine(exception.Message);
                                    Connector.Connector.DeleteUserBot(Convert.ToInt64(sqlReader1[0]));
                                }
                            }
                        }
                        catch(Exception er)
                        {
                            Console.WriteLine(er);
                        }
                    }
                    else if (msg.From.Id == channel)
                    {
                        var myComment = Connector.Connector.GetNotifComment(msg.Chat.Id);
                        if (myComment == null)
                        {
                            return;
                        }
                        else
                            await client.SendTextMessageAsync(msg.Chat.Id, myComment, ParseMode.Html, replyToMessageId: msg.MessageId);
                    }
                    else
                    {
                        return;
                    }
                }

                if (msg.Audio != null)
                {
                    if (msg.Chat.Id == fbaNews && msg.From.Id == channel)
                    {
                        try
                        {
                            var news = msg.Caption;
                            var audio = msg.Audio.FileId;

                            var myComment = Connector.Connector.GetNotifComment(msg.Chat.Id);
                            if (myComment == null)
                            {
                                Console.WriteLine("not found");
                            }
                            else
                                await client.SendTextMessageAsync(msg.Chat.Id, myComment, ParseMode.Html, replyToMessageId: msg.MessageId);

                            MySqlConnection MySql1 = new MySqlConnection(conn);
                            MySqlCommand sqlCommand1;
                            MySqlDataReader sqlReader1;

                            MySql1.Open();
                            var sql1 = $"SELECT chat_id FROM userbot WHERE is_get = 'on'";
                            sqlCommand1 = new MySqlCommand(sql1, MySql1);
                            sqlReader1 = sqlCommand1.ExecuteReader();
                            while (sqlReader1.Read())
                            {
                                try
                                {
                                    await client.SendAudioAsync(Convert.ToInt64(sqlReader1[0]), audio, $"<b>üì¨–ì–æ–≤–æ—Ä–∏—Ç <a href=\"https://t.me/FBA_Studio\">FBA Studio</a>:</b>\n<i>{news}</i>", ParseMode.Html, replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithUrl("–ü–æ—Å–µ—Ç–∏—Ç—å –∫–∞–Ω–∞–ª", "https://t.me/FBA_Studio")));
                                    Thread.Sleep(1500);
                                }
                                catch (ApiRequestException exception)
                                {
                                    Console.WriteLine(exception.Message);
                                    Connector.Connector.DeleteUserBot(Convert.ToInt64(sqlReader1[0]));
                                }
                            }
                        }
                        catch(Exception err)
                        {
                            Console.WriteLine(err);
                        }
                    }
                    else if (msg.From.Id == channel)
                    {
                        var myComment = Connector.Connector.GetNotifComment(msg.Chat.Id);
                        if (myComment == null)
                        {
                            return;
                        }
                        else
                            await client.SendTextMessageAsync(msg.Chat.Id, myComment, ParseMode.Html, replyToMessageId: msg.MessageId);
                    }
                    else
                    {
                        return;
                    }
                }

                if (msg.Sticker != null)
                {
                    if(msg.ReplyToMessage != null && msg.Chat.Id != msg.From.Id)
                        switch (msg.Sticker.Emoji)
                        {
                            case "üëç":
                                {
                                    if (msg.ReplyToMessage.From.Id == msg.From.Id)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –∞ —É –≤–∞—Å, –∫–∞–∫ —è –≤–∏–∂—É, –≤—ã—Å–æ–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞üòè", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    }
                                    else
                                    {
                                        Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                        if (Connector.Connector.message == "don't rate")
                                        {
                                            Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                            if (Connector.Connector.message == "not rated")
                                            {
                                                Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, 1);
                                                Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                            }
                                            else
                                            {
                                                Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                var rating = Connector.Connector.user_rating + 1;
                                                Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                            }
                                        }
                                        else
                                        {
                                            Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                            if (Connector.Connector.message == "not rated")
                                            {
                                                Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, 1);
                                                Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                            }
                                            else
                                            {
                                                Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                                if (Connector.Connector.count_control >= 4)
                                                {
                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"üö´–í—ã —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è <b>{msg.ReplyToMessage.From.FirstName}</b>\n‚è±–î–∞—Ç–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞: {Connector.Connector.soc_control}", ParseMode.Html);
                                                }
                                                else
                                                {
                                                    var control = Connector.Connector.count_control + 1;
                                                    Connector.Connector.UpdateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, control, DateTime.Now.AddDays(1));
                                                    var rating = Connector.Connector.user_rating + 1;
                                                    Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                            case "üëé":
                                {
                                    if (msg.ReplyToMessage.From.Id == msg.From.Id)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –∑–∞—á–µ–º —Å–µ–±—è —Ç–∞–∫ —É–Ω–∏–∂–∞—Ç—åüòï", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    }
                                    else
                                    {
                                        Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                        if (Connector.Connector.message == "don't rate")
                                        {
                                            Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                            if (Connector.Connector.message == "not rated")
                                            {
                                                Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, -1);
                                                Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: -1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                            }
                                            else
                                            {
                                                Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                var rating = Connector.Connector.user_rating - 1;
                                                Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                            }
                                        }
                                        else
                                        {
                                            Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                            if (Connector.Connector.message == "not rated")
                                            {
                                                Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, -1);
                                                Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: -1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                            }
                                            else
                                            {
                                                Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                                if (Connector.Connector.count_control >= 4)
                                                {
                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"üö´–í—ã —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è <b>{msg.ReplyToMessage.From.FirstName}</b>\n‚è±–î–∞—Ç–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞: {Connector.Connector.soc_control}", ParseMode.Html);
                                                }
                                                else
                                                {
                                                    var control = Connector.Connector.count_control + 1;
                                                    Connector.Connector.UpdateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, control, DateTime.Now.AddDays(1));
                                                    var rating = Connector.Connector.user_rating - 1;
                                                    Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                }
                                            }
                                        }
                                    }
                                    break;
                                }
                        }
                }

                if (msg.Document != null)
                {
                    if (msg.Chat.Id == fbaNews && msg.From.Id == channel)
                    {
                        try
                        {
                            var news = msg.Caption;
                            var document = msg.Document.FileId;

                            var myComment = Connector.Connector.GetNotifComment(msg.Chat.Id);
                            if (myComment == null)
                            {
                                Console.WriteLine("not found");
                            }
                            else
                                await client.SendTextMessageAsync(msg.Chat.Id, myComment, ParseMode.Html, replyToMessageId: msg.MessageId);

                            MySqlConnection MySql1 = new MySqlConnection(conn);
                            MySqlCommand sqlCommand1;
                            MySqlDataReader sqlReader1;

                            MySql1.Open();
                            var sql1 = $"SELECT chat_id FROM userbot WHERE is_get = 'on'";
                            sqlCommand1 = new MySqlCommand(sql1, MySql1);
                            sqlReader1 = sqlCommand1.ExecuteReader();
                            while (sqlReader1.Read())
                            {
                                try
                                {
                                    await client.SendDocumentAsync(Convert.ToInt64(sqlReader1[0]), document, $"<b>üì¨–ì–æ–≤–æ—Ä–∏—Ç <a href=\"https://t.me/FBA_Studio\">FBA Studio</a>:</b>\n<i>{news}</i>", parseMode: ParseMode.Html, replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithUrl("–ü–æ—Å–µ—Ç–∏—Ç—å –∫–∞–Ω–∞–ª", "https://t.me/FBA_Studio")));
                                    Thread.Sleep(1500);
                                }
                                catch (ApiRequestException exception)
                                {
                                    Console.WriteLine(exception.Message);
                                    Connector.Connector.DeleteUserBot(Convert.ToInt64(sqlReader1[0]));
                                }
                            }
                        }
                        catch (Exception errrr)
                        {
                            Console.WriteLine(errrr);
                        }
                    }
                    else if (msg.From.Id == channel)
                    {
                        var myComment = Connector.Connector.GetNotifComment(msg.Chat.Id);
                        if (myComment == null)
                        {
                            return;
                        }
                        else
                            await client.SendTextMessageAsync(msg.Chat.Id, myComment, ParseMode.Html, replyToMessageId: msg.MessageId);
                    }
                    else if (msg.Chat.Id != msg.From.Id && msg.Document.MimeType == "video/mp4")
                    {
                        if (msg.From.Id == channel || msg.From.Id == group || msg.From.Id == anonim)
                        {
                            return;
                        }
                        Connector.Connector.GetAntiSpam(msg.From.Id, msg.Chat.Id);
                        if (Connector.Connector.message == "not found")
                        {
                            Connector.Connector.GetSpamConfig(msg.Chat.Id);
                            if (Connector.Connector.message == "not found")
                            {
                                return;
                            }
                            else
                            {
                                if (Connector.Connector.as_active == "off")
                                {
                                    return;
                                }
                                else
                                {
                                    Connector.Connector.CreateAntiSpam(msg.From.Id, msg.Chat.Id, 1);
                                }
                            }
                        }
                        else
                        {
                            Connector.Connector.GetSpamConfig(msg.Chat.Id);
                            if (Connector.Connector.message == "not found")
                            {
                                return;
                            }
                            else
                            {
                                if (Connector.Connector.as_active == "off")
                                {
                                    return;
                                }
                                else
                                {
                                    if (Connector.Connector.countMess >= Connector.Connector.maxMess)
                                    {
                                        ChatMember[] admins = await client.GetChatAdministratorsAsync(msg.Chat.Id);
                                        if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == myId; }) == null)
                                        {
                                            return;
                                        }
                                        else if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == msg.From.Id; }) != null)
                                        {
                                            return;
                                        }
                                        else
                                        {
                                            Connector.Connector.DeleteAntiSpam(msg.Chat.Id, msg.From.Id);
                                            await client.RestrictChatMemberAsync(msg.Chat.Id, msg.From.Id, new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false }, DateTime.Now.AddMinutes(30));
                                            await client.SendTextMessageAsync(msg.Chat.Id, $"<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —Ñ–ª—É–¥–∏—Ç, —è –∑–∞–≥–ª—É—à–∏–ª–∞ –µ–≥–æ –Ω–∞ 30 –º–∏–Ω—É—Çüîá", ParseMode.Html, disableWebPagePreview: true);
                                        }
                                    }
                                    else
                                    {
                                        var max = Connector.Connector.countMess + 1;
                                        Connector.Connector.UpdateAntiSpam(msg.Chat.Id, msg.From.Id, max);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        Console.WriteLine("new document");
                        return;
                    }
                }

                if (msg.Animation != null)
                {
                    if(msg.Chat.Id != msg.From.Id)
                    {
                        if (msg.From.Id == channel || msg.From.Id == group || msg.From.Id == anonim)
                        {
                            return;
                        }
                        Connector.Connector.GetAntiSpam(msg.From.Id, msg.Chat.Id);
                        if (Connector.Connector.message == "not found")
                        {
                            Connector.Connector.GetSpamConfig(msg.Chat.Id);
                            if (Connector.Connector.message == "not found")
                            {
                                return;
                            }
                            else
                            {
                                if (Connector.Connector.as_active == "off")
                                {
                                    return;
                                }
                                else
                                {
                                    Connector.Connector.CreateAntiSpam(msg.From.Id, msg.Chat.Id, 1);
                                }
                            }
                        }
                        else
                        {
                            Connector.Connector.GetSpamConfig(msg.Chat.Id);
                            if (Connector.Connector.message == "not found")
                            {
                                return;
                            }
                            else
                            {
                                if (Connector.Connector.as_active == "off")
                                {
                                    return;
                                }
                                else
                                {
                                    if (Connector.Connector.countMess >= Connector.Connector.maxMess)
                                    {
                                        ChatMember[] admins = await client.GetChatAdministratorsAsync(msg.Chat.Id);
                                        if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == myId; }) == null)
                                        {
                                            return;
                                        }
                                        else if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == msg.From.Id; }) != null)
                                        {
                                            return;
                                        }
                                        else
                                        {
                                            Connector.Connector.DeleteAntiSpam(msg.Chat.Id, msg.From.Id);
                                            await client.RestrictChatMemberAsync(msg.Chat.Id, msg.From.Id, new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false }, DateTime.Now.AddMinutes(30));
                                            await client.SendTextMessageAsync(msg.Chat.Id, $"<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —Ñ–ª—É–¥–∏—Ç, —è –∑–∞–≥–ª—É—à–∏–ª–∞ –µ–≥–æ –Ω–∞ 30 –º–∏–Ω—É—Çüîá", ParseMode.Html, disableWebPagePreview: true);
                                        }
                                    }
                                    else
                                    {
                                        var max = Connector.Connector.countMess + 1;
                                        Connector.Connector.UpdateAntiSpam(msg.Chat.Id, msg.From.Id, max);
                                    }
                                }
                            }
                        }
                    }
                    else
                    {
                        return;
                    }
                }

                if (msg.Text != null)
                {
                    try
                    {
                        MySqlConnection MySql = new MySqlConnection(conn);
                        MySqlCommand sqlCommand;
                        MySqlDataReader sqlReader;

                        MySql.Open();
                        var sql = $"SELECT * FROM userbot WHERE chat_id = '{msg.Chat.Id}'";
                        sqlCommand = new MySqlCommand(sql, MySql);
                        sqlReader = sqlCommand.ExecuteReader();
                        while (sqlReader.Read())
                        {
                            chat_id = sqlReader[1].ToString();
                        }
                        MySql.Close();

                        if(chat_id == null)
                        {
                            MySql = new MySqlConnection(conn);
                            MySql.Open();
                            var sqlIns = $"INSERT INTO userbot (id, chat_id, is_get) VALUES ('0', '{msg.Chat.Id}', 'on')";
                            sqlCommand = new MySqlCommand(sqlIns, MySql);
                            sqlCommand.ExecuteNonQuery();
                            MySql.Close();
                        }

                        chat_id = null;

                        Console.WriteLine($"{DateTime.Now} New Message from ID{msg.Chat.Id}, it's message: {msg.Text}");

                        if (msg.Chat.Id == fbaNews && msg.From.Id == channel)
                        {
                            try
                            {
                                var news = msg.Text;
                                var myComment = Connector.Connector.GetNotifComment(msg.Chat.Id);
                                if (myComment == null)
                                {
                                    Console.WriteLine("not found");
                                }
                                else
                                    await client.SendTextMessageAsync(msg.Chat.Id, myComment, ParseMode.Html, replyToMessageId: msg.MessageId);

                                MySqlConnection MySql1 = new MySqlConnection(conn);
                                MySqlCommand sqlCommand1;
                                MySqlDataReader sqlReader1;

                                MySql1.Open();
                                var sql1 = "SELECT chat_id FROM userbot WHERE is_get = 'on'";
                                sqlCommand1 = new MySqlCommand(sql1, MySql1);
                                sqlReader1 = sqlCommand1.ExecuteReader();
                                while (sqlReader1.Read())
                                {
                                    try
                                    {
                                        await client.SendTextMessageAsync(Convert.ToInt64(sqlReader1[0]), $"<b>üì¨–ì–æ–≤–æ—Ä–∏—Ç <a href=\"https://t.me/FBA_Studio\">FBA Studio</a>:</b>\n<i>{news}</i>", ParseMode.Html, replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithUrl("–ü–æ—Å–µ—Ç–∏—Ç—å –∫–∞–Ω–∞–ª", "https://t.me/FBA_Studio")), disableWebPagePreview: true);
                                        Thread.Sleep(1500);
                                    }
                                    catch(ApiRequestException exception)
                                    {
                                        Console.WriteLine(exception.Message);
                                        Connector.Connector.DeleteUserBot(Convert.ToInt64(sqlReader1[0]));
                                    }
                                }
                            }
                            catch(Exception err)
                            {
                                Console.WriteLine(err);
                            }
                        }
                        else if(msg.From.Id == channel)
                        {
                            var myComment = Connector.Connector.GetNotifComment(msg.Chat.Id);
                            if (myComment == null)
                            {
                                return;
                            }
                            else
                                await client.SendTextMessageAsync(msg.Chat.Id, myComment, ParseMode.Html, replyToMessageId: msg.MessageId);
                        }
                        else
                        {
                            Connector.Connector.GetNoBadLyrics(msg.Chat.Id);
                            if (Connector.Connector.message == "not found" && msg.Chat.Id != msg.From.Id)
                            {
                                Connector.Connector.RegisterNoBadLyrics(msg.Chat.Id, "off");
                            }
                            if (Connector.Connector.isActive == "on")
                            {
                                if (MessageParser.ScanOnBadWords(msg.Text.ToLower()) == false)
                                {
                                    Console.WriteLine("No bad words");
                                }
                                else
                                {
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(msg.Chat.Id);
                                    if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, "üò∂");
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == msg.From.Id; }) != null)
                                    {
                                        await client.DeleteMessageAsync(msg.Chat.Id, msg.MessageId);
                                        await client.SendTextMessageAsync(msg.Chat.Id, $"<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a>, –≤—ã –∫–∞–∫ —Å–µ–±–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—Éüòï?", ParseMode.Html, disableWebPagePreview: true);
                                    }
                                    else
                                    {
                                        await client.DeleteMessageAsync(msg.Chat.Id, msg.MessageId);
                                        await client.RestrictChatMemberAsync(msg.Chat.Id, msg.From.Id, untilDate: DateTime.Now.AddMinutes(30), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(msg.Chat.Id, $"<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –ø–æ–ª—É—á–∞–µ—Ç –º—É—Ç 30 –º–∏–Ω—É—Ç –∑–∞ —É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω–æ–π –ª–µ–∫—Å–∏–∫–∏üó£!");
                                    }
                                }

                            }

                            //start command & help command
                            if (msg.Text.StartsWith("/start"))
                            {
                                if (msg.Chat.Id != msg.From.Id)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç –õ–∞—É—Ä–∞!\n–ù–∞–ø–∏—à–∏—Ç–µ üëâ/help, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.");
                                    BotCommand[] botCommands = { new() { Command = "start", Description = "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥" }, new() { Command = "help", Description = "–ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞" }, new() { Command = "getchatid", Description = "–ü–æ–ª—É—á–∏—Ç—å ID –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞" }, new() { Command = "nightmode", Description = "–í–∫–ª—é—á–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤ —á–∞—Ç–µ" }, new() { Command = "statemode", Description = "–í–µ—Ä–Ω—É—Ç—å —á–∞—Ç –≤ —à—Ç–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º" }, new() { Command = "getourid", Description = "–ü–æ–ª—É—á–∏—Ç—å ID —É—á–∞—Å—Ç–Ω–∏–∫–∞ —á–∞—Ç–∞" }, new() { Command = "warn", Description = "–ö–∏–Ω—É—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫—É" }, new() { Command = "setmaxwarns", Description = "–ò–∑–º–µ–Ω–∏—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π" }, new() { Command = "setpunish", Description = "–°–º–µ–Ω–∏—Ç—å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ" }, new() { Command = "setlyriccontrol", Description = "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—è –æ–±—â–µ–Ω–∏—è" }, new() { Command = "uptime", Description = "–£–∑–Ω–∞—Ç—å –∞–ø—Ç–∞–π–º –±–æ—Ç–∞" } };
                                    await client.SetMyCommandsAsync(botCommands);
                                    await client.GetMyCommandsAsync();
                                    await client.SetMyCommandsAsync(botCommands);
                                    Console.WriteLine($"Bot was started in chat: ID{msg.Chat.Id}");
                                    return;
                                }
                                else
                                {
                                    BotCommand[] botCommands = { new() { Command = "start", Description = "–û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥" }, new() { Command = "getmyid", Description = "–ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ª–∏—á–Ω—ã–π ID" }, new() { Command = "uptime", Description = "–£–∑–Ω–∞—Ç—å –∞–ø—Ç–∞–π–º –±–æ—Ç–∞" }, new() { Command = "sub_weather", Description = "–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã" }, new() { Command = "unsub_weather", Description = "–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã" } };
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —á–∞—Ç-–º–µ–Ω–µ–¥–∂–µ—Ä –±–æ—Ç –õ–∞—É—Ä–∞!\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—Éüëâ¬´–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüìö¬ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.", replyMarkup: GetButtons());
                                    await client.SetMyCommandsAsync(botCommands);
                                    await client.GetMyCommandsAsync();
                                    await client.SetMyCommandsAsync(botCommands);
                                    Console.WriteLine($"Bot was started in chat: ID{msg.Chat.Id}");
                                    return;
                                }
                            }

                            if (msg.Text.StartsWith("/help"))
                            {
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º:\ntelegra.ph/Rabota-s-botom-Laura-10-18", parseMode: ParseMode.Html, disableWebPagePreview: false);
                                return;
                            }

                            if (msg.Text.ToLower() == "–º–æ–π —Ä–µ–π—Ç–∏–Ω–≥")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    Connector.Connector.GetSocialData(msg.From.Id);
                                    if (Connector.Connector.message == "not rated")
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, $"<b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥üìä</b>: 0", ParseMode.Html);
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, $"<b>–í–∞—à —Ä–µ–π—Ç–∏–Ω–≥üìä</b>: {Connector.Connector.user_rating}", ParseMode.Html);
                                    }
                                }
                            }

                            //Admins Commands
                            if (msg.Text.ToUpper() == "–ë–ê–ù")
                            {
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                        return;
                                    }
                                    else if (msg.ReplyToMessage.From.IsBot)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ!");
                                        return;
                                    }
                                    else if (msg.ReplyToMessage != null)
                                    {
                                        ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                        bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                        var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                        var MemberTarget = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);
                                        if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == 5565507778; }) == null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                            return;
                                        }
                                        else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                            return;
                                        }
                                        else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.ReplyToMessage.From.Id; }) != null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                            return;

                                        }
                                        else
                                        {
                                            await client.KickChatMemberAsync(userId: msg.ReplyToMessage.From.Id, chatId: msg.Chat.Id, cancellationToken: default);
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùå–£—á–∞—Å—Ç–Ω–∏–∫ <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                            return;
                                        }
                                    }
                                }
                            }

                            if (msg.Text.ToLower().StartsWith("–±–∞–Ω\n"))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }

                                else if (msg.ReplyToMessage.From.IsBot)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ!");
                                    return;
                                }

                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                    return;
                                }
                                else if (msg.ReplyToMessage != null)
                                {
                                    var InMsg = msg.Text;
                                    InMsg = msg.Text.Split(msg.Text.Split('\n')[0] + '\n')[1];
                                    var BanText = InMsg;

                                    Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                    var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                    var MemberTarget = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);
                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == 5565507778; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.ReplyToMessage.From.Id; }) != null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª");
                                        return;
                                    }
                                    else
                                        await client.KickChatMemberAsync(userId: msg.ReplyToMessage.From.Id, chatId: msg.Chat.Id, cancellationToken: default);
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùå–£—á–∞—Å—Ç–Ω–∏–∫ <a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º: <a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a>!\n–ü—Ä–∏—á–∏–Ω–∞: <i>{BanText}</i>", parseMode: ParseMode.Html);
                                }
                            }

                            if (msg.Text.ToLower().StartsWith("–±–∞–Ω @"))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    var username = msg.Text.Split('@')[1];
                                    if (username.EndsWith(' '))
                                        username = username.Split(' ')[0];
                                    var target = await MessageParser.GetUserIdByUsernameAsync(username, token);
                                    if (target == null)
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, "‚ö†Ô∏è–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ Telegram API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –Æ–∑–µ—Ä–Ω–µ–π–º—É, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ!");
                                        return;
                                    }
                                    var targetId = Convert.ToInt64(target[0]);
                                    var firstName = target[1].ToString();

                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == targetId; }) != null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"tg://user?id={targetId}\">{firstName}</a> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;

                                    }
                                    else
                                    {
                                        await client.KickChatMemberAsync(userId: targetId, chatId: msg.Chat.Id, cancellationToken: default);
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùå–£—á–∞—Å—Ç–Ω–∏–∫ <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º:<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                }
                            }

                            if (msg.Text.ToUpper() == "–†–ê–ó–ë–ê–ù")
                            {
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }

                                    else if (msg.ReplyToMessage.From.IsBot)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ!");
                                        return;
                                    }

                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                        return;
                                    }
                                    else if (msg.ReplyToMessage != null)
                                    {
                                        Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                        bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                        var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                        var MemberTarget = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);
                                        if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == 5565507778; }) == null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                            return;
                                        }
                                        else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                            return;
                                        }
                                        else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.ReplyToMessage.From.Id; }) != null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                            return;
                                        }
                                        else if (MemberTarget.Status != Banned)
                                        {
                                            if (msg.ReplyToMessage.From.Username == null)
                                            {
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µüòï!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                                return;
                                            }
                                        }
                                        else
                                        {
                                            await client.UnbanChatMemberAsync(userId: msg.ReplyToMessage.From.Id, chatId: msg.Chat.Id, cancellationToken: default);
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚úÖ–£—á–∞—Å—Ç–Ω–∏–∫ <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º <a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>!\n–¢–µ–ø–µ—Ä—å –µ–≥–æ –º–æ–∂–Ω–æ –æ–±—Ä–∞—Ç–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –≤ —á–∞—Çü§ó.", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                            return;
                                        }
                                    }
                                    return;
                                }
                            }

                            if (msg.Text.ToUpper() == "–†–ê–ó–ú–£–¢")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }

                                else if (msg.ReplyToMessage.From.IsBot)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ!");
                                    return;
                                }

                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                    return;
                                }
                                else if (msg.ReplyToMessage != null)
                                {
                                    Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                    var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                    var MemberTarget = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);
                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == 5565507778; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.ReplyToMessage.From.Id; }) != null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (MemberTarget.Status != ChatMemberStatus.Restricted)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> –Ω–µ –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ωüòê!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else
                                    {
                                        await client.PromoteChatMemberAsync(userId: msg.ReplyToMessage.From.Id, chatId: msg.Chat.Id, cancellationToken: default);
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚úÖ–£—á–∞—Å—Ç–Ω–∏–∫ <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –æ–±—â–∞—Ç—å—Å—è!\n\n–¢–æ–ª—å–∫–æ –ª—É—á—à–µ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–≤–æ–∏–º —è–∑—ã–∫–æ–º –∏ –Ω–µ —Ä–∞–∑–∂–∏–≥–∞—Ç—å —Å—Å–æ—Ä—ã –≤ —á–∞—Ç–µüòä.\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: <a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                }
                                return;
                            }

                            if (msg.Text.ToUpper() == "–ú–£–¢")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                    return;
                                }
                                else if (msg.ReplyToMessage.From.IsBot)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ!");
                                    return;
                                }

                                else if (msg.ReplyToMessage != null)
                                {
                                    Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    bool isAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                    var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                    var MemberTarget = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);
                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == 5565507778; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.ReplyToMessage.From.Id; }) != null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (MemberTarget.Status == ChatMemberStatus.Restricted)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> —É–∂–µ –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ωüìõ!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else
                                    {
                                        await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(15), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a> –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ 15 –º–∏–Ω—É—Ç!\n–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: <a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                }
                                return;
                            }

                            if (msg.Text.ToLower().StartsWith("–º—É—Ç "))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                    return;
                                }
                                else if (msg.ReplyToMessage.From.IsBot)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ!");
                                    return;
                                }

                                else if (msg.ReplyToMessage != null)
                                {
                                    var MuteTimeout = msg.Text;
                                    String[] SplitSymbol = MuteTimeout.Split(' ');
                                    var TimeOut = Convert.ToDouble(SplitSymbol[1]);

                                    Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    bool isAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                    var MemberOutput = client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                    var MemberTarget = client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);

                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        if (msg.From.Username == null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!");
                                            return;
                                        }
                                        else
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"https://t.me/{msg.From.Username}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!");
                                            return;
                                        }
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.ReplyToMessage.From.Id; }) != null)
                                    {
                                        if (msg.ReplyToMessage.From.Username == null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href = \"https://t.me/{msg.ReplyToMessage.From.Username}\"></a> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª");
                                            return;
                                        }
                                        else
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª");
                                            return;
                                        }
                                    }
                                    else
                                        switch (SplitSymbol[2].Trim())
                                        {
                                            //–ß–∞—Å–æ–≤–æ–π —Ç–∏–ø
                                            case "–ß–∞—Å":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddHours(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} —á–∞—Åüîá!");
                                                break;

                                            case "—á–∞—Å":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddHours(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} —á–∞—Åüîá!");
                                                break;

                                            case "–ß–∞—Å–∞":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddHours(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} —á–∞—Å–∞üîá!");
                                                break;

                                            case "—á–∞—Å–∞":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddHours(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} —á–∞—Å–∞üîá!");
                                                break;

                                            case "–ß–∞—Å–æ–≤":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddHours(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} —á–∞—Å–æ–≤üîá!");
                                                break;

                                            case "—á–∞—Å–æ–≤":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddHours(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} —á–∞—Å–æ–≤üîá!");
                                                break;


                                            //–ú–∏–Ω—É—Ç–Ω—ã–π —Ç–∏–ø
                                            case "–ú–∏–Ω—É—Ç":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–∏–Ω—É—Çüîá!");
                                                break;

                                            case "–º–∏–Ω—É—Ç":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–∏–Ω—É—Çüîá!");
                                                break;

                                            case "–ú–∏–Ω—É—Ç—É":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–∏–Ω—É—Ç—Éüîá!");
                                                break;

                                            case "–º–∏–Ω—É—Ç—É":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–∏–Ω—É—Ç—Éüîá!");
                                                break;

                                            case "–ú–∏–Ω—É—Ç–∞":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–∏–Ω—É—Ç—Éüîá!");
                                                break;

                                            case "–º–∏–Ω—É—Ç–∞":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–∏–Ω—É—Ç—Éüîá!");
                                                break;


                                            //–î–Ω–µ–≤–Ω–æ–π —Ç–∏–ø
                                            case "–î–µ–Ω—å":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddDays(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –¥–µ–Ω—åüîá!");
                                                break;

                                            case "–¥–µ–Ω—å":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddDays(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –¥–µ–Ω—åüîá!");
                                                break;

                                            case "–î–Ω–µ–π":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddDays(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –¥–Ω–µ–πüîá!");
                                                break;

                                            case "–¥–Ω–µ–π":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddDays(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –¥–Ω–µ–πüîá!");
                                                break;

                                            case "–î–Ω—è":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddDays(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –¥–Ω—èüîá!");
                                                break;

                                            case "–¥–Ω—è":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddDays(TimeOut), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –¥–Ω—èüîá!");
                                                break;


                                            //–ú–µ—Å—è—á–Ω—ã–π —Ç–∏–ø
                                            case "–ú–µ—Å—è—Ü":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMonths(Convert.ToInt32(TimeOut)), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–µ—Å—è—Üüîá!");
                                                break;

                                            case "–º–µ—Å—è—Ü":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMonths(Convert.ToInt32(TimeOut)), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–µ—Å—è—Üüîá!");
                                                break;

                                            case "–ú–µ—Å—è—Ü–∞":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMonths(Convert.ToInt32(TimeOut)), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–µ—Å—è—Ü–∞üîá!");
                                                break;

                                            case "–º–µ—Å—è—Ü–∞":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMonths(Convert.ToInt32(TimeOut)), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–µ—Å—è—Ü–∞üîá!");
                                                break;

                                            case "–ú–µ—Å—è—Ü–µ–≤":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMonths(Convert.ToInt32(TimeOut)), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–µ—Å—è—Ü–µ–≤üîá!");
                                                break;

                                            case "–º–µ—Å—è—Ü–µ–≤":
                                                await client.RestrictChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMonths(Convert.ToInt32(TimeOut)), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} –±—ã–ª –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ {SplitSymbol[1]} –º–µ—Å—è—Ü–µ–≤üîá!");
                                                break;
                                        }
                                }
                                return;
                            }

                            if (msg.Text.StartsWith("/nightmode"))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }

                                else if (msg.Chat.Id != msg.From.Id)
                                {
                                    Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                    var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == 5565507778; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SetChatPermissionsAsync(chatId: msg.Chat.Id, permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –æ–±—ä—è–≤–ª—è–µ—Ç –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–ºü§´!", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                }
                                return;
                            }

                            if (msg.Text.StartsWith("/statemode"))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }

                                else if (msg.Chat.Id != msg.From.Id)
                                {
                                    Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                    var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == 5565507778; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SetChatPermissionsAsync(chatId: msg.Chat.Id, permissions: new ChatPermissions { CanSendMessages = true, CanSendMediaMessages = true, CanSendOtherMessages = true, CanAddWebPagePreviews = true });
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —á–∞—Ç –≤ —à—Ç–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º‚úÖ", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;

                                    }
                                }
                                return;
                            }

                            if (msg.Text.ToUpper() == "DELMSG")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }

                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, "‚õî–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                    return;
                                }
                                else if (msg.ReplyToMessage != null)
                                {
                                    Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                    var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                    var MemberTarget = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.ReplyToMessage.From.Id);
                                    if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href=\"tg://user?id={msg.From.Id}\"></a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!");
                                        return;
                                    }
                                    else
                                        await client.DeleteMessageAsync(messageId: msg.ReplyToMessage.MessageId, chatId: msg.Chat.Id, cancellationToken: default);
                                    await client.DeleteMessageAsync(messageId: msg.MessageId, chatId: msg.Chat.Id);
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ‚úÖ", parseMode: ParseMode.Html);
                                }
                            }

                            if (msg.Text.StartsWith("/warn") | msg.Text.StartsWith("/warn@Laura_cm_bot"))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(msg.Chat.Id, "‚õîÔ∏è–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                }
                                else if (msg.ReplyToMessage.From.IsBot)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"@{msg.ReplyToMessage.From.Username} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ!");
                                    return;
                                }
                                else
                                {
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(msg.Chat.Id);
                                    if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, "–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!");
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == msg.ReplyToMessage.From.Id; }) != null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚ùó<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞ ¬´{msg.Chat.Title}¬ª", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    }
                                    else
                                    {
                                        if (msg.Text.Contains(' '))
                                        {
                                            var reason = msg.Text.Split(msg.Text.Split(' ')[0] + " ")[1];
                                            Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                            if (Connector.Connector.message == "not found")
                                            {
                                                Connector.Connector.RegisterChatWarns(msg.Chat.Id, 3, "mute");
                                                Connector.Connector.CheckUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                if (Connector.Connector.message == "not found")
                                                {
                                                    var dateNow = DateTime.Now;
                                                    var date = DateTime.Now.AddDays(3);

                                                    Connector.Connector.RegisterUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, 1, date);
                                                    Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                    var maxWarns = Connector.Connector.maxWarns;

                                                    if (reason == null)
                                                    {
                                                        Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                    }
                                                    else if (reason != null)
                                                    {
                                                        Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, reason, DateTime.Now);
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1/{maxWarns}!\nüí¨–ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                    }
                                                }
                                                else if (Connector.Connector.message == "has warn data")
                                                {
                                                    var dateNow = DateTime.Now;
                                                    var date = DateTime.Now.AddDays(3);

                                                    Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                    Connector.Connector.CheckUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                    Connector.Connector.GetDeadLine(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                    Connector.Connector.GetPunishment(msg.Chat.Id);

                                                    var maxWarns = Connector.Connector.maxWarns;
                                                    var userWarns = Connector.Connector.UserWarns;
                                                    var punish = Connector.Connector.punishment;
                                                    var deadLine = Connector.Connector.deadline;

                                                    var newUserWarns = userWarns + 1;

                                                    if (maxWarns <= newUserWarns)
                                                    {
                                                        if (deadLine <= dateNow)
                                                        {
                                                            Connector.Connector.UpdateUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, 1, dateNow, date);
                                                            if (Connector.Connector.message == "deadline lost")
                                                            {
                                                                if (reason == null)
                                                                {
                                                                    Connector.Connector.DeleteReasonsOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                                    Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {1}/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>", ParseMode.Html);
                                                                }
                                                                else if (reason != null)
                                                                {
                                                                    Connector.Connector.DeleteReasonsOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                                    Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, reason, DateTime.Now);
                                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {1}/{maxWarns}!\nüí¨–ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>", ParseMode.Html);
                                                                }
                                                            }
                                                            else if (Connector.Connector.message == "deadline updated")
                                                            {
                                                                Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                                await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {1}/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>", ParseMode.Html);
                                                            }
                                                        }
                                                        else if (punish == "mute")
                                                        {
                                                            await client.RestrictChatMemberAsync(msg.Chat.Id, msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(45), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚õîÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Ä–∞–≤–Ω–æ–º—É {maxWarns}!\n–¢–µ–ø–µ—Ä—å –æ–Ω –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ 45 –º–∏–Ω—É—Çüîá!", ParseMode.Html);
                                                            Connector.Connector.DeleteWarnUser(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                        }
                                                        else if (punish == "ban")
                                                        {
                                                            await client.KickChatMemberAsync(msg.Chat.Id, msg.ReplyToMessage.From.Id);
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚õîÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Ä–∞–≤–Ω–æ–º—É {maxWarns}!\n–¢–µ–ø–µ—Ä—å –æ–Ω –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", ParseMode.Html);
                                                            Connector.Connector.DeleteWarnUser(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                        }
                                                    }
                                                    else if (maxWarns > newUserWarns)
                                                    {
                                                        Connector.Connector.UpdateUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, newUserWarns, dateNow, date);
                                                        if (reason == null)
                                                        {
                                                            Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {newUserWarns}/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                        }
                                                        else if (reason != null)
                                                        {
                                                            Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, reason, DateTime.Now);
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {newUserWarns}/{maxWarns}!\nüí¨–ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                        }
                                                    }

                                                }
                                            }
                                            else if (Connector.Connector.message == "has max warns")
                                            {
                                                Connector.Connector.CheckUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                if (Connector.Connector.message == "not found")
                                                {
                                                    var dateNow = DateTime.Now;
                                                    var date = DateTime.Now.AddDays(3);
                                                    Connector.Connector.RegisterUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, 1, date);
                                                    Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                    Connector.Connector.CheckUserWarns(msg.Chat.Id, msg.ReplyToMessage.From.Id);
                                                    Connector.Connector.GetPunishment(msg.Chat.Id);

                                                    var maxWarns = Connector.Connector.maxWarns;
                                                    if (reason == null)
                                                    {
                                                        Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                    }
                                                    else if (reason != null)
                                                    {
                                                        Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, reason, DateTime.Now);
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1/{maxWarns}!\nüí¨–ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                    }
                                                }
                                                else if (Connector.Connector.message == "has warn data")
                                                {
                                                    var dateNow = DateTime.Now;
                                                    var date = DateTime.Now.AddDays(3);

                                                    Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                    Connector.Connector.CheckUserWarns(msg.Chat.Id, msg.From.Id);
                                                    Connector.Connector.GetPunishment(msg.Chat.Id);
                                                    Connector.Connector.GetDeadLine(msg.ReplyToMessage.From.Id, msg.Chat.Id);

                                                    var maxWarns = Connector.Connector.maxWarns;
                                                    var userWarns = Connector.Connector.UserWarns;
                                                    var punish = Connector.Connector.punishment;
                                                    var deadLine = Connector.Connector.deadline;

                                                    var newUserWarns = userWarns + 1;
                                                    if (maxWarns <= newUserWarns)
                                                    {
                                                        if (deadLine <= dateNow)
                                                        {
                                                            Connector.Connector.UpdateUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, 1, dateNow, date);
                                                            if (Connector.Connector.message == "deadline lost")
                                                            {
                                                                if (reason == null)
                                                                {
                                                                    Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                                    Connector.Connector.DeleteReasonsOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {1}/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>", ParseMode.Html);
                                                                }
                                                                else if (reason != null)
                                                                {
                                                                    Connector.Connector.DeleteReasonsOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                                    Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, reason, DateTime.Now);
                                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {1}/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>", ParseMode.Html);
                                                                }
                                                            }
                                                            else if (Connector.Connector.message == "deadline updated")
                                                            {
                                                                Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                                await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {1}/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>", ParseMode.Html);
                                                            }
                                                        }
                                                        else if (punish == "mute")
                                                        {
                                                            await client.RestrictChatMemberAsync(msg.Chat.Id, msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(45), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚õîÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Ä–∞–≤–Ω–æ–º—É {maxWarns}!\n–¢–µ–ø–µ—Ä—å –æ–Ω –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ 45 –º–∏–Ω—É—Çüîá!", ParseMode.Html);
                                                            Connector.Connector.DeleteWarnUser(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                        }
                                                        else if (punish == "ban")
                                                        {
                                                            await client.KickChatMemberAsync(msg.Chat.Id, msg.ReplyToMessage.From.Id);
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚õîÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Ä–∞–≤–Ω–æ–º—É {maxWarns}!\n–¢–µ–ø–µ—Ä—å –æ–Ω –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", ParseMode.Html);
                                                            Connector.Connector.DeleteWarnUser(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                        }
                                                    }
                                                    else if (maxWarns > newUserWarns)
                                                    {
                                                        Connector.Connector.UpdateUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, newUserWarns, dateNow, date);
                                                        if (reason == null)
                                                        {
                                                            Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {newUserWarns}/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                        }
                                                        else if (reason != null)
                                                        {
                                                            Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, reason, DateTime.Now);
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {newUserWarns}/{maxWarns}!\nüí¨–ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                        }

                                                    }

                                                }

                                            }

                                        }
                                        else
                                        {
                                            string reason = null;
                                            Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                            if (Connector.Connector.message == "not found")
                                            {
                                                Connector.Connector.RegisterChatWarns(msg.Chat.Id, 3, "mute");
                                                Connector.Connector.CheckUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                if (Connector.Connector.message == "not found")
                                                {
                                                    var dateNow = DateTime.Now;
                                                    var date = DateTime.Now.AddDays(3);

                                                    Connector.Connector.RegisterUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, 1, date);
                                                    Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                    var maxWarns = Connector.Connector.maxWarns;
                                                    if (reason == null)
                                                    {
                                                        Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                    }
                                                    else if (reason != null)
                                                    {
                                                        Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, reason, DateTime.Now);
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1/{maxWarns}!\nüí¨–ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                    }
                                                }
                                                else if (Connector.Connector.message == "has warn data")
                                                {
                                                    var dateNow = DateTime.Now;
                                                    var date = DateTime.Now.AddDays(3);

                                                    Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                    Connector.Connector.CheckUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                    Connector.Connector.GetDeadLine(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                    Connector.Connector.GetPunishment(msg.Chat.Id);

                                                    var maxWarns = Connector.Connector.maxWarns;
                                                    var userWarns = Connector.Connector.UserWarns;
                                                    var punish = Connector.Connector.punishment;
                                                    var deadLine = Connector.Connector.deadline;

                                                    var newUserWarns = userWarns + 1;

                                                    if (maxWarns <= newUserWarns)
                                                    {
                                                        if (deadLine <= dateNow)
                                                        {
                                                            Connector.Connector.UpdateUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, 1, dateNow, date);
                                                            if (Connector.Connector.message == "deadline lost")
                                                            {
                                                                if (reason == null)
                                                                {
                                                                    Connector.Connector.DeleteReasonsOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                                    Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {1}/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>", ParseMode.Html);
                                                                }
                                                                else if (reason != null)
                                                                {
                                                                    Connector.Connector.DeleteReasonsOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                                    Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, reason, DateTime.Now);
                                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {1}/{maxWarns}!\nüí¨–ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>", ParseMode.Html);
                                                                }
                                                            }
                                                            else if (Connector.Connector.message == "deadline updated")
                                                            {
                                                                Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                                await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {1}/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>", ParseMode.Html);
                                                            }
                                                        }
                                                        else if (punish == "mute")
                                                        {
                                                            await client.RestrictChatMemberAsync(msg.Chat.Id, msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(45), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚õîÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Ä–∞–≤–Ω–æ–º—É {maxWarns}!\n–¢–µ–ø–µ—Ä—å –æ–Ω –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ 45 –º–∏–Ω—É—Çüîá!", ParseMode.Html);
                                                            Connector.Connector.DeleteWarnUser(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                        }
                                                        else if (punish == "ban")
                                                        {
                                                            await client.KickChatMemberAsync(msg.Chat.Id, msg.ReplyToMessage.From.Id);
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚õîÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Ä–∞–≤–Ω–æ–º—É {maxWarns}!\n–¢–µ–ø–µ—Ä—å –æ–Ω –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", ParseMode.Html);
                                                            Connector.Connector.DeleteWarnUser(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                        }
                                                    }
                                                    else if (maxWarns > newUserWarns)
                                                    {
                                                        if (reason == null)
                                                        {
                                                            Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                        }
                                                        else if (reason != null)
                                                        {
                                                            Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, reason, DateTime.Now);
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1/{maxWarns}!\nüí¨–ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                        }
                                                    }

                                                }
                                            }
                                            else if (Connector.Connector.message == "has max warns")
                                            {
                                                Connector.Connector.CheckUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                if (Connector.Connector.message == "not found")
                                                {
                                                    var dateNow = DateTime.Now;
                                                    var date = DateTime.Now.AddDays(3);
                                                    Connector.Connector.RegisterUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, 1, date);
                                                    Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                    Connector.Connector.CheckUserWarns(msg.Chat.Id, msg.ReplyToMessage.From.Id);
                                                    Connector.Connector.GetPunishment(msg.Chat.Id);

                                                    var maxWarns = Connector.Connector.maxWarns;
                                                    if (reason == null)
                                                    {
                                                        Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                    }
                                                    else if (reason != null)
                                                    {
                                                        Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, reason, DateTime.Now);
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1/{maxWarns}!\nüí¨–ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                    }
                                                }
                                                else if (Connector.Connector.message == "has warn data")
                                                {
                                                    var dateNow = DateTime.Now;
                                                    var date = DateTime.Now.AddDays(3);

                                                    Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                    Connector.Connector.CheckUserWarns(msg.Chat.Id, msg.From.Id);
                                                    Connector.Connector.GetPunishment(msg.Chat.Id);
                                                    Connector.Connector.GetDeadLine(msg.ReplyToMessage.From.Id, msg.Chat.Id);

                                                    var maxWarns = Connector.Connector.maxWarns;
                                                    var userWarns = Connector.Connector.UserWarns;
                                                    var punish = Connector.Connector.punishment;
                                                    var deadLine = Connector.Connector.deadline;

                                                    var newUserWarns = userWarns + 1;
                                                    if (maxWarns <= newUserWarns)
                                                    {
                                                        if (deadLine <= dateNow)
                                                        {
                                                            Connector.Connector.UpdateUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, 1, dateNow, date);
                                                            if (Connector.Connector.message == "deadline lost")
                                                            {
                                                                if (reason == null)
                                                                {
                                                                    Connector.Connector.DeleteReasonsOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                                    Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {1}/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>", ParseMode.Html);
                                                                }
                                                                else if (reason != null)
                                                                {
                                                                    Connector.Connector.DeleteReasonsOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                                    Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, reason, DateTime.Now);
                                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {1}/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>", ParseMode.Html);
                                                                }
                                                            }
                                                            else if (Connector.Connector.message == "deadline updated")
                                                            {
                                                                Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                                await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ {1}/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>", ParseMode.Html);
                                                            }
                                                        }
                                                        else if (punish == "mute")
                                                        {
                                                            await client.RestrictChatMemberAsync(msg.Chat.Id, msg.ReplyToMessage.From.Id, untilDate: DateTime.Now.AddMinutes(45), permissions: new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false });
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚õîÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Ä–∞–≤–Ω–æ–º—É {maxWarns}!\n–¢–µ–ø–µ—Ä—å –æ–Ω –∑–∞–≥–ª—É—à–µ–Ω –Ω–∞ 45 –º–∏–Ω—É—Çüîá!", ParseMode.Html);
                                                            Connector.Connector.DeleteWarnUser(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                        }
                                                        else if (punish == "ban")
                                                        {
                                                            await client.KickChatMemberAsync(msg.Chat.Id, msg.ReplyToMessage.From.Id);
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚õîÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç —Ä–∞–≤–Ω–æ–º—É {maxWarns}!\n–¢–µ–ø–µ—Ä—å –æ–Ω –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", ParseMode.Html);
                                                            Connector.Connector.DeleteWarnUser(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                                        }
                                                    }
                                                    else if (maxWarns > newUserWarns)
                                                    {
                                                        if (reason == null)
                                                        {
                                                            Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, "without", DateTime.Now);
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1/{maxWarns}!\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                        }
                                                        else if (reason != null)
                                                        {
                                                            Connector.Connector.CreateReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id, reason, DateTime.Now);
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚ùóÔ∏è<a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ 1/{maxWarns}!\nüí¨–ü—Ä–∏—á–∏–Ω–∞: <i>{reason}</i>\n<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {date}</code>", ParseMode.Html);
                                                        }

                                                    }

                                                }

                                            }

                                        }
                                    }
                                }
                            }

                            if (msg.Text.StartsWith("/setmaxwarns ") | msg.Text.StartsWith("/setmaxwarns@Laura_cm_bot "))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(msg.Chat.Id);
                                    if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    }
                                    else
                                    {
                                        try
                                        {
                                            var newMaxWarns = Convert.ToInt32(msg.Text.Split(' ')[1]);
                                            if (newMaxWarns == null)
                                            {
                                                await client.SendTextMessageAsync(msg.Chat.Id, "‚ö†Ô∏è–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —á–∏—Å–ª–æ!");
                                            }
                                            else if (newMaxWarns > 20)
                                            {
                                                await client.SendTextMessageAsync(msg.Chat.Id, "‚ö†Ô∏è–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π, –ø—Ä–µ–≤—ã—à–∞—é—â–µ–µ 20!");
                                            }
                                            else if (newMaxWarns < 3)
                                            {
                                                await client.SendTextMessageAsync(msg.Chat.Id, "‚ö†Ô∏è–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –º–µ–Ω—å—à–µ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!");
                                            }
                                            else
                                            {
                                                Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                if (Connector.Connector.message == "not found")
                                                {
                                                    Connector.Connector.RegisterChatWarns(msg.Chat.Id, 3, "mute");
                                                    Connector.Connector.GetPunishment(msg.Chat.Id);
                                                    var punish = Connector.Connector.punishment;

                                                    Connector.Connector.UpdateMaxWarns(msg.Chat.Id, newMaxWarns, punish);
                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!\n–ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {newMaxWarns}");
                                                }
                                                else if (Connector.Connector.message == "has max warns")
                                                {
                                                    Connector.Connector.GetPunishment(msg.Chat.Id);
                                                    var punish = Connector.Connector.punishment;

                                                    Connector.Connector.UpdateMaxWarns(msg.Chat.Id, newMaxWarns, punish);
                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π!\n–ù–æ–≤—ã–π –º–∞–∫—Å–∏–º—É–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {newMaxWarns}");
                                                }
                                            }
                                        }
                                        catch (FormatException)
                                        {
                                            await client.SendTextMessageAsync(msg.Chat.Id, "‚ö†Ô∏è–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —á–∏—Å–ª–æ!");
                                        }
                                    }
                                }
                            }

                            if (msg.Text.StartsWith("/setpunish ") | msg.Text.StartsWith("/setpunish@Laura_cm_bot "))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(msg.Chat.Id);
                                    if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                    }
                                    else
                                    {
                                        try
                                        {
                                            var newPunish = msg.Text.Split(' ')[1].ToLower();
                                            if (newPunish == null)
                                            {
                                                await client.SendTextMessageAsync(msg.Chat.Id, "‚ö†Ô∏è–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è");
                                            }
                                            else
                                            {
                                                Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                if (Connector.Connector.message == "not found")
                                                {
                                                    Connector.Connector.RegisterChatWarns(msg.Chat.Id, 3, "mute");
                                                    var maxWarns = Connector.Connector.maxWarns;

                                                    if (newPunish == "mute")
                                                    {
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ!\n–¢–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: –º—É—Ç");
                                                        Connector.Connector.UpdateMaxWarns(msg.Chat.Id, maxWarns, newPunish);
                                                    }
                                                    else if (newPunish == "ban")
                                                    {
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ!\n–¢–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: –±–∞–Ω");
                                                        Connector.Connector.UpdateMaxWarns(msg.Chat.Id, maxWarns, newPunish);
                                                    }
                                                    else
                                                    {
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚ö†Ô∏è–¢–∏–ø \"{newPunish}\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
                                                    }
                                                }
                                                else if (Connector.Connector.message == "has max warns")
                                                {
                                                    Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                    var maxWarns = Connector.Connector.maxWarns;

                                                    if (newPunish == "mute")
                                                    {
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ!\n–¢–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: –º—É—Ç");
                                                        Connector.Connector.UpdateMaxWarns(msg.Chat.Id, maxWarns, newPunish);
                                                    }
                                                    else if (newPunish == "ban")
                                                    {
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚úÖ–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ!\n–¢–∏–ø –Ω–∞–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç: –±–∞–Ω");
                                                        Connector.Connector.UpdateMaxWarns(msg.Chat.Id, maxWarns, newPunish);
                                                    }
                                                    else
                                                    {
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"‚ö†Ô∏è–¢–∏–ø \"{newPunish}\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
                                                    }
                                                }
                                            }
                                        }
                                        catch (FormatException)
                                        {
                                            await client.SendTextMessageAsync(msg.Chat.Id, "‚ö†Ô∏è–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö!");
                                        }
                                    }
                                }
                            }

                            if (msg.Text.ToLower() == "–≤–∞—Ä–Ω—ã")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else if (msg.ReplyToMessage == null)
                                {
                                    var reasons = "<b>–°–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω:</b>\n";
                                    Connector.Connector.GetReasonOfWarns(msg.From.Id, msg.Chat.Id);
                                    if (Connector.Connector.message == "not found")
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, "–£ –≤–∞—Å –Ω–µ—Ç –Ω–∏ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–πüéâ!");
                                    }
                                    else if (Connector.Connector.message == "has reasons")
                                    {
                                        var part2 = "";
                                        int i = 1;
                                        for (int k = 0; k < Connector.Connector.reasons.Count; k++)
                                        {
                                            if (Connector.Connector.reasons[k] == "without")
                                            {
                                                part2 += i + ". " + "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞. " + "–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: " + Connector.Connector.time_stamp[k] + "\n";
                                                i++;
                                            }
                                            else
                                            {
                                                part2 += i + ". –ü—Ä–∏—á–∏–Ω–∞:\n- " + Connector.Connector.reasons[k] + ". –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: " + Connector.Connector.time_stamp[k] + "\n";
                                                i++;
                                            }
                                        }
                                        Connector.Connector.CheckUserWarns(msg.From.Id, msg.Chat.Id);
                                        Connector.Connector.GetDeadLine(msg.From.Id, msg.Chat.Id);
                                        Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                        var textPart1 = $"<b>üì¨–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π <a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a>: {Connector.Connector.UserWarns}/{Connector.Connector.maxWarns}</b>\n{reasons}";
                                        var finalText = $"{textPart1}\n<i>{part2}</i>\n‚è±<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>";
                                        await client.SendTextMessageAsync(msg.Chat.Id, finalText, ParseMode.Html, disableWebPagePreview: true);
                                    }
                                }
                                else if (msg.ReplyToMessage.From.IsBot)
                                {
                                    await client.SendTextMessageAsync(msg.Chat.Id, $"@{msg.ReplyToMessage.From.FirstName} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ");
                                }
                                else
                                {
                                    var reasons = "<b>–°–ø–∏—Å–æ–∫ –ø—Ä–∏—á–∏–Ω:</b>\n";
                                    Connector.Connector.GetReasonOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                    if (Connector.Connector.message == "not found")
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, $"–£ <a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a> –Ω–µ—Ç –Ω–∏ –ø—Ä–∏—á–∏–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–πüéâ!", ParseMode.Html, disableWebPagePreview: true);
                                    }
                                    else if (Connector.Connector.message == "has reasons")
                                    {
                                        var part2 = "";
                                        int i = 1;
                                        for (int k = 0; k < Connector.Connector.reasons.Count; k++)
                                        {
                                            if (Connector.Connector.reasons[k] == "without")
                                            {
                                                part2 += i + ". " + "–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ –±—ã–ª–∞ —É–∫–∞–∑–∞–Ω–∞. " + "–î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: " + Connector.Connector.time_stamp[k] + "\n";
                                                i++;
                                            }
                                            else
                                            {
                                                part2 += i + ". –ü—Ä–∏—á–∏–Ω–∞:\n- " + Connector.Connector.reasons[k] + ". –î–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: " + Connector.Connector.time_stamp[k] + "\n";
                                                i++;
                                            }
                                        }
                                        Connector.Connector.CheckUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                        Connector.Connector.GetDeadLine(msg.ReplyToMessage.From.Id, msg.Chat.Id); ;
                                        Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                        var textPart1 = $"<b>üì¨–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π <a href=\"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>: {Connector.Connector.UserWarns}/{Connector.Connector.maxWarns}</b>\n{reasons}";
                                        var finalText = $"{textPart1}\n<i>{part2}</i>\n‚è±<code>–°–±—Ä–æ—Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –≤ {Connector.Connector.deadline}</code>";
                                        await client.SendTextMessageAsync(msg.Chat.Id, finalText, ParseMode.Html, disableWebPagePreview: true);
                                    }
                                }
                            }

                            if (msg.Text.ToLower().StartsWith("/setlyriccontrol ") | msg.Text.ToLower().StartsWith("/setlyriccontrol@laura_cm_bot "))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    var text = msg.Text.ToLower();
                                    var isActiveController = text.Split(' ')[1];
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(msg.Chat.Id);
                                    if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, "–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!");
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, "‚õîÔ∏è–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!");
                                    }
                                    else
                                    {
                                        Connector.Connector.GetNoBadLyrics(msg.Chat.Id);
                                        if (Connector.Connector.message == "has settings")
                                        {
                                            if (isActiveController == "off")
                                            {
                                                Connector.Connector.SetNewParametrBL(msg.Chat.Id, isActiveController);
                                                await client.SendTextMessageAsync(msg.Chat.Id, $"<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –æ—Ç–∫–ª—é—á–∏–ª —Å–ª–µ–∂–∫—É –∑–∞ –æ–±—â–µ–Ω–∏–µ–ºüôÖüèª‚Äç‚ôÄÔ∏è!\n–ë—É–¥—å—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã –≤ –æ–±—â–µ–Ω–∏–∏.", ParseMode.Html, disableWebPagePreview: true);
                                            }
                                            else if (isActiveController == "on")
                                            {
                                                Connector.Connector.SetNewParametrBL(msg.Chat.Id, isActiveController);
                                                await client.SendTextMessageAsync(msg.Chat.Id, $"<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –≤–∫–ª—é—á–∏–ª —Å–ª–µ–∂–∫—É –∑–∞ –æ–±—â–µ–Ω–∏–µ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ‚úÖ!", ParseMode.Html, disableWebPagePreview: true);
                                            }
                                            else
                                            {
                                                await client.SendTextMessageAsync(msg.Chat.Id, $"–ü–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è \"{isActiveController}\" –Ω–µ –Ω–∞–π–¥–µ–Ω‚ö†Ô∏è");
                                            }
                                        }
                                        else
                                        {
                                            if (isActiveController == "off")
                                            {
                                                Connector.Connector.RegisterNoBadLyrics(msg.Chat.Id, isActiveController);
                                                await client.SendTextMessageAsync(msg.Chat.Id, $"<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –æ—Ç–∫–ª—é—á–∏–ª —Å–ª–µ–∂–∫—É –∑–∞ –æ–±—â–µ–Ω–∏–µ–ºüôÖüèª‚Äç‚ôÄÔ∏è!\n–ë—É–¥—å—Ç–µ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã –≤ –æ–±—â–µ–Ω–∏–∏.", ParseMode.Html, disableWebPagePreview: true);
                                            }
                                            else if (isActiveController == "on")
                                            {
                                                Connector.Connector.RegisterNoBadLyrics(msg.Chat.Id, isActiveController);
                                                await client.SendTextMessageAsync(msg.Chat.Id, $"<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –≤–∫–ª—é—á–∏–ª —Å–ª–µ–∂–∫—É –∑–∞ –æ–±—â–µ–Ω–∏–µ–º –≤ —ç—Ç–æ–º —á–∞—Ç–µ‚úÖ!", ParseMode.Html, disableWebPagePreview: true);
                                            }
                                            else
                                            {
                                                await client.SendTextMessageAsync(msg.Chat.Id, $"–ü–∞—Ä–∞–º–µ—Ç—Ä –∫–æ–Ω—Ç—Ä–æ–ª—è \"{isActiveController}\" –Ω–µ –Ω–∞–π–¥–µ–Ω‚ö†Ô∏è");
                                            }
                                        }
                                    }
                                }
                            }

                            if (msg.Text.ToLower().StartsWith(".config_laura\n"))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(msg.Chat.Id);
                                    if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, "–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!");
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, "‚õîÔ∏è–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!");
                                    }
                                    else
                                    {
                                        var text = msg.Text.ToLower();
                                        var configuration = text.Split(".config_laura\n")[1];
                                        await client.DeleteMessageAsync(msg.Chat.Id, msg.MessageId);
                                        var process = await client.SendTextMessageAsync(msg.Chat.Id, "‚öôÔ∏è–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–∞—Ç–∞! –ù–∞—á–∞–ª—Å—è –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π.");
                                        var configParse = configuration.Split('\n');
                                        await Task.Delay(1500);
                                        var result = "<b>–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (BETA):</b>\n";
                                        for (int i = 0; i < configParse.Length; i++)
                                        {
                                            try
                                            {
                                                if (configParse[i].Contains(' '))
                                                {
                                                    var newConfParse = configParse[i].Split(' ');
                                                    var finConf = "";
                                                    for (int j = 0; j < newConfParse.Length; j++)
                                                    {
                                                        finConf += newConfParse[j];
                                                    }
                                                    Console.WriteLine(finConf);
                                                    var inp = finConf.Split(':')[0];
                                                    var value = finConf.Split(':')[1];
                                                    switch (inp)
                                                    {
                                                        case "nobad_words":
                                                            {
                                                                if (value == "on")
                                                                {
                                                                    Connector.Connector.GetNoBadLyrics(msg.Chat.Id);
                                                                    if (Connector.Connector.message == "not found")
                                                                    {
                                                                        Connector.Connector.RegisterNoBadLyrics(msg.Chat.Id, value);
                                                                    }
                                                                    else
                                                                    {
                                                                        Connector.Connector.SetNewParametrBL(msg.Chat.Id, value);
                                                                    }
                                                                    result += "<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä nobad_lyrics: on</code>\n";
                                                                }
                                                                else if (value == "off")
                                                                {
                                                                    Connector.Connector.GetNoBadLyrics(msg.Chat.Id);
                                                                    if (Connector.Connector.message == "not found")
                                                                    {
                                                                        Connector.Connector.RegisterNoBadLyrics(msg.Chat.Id, value);
                                                                    }
                                                                    else
                                                                    {
                                                                        Connector.Connector.SetNewParametrBL(msg.Chat.Id, value);
                                                                    }
                                                                    result += "<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä nobad_lyrics: off</code>\n";
                                                                }
                                                                else
                                                                {
                                                                    result += $"<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä nobad_lyrics \"{value}\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</code>\n";
                                                                }
                                                                break;
                                                            }
                                                        case "max_warns":
                                                            {
                                                                try
                                                                {
                                                                    var value_int = Convert.ToInt32(value);
                                                                    if (value_int > 20)
                                                                    {
                                                                        result += "<code>‚ö†Ô∏è–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ max_warns –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20\n</code>";
                                                                    }
                                                                    else if (value_int < 3)
                                                                    {
                                                                        result += "<code>‚ö†Ô∏è–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ max_warns –º–µ–Ω—å—à–µ 3\n</code>";
                                                                    }
                                                                    else
                                                                    {
                                                                        Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                                        if (Connector.Connector.message == "not found")
                                                                        {
                                                                            Connector.Connector.RegisterChatWarns(msg.Chat.Id, value_int, "mute");
                                                                            result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä max_warns: {value_int}</code>\n";
                                                                        }
                                                                        else
                                                                        {
                                                                            Connector.Connector.GetPunishment(msg.Chat.Id);
                                                                            var pun = Connector.Connector.punishment;
                                                                            Connector.Connector.UpdateMaxWarns(msg.Chat.Id, value_int, pun);
                                                                            result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä max_warns: {value_int}</code>\n";
                                                                        }
                                                                    }
                                                                    break;
                                                                }
                                                                catch (FormatException format)
                                                                {
                                                                    result += "<code>üëæError occured: value isn't int/long</code>\n";
                                                                    break;
                                                                }
                                                            }
                                                        case "punish":
                                                            {
                                                                if (value == "mute")
                                                                {
                                                                    Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                                    if (Connector.Connector.message == "not found")
                                                                    {
                                                                        Connector.Connector.RegisterChatWarns(msg.Chat.Id, 3, value);
                                                                    }
                                                                    else
                                                                    {
                                                                        var max = Connector.Connector.maxWarns;
                                                                        Connector.Connector.UpdateMaxWarns(msg.Chat.Id, max, value);
                                                                    }
                                                                    result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä punish: {value}</code>\n";
                                                                }
                                                                else if (value == "ban")
                                                                {
                                                                    Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                                    if (Connector.Connector.message == "not found")
                                                                    {
                                                                        Connector.Connector.RegisterChatWarns(msg.Chat.Id, 3, value);
                                                                    }
                                                                    else
                                                                    {
                                                                        var max = Connector.Connector.maxWarns;
                                                                        Connector.Connector.UpdateMaxWarns(msg.Chat.Id, max, value);
                                                                    }
                                                                    result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä punish: {value}</code>\n";
                                                                }
                                                                else
                                                                {
                                                                    result += $"<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä punish \"{value}\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</code>\n";
                                                                }
                                                                break;
                                                            }
                                                        case "max_msg":
                                                            {
                                                                try
                                                                {
                                                                    var value_int = Convert.ToInt32(value);
                                                                    Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                                                    if (Connector.Connector.message == "not found")
                                                                    {
                                                                        if (value_int < 4)
                                                                        {
                                                                            result += $"<code>‚ö†Ô∏èWarning max_msg: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ 4</code>\n";
                                                                        }
                                                                        else if (value_int > 10)
                                                                        {
                                                                            result += $"<code>‚ö†Ô∏èWarning max_msg: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10</code>\n";
                                                                        }
                                                                        else
                                                                        {
                                                                            Connector.Connector.CreateSpamConfig(msg.Chat.Id, value_int, "off");
                                                                            result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä max_msg: {value_int}</code>\n";
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if (value_int < 4)
                                                                        {
                                                                            result += $"<code>‚ö†Ô∏èWarning max_msg: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ 4</code>\n";
                                                                        }
                                                                        else if (value_int > 10)
                                                                        {
                                                                            result += $"<code>‚ö†Ô∏èWarning max_msg: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10</code>\n";
                                                                        }
                                                                        else
                                                                        {
                                                                            Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                                                            Connector.Connector.UpdateSpamConfig(msg.Chat.Id, value_int, Connector.Connector.as_active);
                                                                            result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä max_msg: {value_int}</code>\n";
                                                                        }
                                                                    }
                                                                }
                                                                catch (FormatException exc)
                                                                {
                                                                    result += "<code>üëæError occured: value isn't int/long</code>\n";
                                                                    break;
                                                                }
                                                                break;
                                                            }
                                                        case "as_active":
                                                            {
                                                                switch (value)
                                                                {
                                                                    case "on":
                                                                        {
                                                                            Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                                                            if (Connector.Connector.message == "not found")
                                                                            {
                                                                                Connector.Connector.CreateSpamConfig(msg.Chat.Id, 4, value);
                                                                                result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä as_active: {value}</code>\n";
                                                                            }
                                                                            else
                                                                            {
                                                                                Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                                                                var max = Connector.Connector.maxMess;
                                                                                Connector.Connector.UpdateSpamConfig(msg.Chat.Id, max, value);
                                                                                result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä as_active: {value}</code>\n";
                                                                            }
                                                                            break;
                                                                        }
                                                                    case "off":
                                                                        {
                                                                            Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                                                            if (Connector.Connector.message == "not found")
                                                                            {
                                                                                Connector.Connector.CreateSpamConfig(msg.Chat.Id, 4, value);
                                                                                result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä as_active: {value}</code>\n";
                                                                            }
                                                                            else
                                                                            {
                                                                                Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                                                                var max = Connector.Connector.maxMess;
                                                                                Connector.Connector.UpdateSpamConfig(msg.Chat.Id, max, value);
                                                                                result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä as_active: {value}</code>\n";
                                                                            }
                                                                            break;
                                                                        }
                                                                    default:
                                                                        {
                                                                            result += $"<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä as_active \"{value}\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</code>\n";
                                                                            break;
                                                                        }

                                                                }
                                                                break;
                                                            }
                                                        case "nightmode":
                                                            {
                                                                try
                                                                {
                                                                    var night = value.Split('|')[1].Split('-');
                                                                    var state = value.Split('|')[0].Split('-');
                                                                    Connector.Connector.GetNightMode(msg.Chat.Id);
                                                                    var test = Convert.ToInt32(night[0]);
                                                                    var test1 = Convert.ToInt32(night[1]);
                                                                    var test2 = Convert.ToInt32(state[0]);
                                                                    var test3 = Convert.ToInt32(state[1]);
                                                                    if (test >= 24 | test < 0)
                                                                    {
                                                                        result += "<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä nightmode –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –≤—Ä–µ–º–µ–Ω–∏</code>\n";
                                                                    }
                                                                    if (test1 >= 60 | test1 < 0)
                                                                    {
                                                                        result += "<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä nightmode –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –≤—Ä–µ–º–µ–Ω–∏</code>\n";
                                                                    }
                                                                    if (test2 >= 24 | test2 < 0)
                                                                    {
                                                                        result += "<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä statemode –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –≤—Ä–µ–º–µ–Ω–∏</code>\n";
                                                                    }
                                                                    if (test3 >= 60 | test3 < 0)
                                                                    {
                                                                        result += "<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä statemode –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –≤—Ä–µ–º–µ–Ω–∏</code>\n";
                                                                    }
                                                                    else if (test == test2)
                                                                    {
                                                                        result += "<code>üìõ–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ \"nightmode\" –Ω–∞—Ä—É—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!</code>";
                                                                    }
                                                                    else
                                                                    {
                                                                        if (Connector.Connector.message == "not found")
                                                                        {
                                                                            Connector.Connector.CreateNightMode(msg.Chat.Id, night[0] + ":" + night[1], state[0] + ":" + state[1]);
                                                                        }
                                                                        else
                                                                        {
                                                                            Connector.Connector.UpdateNightMode(msg.Chat.Id, night[0] + ":" + night[1], state[0] + ":" + state[1]);
                                                                        }
                                                                        result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä nightmode: {night[0]}:{night[1]}-{state[0]}:{state[1]}\n</code>";
                                                                    }
                                                                }
                                                                catch (FormatException eEEEEEEEE)
                                                                {
                                                                    result += "<code>üëæError occured: value is string\n</code>";
                                                                }
                                                                break;
                                                            }
                                                        default:
                                                            {
                                                                result += $"<code>‚ùå–ü–∞—Ä–∞–º–µ—Ç—Ä \"{inp}\" –Ω–µ –Ω–∞–π–¥–µ–Ω\n</code>";
                                                                break;
                                                            }
                                                    }

                                                    if (result == "<b>–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (BETA):</b>\n")
                                                        await client.DeleteMessageAsync(msg.Chat.Id, process.MessageId);
                                                    else
                                                        await client.EditMessageTextAsync(msg.Chat.Id, process.MessageId, result, ParseMode.Html);
                                                    Thread.Sleep(750);
                                                }
                                                else
                                                {
                                                    var inp = configParse[i].Split(':')[0];
                                                    var value = configParse[i].Split(':')[1];
                                                    switch (inp)
                                                    {
                                                        case "nobad_words":
                                                            {
                                                                if (value == "on")
                                                                {
                                                                    Connector.Connector.GetNoBadLyrics(msg.Chat.Id);
                                                                    if (Connector.Connector.message == "not found")
                                                                    {
                                                                        Connector.Connector.RegisterNoBadLyrics(msg.Chat.Id, value);
                                                                    }
                                                                    else
                                                                    {
                                                                        Connector.Connector.SetNewParametrBL(msg.Chat.Id, value);
                                                                    }
                                                                    result += "<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä nobad_lyrics: on</code>\n";
                                                                }
                                                                else if (value == "off")
                                                                {
                                                                    Connector.Connector.GetNoBadLyrics(msg.Chat.Id);
                                                                    if (Connector.Connector.message == "not found")
                                                                    {
                                                                        Connector.Connector.RegisterNoBadLyrics(msg.Chat.Id, value);
                                                                    }
                                                                    else
                                                                    {
                                                                        Connector.Connector.SetNewParametrBL(msg.Chat.Id, value);
                                                                    }
                                                                    result += "<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä nobad_lyrics: off</code>\n";
                                                                }
                                                                else
                                                                {
                                                                    result += $"<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä nobad_lyrics \"{value}\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</code>\n";
                                                                }
                                                                break;
                                                            }

                                                        case "max_warns":
                                                            {
                                                                try
                                                                {
                                                                    var value_int = Convert.ToInt32(value);
                                                                    if (value_int > 20)
                                                                    {
                                                                        result += "<code>‚ö†Ô∏è–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ max_warns –ø—Ä–µ–≤—ã—à–∞–µ—Ç 20\n</code>";
                                                                    }
                                                                    else if (value_int < 3)
                                                                    {
                                                                        result += "<code>‚ö†Ô∏è–ó–Ω–∞—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ max_warns –º–µ–Ω—å—à–µ 3\n</code>";
                                                                    }
                                                                    else
                                                                    {
                                                                        Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                                        if (Connector.Connector.message == "not found")
                                                                        {
                                                                            Connector.Connector.RegisterChatWarns(msg.Chat.Id, value_int, "mute");
                                                                            result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä max_warns: {value_int}</code>\n";
                                                                        }
                                                                        else
                                                                        {
                                                                            Connector.Connector.GetPunishment(msg.Chat.Id);
                                                                            var pun = Connector.Connector.punishment;
                                                                            Connector.Connector.UpdateMaxWarns(msg.Chat.Id, value_int, pun);
                                                                            result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä max_warns: {value_int}</code>\n";
                                                                        }
                                                                    }
                                                                    break;
                                                                }
                                                                catch (FormatException format)
                                                                {
                                                                    result += "<code>üëæError occured: value isn't int/long</code>\n";
                                                                    break;
                                                                }
                                                            }
                                                        case "punish":
                                                            {
                                                                if (value == "mute")
                                                                {
                                                                    Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                                    if (Connector.Connector.message == "not found")
                                                                    {
                                                                        Connector.Connector.RegisterChatWarns(msg.Chat.Id, 3, value);
                                                                    }
                                                                    else
                                                                    {
                                                                        var max = Connector.Connector.maxWarns;
                                                                        Connector.Connector.UpdateMaxWarns(msg.Chat.Id, max, value);
                                                                    }
                                                                    result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä punish: {value}</code>\n";
                                                                }
                                                                else if (value == "ban")
                                                                {
                                                                    Connector.Connector.CheckChatWarns(msg.Chat.Id);
                                                                    if (Connector.Connector.message == "not found")
                                                                    {
                                                                        Connector.Connector.RegisterChatWarns(msg.Chat.Id, 3, value);
                                                                    }
                                                                    else
                                                                    {
                                                                        var max = Connector.Connector.maxWarns;
                                                                        Connector.Connector.UpdateMaxWarns(msg.Chat.Id, max, value);
                                                                    }
                                                                    result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä punish: {value}</code>\n";
                                                                }
                                                                else
                                                                {
                                                                    result += $"<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä punish \"{value}\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</code>\n";
                                                                }
                                                                break;
                                                            }
                                                        case "max_msg":
                                                            {
                                                                try
                                                                {
                                                                    var value_int = Convert.ToInt32(value);
                                                                    Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                                                    if (Connector.Connector.message == "not found")
                                                                    {
                                                                        if (value_int < 4)
                                                                        {
                                                                            result += $"<code>‚ö†Ô∏èWarning max_msg: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ 4</code>\n";
                                                                        }
                                                                        else if (value_int > 10)
                                                                        {
                                                                            result += $"<code>‚ö†Ô∏èWarning max_msg: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10</code>\n";
                                                                        }
                                                                        else
                                                                        {
                                                                            Connector.Connector.CreateSpamConfig(msg.Chat.Id, value_int, "off");
                                                                            result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä max_msg: {value_int}</code>\n";
                                                                        }
                                                                    }
                                                                    else
                                                                    {
                                                                        if (value_int < 4)
                                                                        {
                                                                            result += $"<code>‚ö†Ô∏èWarning max_msg: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∏–∂–µ 4</code>\n";
                                                                        }
                                                                        else if (value_int > 10)
                                                                        {
                                                                            result += $"<code>‚ö†Ô∏èWarning max_msg: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–µ–∫—É–Ω–¥—É –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 10</code>\n";
                                                                        }
                                                                        else
                                                                        {
                                                                            Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                                                            Connector.Connector.UpdateSpamConfig(msg.Chat.Id, value_int, Connector.Connector.as_active);
                                                                            result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä max_msg: {value_int}</code>\n";
                                                                        }
                                                                    }
                                                                }
                                                                catch (FormatException exc)
                                                                {
                                                                    result += "<code>üëæError occured: value isn't int/long</code>\n";
                                                                    break;
                                                                }
                                                                break;
                                                            }
                                                        case "as_active":
                                                            {
                                                                switch (value)
                                                                {
                                                                    case "on":
                                                                        {
                                                                            Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                                                            if (Connector.Connector.message == "not found")
                                                                            {
                                                                                Connector.Connector.CreateSpamConfig(msg.Chat.Id, 4, value);
                                                                                result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä as_active: {value}</code>\n";
                                                                            }
                                                                            else
                                                                            {
                                                                                Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                                                                var max = Connector.Connector.maxMess;
                                                                                Connector.Connector.UpdateSpamConfig(msg.Chat.Id, max, value);
                                                                                result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä as_active: {value}</code>\n";
                                                                            }
                                                                            break;
                                                                        }
                                                                    case "off":
                                                                        {
                                                                            Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                                                            if (Connector.Connector.message == "not found")
                                                                            {
                                                                                Connector.Connector.CreateSpamConfig(msg.Chat.Id, 4, value);
                                                                                result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä as_active: {value}</code>\n";
                                                                            }
                                                                            else
                                                                            {
                                                                                Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                                                                var max = Connector.Connector.maxMess;
                                                                                Connector.Connector.UpdateSpamConfig(msg.Chat.Id, max, value);
                                                                                result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä as_active: {value}</code>\n";
                                                                            }
                                                                            break;
                                                                        }
                                                                    default:
                                                                        {
                                                                            result += $"<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä as_active \"{value}\" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</code>\n";
                                                                            break;
                                                                        }

                                                                }
                                                                break;
                                                            }
                                                        case "nightmode":
                                                            {
                                                                try
                                                                {
                                                                    var night = value.Split('|')[1].Split('-');
                                                                    var state = value.Split('|')[0].Split('-');
                                                                    Connector.Connector.GetNightMode(msg.Chat.Id);
                                                                    var test = Convert.ToInt32(night[0]);
                                                                    var test1 = Convert.ToInt32(night[1]);
                                                                    var test2 = Convert.ToInt32(state[0]);
                                                                    var test3 = Convert.ToInt32(state[1]);
                                                                    if (test >= 24 | test < 0)
                                                                    {
                                                                        result += "<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä nightmode –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –≤—Ä–µ–º–µ–Ω–∏</code>\n";
                                                                    }
                                                                    if (test1 >= 60 | test1 < 0)
                                                                    {
                                                                        result += "<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä nightmode –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –≤—Ä–µ–º–µ–Ω–∏</code>\n";
                                                                    }
                                                                    if (test2 >= 24 | test2 < 0)
                                                                    {
                                                                        result += "<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä statemode –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –≤—Ä–µ–º–µ–Ω–∏</code>\n";
                                                                    }
                                                                    if (test3 >= 60 | test3 < 0)
                                                                    {
                                                                        result += "<code>‚ö†Ô∏è–ü–∞—Ä–∞–º–µ—Ç—Ä statemode –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –≤—Ä–µ–º–µ–Ω–∏</code>\n";
                                                                    }
                                                                    else if (test == test2)
                                                                    {
                                                                        result += "<code>üìõ–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ \"nightmode\" –Ω–∞—Ä—É—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!</code>";
                                                                    }
                                                                    else
                                                                    {
                                                                        if (Connector.Connector.message == "not found")
                                                                        {
                                                                            Connector.Connector.CreateNightMode(msg.Chat.Id, night[0] + ":" + night[1], state[0] + ":" + state[1]);
                                                                        }
                                                                        else
                                                                        {
                                                                            Connector.Connector.UpdateNightMode(msg.Chat.Id, night[0] + ":" + night[1], state[0] + ":" + state[1]);
                                                                        }
                                                                        result += $"<code>‚úÖ–ü–∞—Ä–∞–º–µ—Ç—Ä nightmode: {night[0]}:{night[1]}-{state[0]}:{state[1]}\n</code>";
                                                                    }
                                                                }
                                                                catch (FormatException eEEEEEEEE)
                                                                {
                                                                    result += "<code>üëæError occured: value is string\n</code>";
                                                                }
                                                                break;
                                                            }
                                                        default:
                                                            {
                                                                result += $"<code>‚ùå–ü–∞—Ä–∞–º–µ—Ç—Ä \"{inp}\" –Ω–µ –Ω–∞–π–¥–µ–Ω\n</code>";
                                                                break;
                                                            }
                                                    }

                                                    if (result == "<b>–°–ø–∏—Å–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (BETA):</b>\n")
                                                        await client.DeleteMessageAsync(msg.Chat.Id, process.MessageId);
                                                    else
                                                        await client.EditMessageTextAsync(msg.Chat.Id, process.MessageId, result, ParseMode.Html);
                                                    Thread.Sleep(750);
                                                }
                                            }
                                            catch (IndexOutOfRangeException aut)
                                            {
                                                result += $"<code>üëæError occured: value is null</code>\n";
                                                await client.EditMessageTextAsync(msg.Chat.Id, process.MessageId, result, ParseMode.Html);
                                                Thread.Sleep(750);
                                            }

                                        }
                                    }
                                }
                            }

                            if (msg.Text.StartsWith("+–ø—Ä–∞–≤–∏–ª–∞\n"))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    try
                                    {
                                        var rule = msg.Text.Split("+–ø—Ä–∞–≤–∏–ª–∞\n")[1];
                                        ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                        if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == myId; }) == null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                            return;
                                        }
                                        else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                            return;
                                        }
                                        else if (rule.Length > 1024)
                                        {
                                            await client.SendTextMessageAsync(msg.Chat.Id, "‚ö†Ô∏è–ü—Ä–∞–≤–∏–ª–∞ –ø—Ä–µ–≤—ã—à–∞—é—Ç –±–æ–ª—å—à–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤!");
                                        }
                                        else
                                        {
                                            Connector.Connector.GetChatRules(msg.Chat.Id);
                                            if (Connector.Connector.message == "not setted")
                                            {
                                                Connector.Connector.CreateChatRules(msg.Chat.Id, rule);
                                                await client.SendTextMessageAsync(msg.Chat.Id, "‚úÖ–ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!");
                                            }
                                            else
                                            {
                                                Connector.Connector.UpdateChatRules(msg.Chat.Id, rule);
                                                await client.SendTextMessageAsync(msg.Chat.Id, "‚úÖ–ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!");
                                            }
                                        }
                                    }

                                    catch (IndexOutOfRangeException eeeee)
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞üëæ");
                                    }
                                }
                            }

                            if (msg.Text.ToLower() == "–ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    Connector.Connector.GetChatRules(msg.Chat.Id);
                                    if (Connector.Connector.message == "not setted")
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, "üö´–ü—Ä–∞–≤–∏–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, $"üìú–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞ <b>\"{msg.Chat.Title}\"</b>", ParseMode.Html);
                                        await client.SendTextMessageAsync(msg.Chat.Id, Connector.Connector.rule);
                                    }
                                }
                            }

                            if (msg.Text.ToLower() == "-–ø—Ä–∞–≤–∏–ª–∞")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    Connector.Connector.GetChatRules(msg.Chat.Id);
                                    if (Connector.Connector.message == "not setted")
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, "üö´–ü—Ä–∞–≤–∏–ª–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã");
                                    }
                                    else
                                    {
                                        Connector.Connector.DeleteChatRules(msg.Chat.Id);
                                        await client.SendTextMessageAsync(msg.Chat.Id, "‚úÖ–ü—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!");
                                    }
                                }
                            }

                            if (msg.Text.StartsWith("/sub_weather "))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    var city = msg.Text.Split("/sub_weather ")[1];
                                    WeatherApi.Weather(city);
                                    if (WeatherApi.ResponseIsNormal == false)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<b>–ì–æ—Ä–æ–¥ –Ω–µ –±—ã–ª –Ω–∞–π–¥–µ–Ω‚ö†!</b>\n–ì–æ—Ä–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –Ω–∞–ø–∏—Å–∞–Ω –Ω–µ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ.\n\n<i>–ü—Ä–∏–º–µ—Ä: –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</i>", parseMode: ParseMode.Html);
                                    }
                                    else
                                    {
                                        Connector.Connector.GetSubData(msg.Chat.Id);
                                        if (Connector.Connector.message == "not sub")
                                        {
                                            Connector.Connector.CreateSubData(msg.Chat.Id, city, DateTime.Now.AddHours(3));
                                            await client.SendTextMessageAsync(msg.Chat.Id, $"–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ—á–∞—Å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≥–æ—Ä–æ–¥–∞ \"{city}\"üîî!");
                                        }
                                        else
                                        {
                                            Connector.Connector.UpdateSubData(msg.Chat.Id, city, DateTime.Now.AddHours(3));
                                            await client.SendTextMessageAsync(msg.Chat.Id, $"–í—ã –ø–µ—Ä–µ–ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ—á–∞—Å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –≥–æ—Ä–æ–¥–∞ \"{city}\"üîÑ!");
                                        }
                                    }
                                }
                            }

                            if (msg.Text.ToLower() == "/unsub_weather")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    Connector.Connector.GetSubData(msg.Chat.Id);
                                    if (Connector.Connector.message == "not sub")
                                    {
                                        await client.SendTextMessageAsync(msg.Chat.Id, "–í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –µ–∂–µ—á–∞—Å–Ω–æ–π –ø–æ–≥–æ–¥—ãüîï!");
                                    }
                                    else
                                    {
                                        Connector.Connector.DeleteSubData(msg.Chat.Id);
                                        await client.SendTextMessageAsync(msg.Chat.Id, "‚úÖ–¢–µ–ø–µ—Ä—å –≤—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –µ–∂–µ—á–∞—Å–Ω–æ–π –ø–æ–≥–æ–¥—ã!");
                                    }
                                }
                            }

                            if (msg.Text.ToLower() == "-–Ω–æ—á–Ω–æ–π –º–æ–¥")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else
                                    {
                                        Connector.Connector.GetNightMode(msg.Chat.Id);
                                        if (Connector.Connector.message == "not found")
                                        {
                                            await client.SendTextMessageAsync(msg.Chat.Id, "üö´–ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
                                        }
                                        else
                                        {
                                            Connector.Connector.DeleteNightMode(msg.Chat.Id);
                                            await client.SendTextMessageAsync(msg.Chat.Id, "‚úÖ–ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º —Ç–µ–ø–µ—Ä—å —É–¥–∞–ª–µ–Ω!");
                                        }
                                    }
                                }
                            }

                            if (msg.Text.ToLower().StartsWith("+–Ω–æ—á–Ω–æ–π –º–æ–¥\n"))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else
                                    {
                                        try
                                        {
                                            Connector.Connector.GetNightMode(msg.Chat.Id);
                                            var time1 = msg.Text.Split('\n')[1].Split('-')[0];
                                            var time2 = msg.Text.Split('\n')[1].Split('-')[1];
                                            var night = time1.Split(':');
                                            var state = time2.Split(':');
                                            var test = Convert.ToInt32(night[0]);
                                            var test1 = Convert.ToInt32(night[1]);
                                            var test2 = Convert.ToInt32(state[0]);
                                            var test3 = Convert.ToInt32(state[1]);
                                            if (test >= 24 | test < 0)
                                            {
                                                await client.SendTextMessageAsync(msg.Chat.Id, "üìõ–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—Ä—É—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!");
                                                return;
                                            }
                                            if (test1 >= 60 | test1 < 0)
                                            {
                                                await client.SendTextMessageAsync(msg.Chat.Id, "üìõ–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—Ä—É—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!");
                                                return;
                                            }
                                            if (test2 >= 24 | test2 < 0)
                                            {
                                                await client.SendTextMessageAsync(msg.Chat.Id, "üìõ–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—Ä—É—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!");
                                                return;
                                            }
                                            if (test3 >= 60 | test3 < 0)
                                            {
                                                await client.SendTextMessageAsync(msg.Chat.Id, "üìõ–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—Ä—É—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!");
                                                return;
                                            }
                                            else if (test == test2)
                                            {
                                                await client.SendTextMessageAsync(msg.Chat.Id, "üìõ–£–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—Ä—É—à–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç –Ω–æ—á–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!");
                                                return;
                                            }
                                            else
                                            {
                                                if (Connector.Connector.message == "not found")
                                                {
                                                    Connector.Connector.CreateNightMode(msg.Chat.Id, time1, time2);
                                                    await client.SendTextMessageAsync(msg.Chat.Id, "‚úÖ–ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!");
                                                }
                                                else
                                                {
                                                    Connector.Connector.UpdateNightMode(msg.Chat.Id, time1, time2);
                                                    await client.SendTextMessageAsync(msg.Chat.Id, "‚úÖ–ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!");
                                                }
                                            }
                                        }
                                        catch (IndexOutOfRangeException eeeeeeeeeeeee)
                                        {
                                            await client.SendTextMessageAsync(msg.Chat.Id, "<code>üëæError occured: value is null</code>", ParseMode.Html);
                                        }
                                    }
                                }
                            }

                            if (msg.Text.ToLower() == "-–≤–∞—Ä–Ω")
                            {
                                if (msg.From.Id == msg.Chat.Id)
                                {
                                    return;
                                }
                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(msg.Chat.Id, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                }
                                else if (msg.ReplyToMessage.From.IsBot)
                                {
                                    await client.SendTextMessageAsync(msg.Chat.Id, $"@{msg.ReplyToMessage.From.FirstName} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ");
                                }
                                else
                                {
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else
                                    {
                                        Connector.Connector.CheckUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                        if (Connector.Connector.message == "not found")
                                        {
                                            await client.SendTextMessageAsync(msg.Chat.Id, $@"<b>üìõ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∞–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</b>", ParseMode.Html);
                                        }
                                        else
                                        {
                                            Connector.Connector.DeleteOneWarn(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                            if (Connector.Connector.message == "user warns is 1")
                                            {
                                                await client.SendTextMessageAsync(msg.Chat.Id, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç –Ω–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π‚úÖ!");
                                            }
                                            else if (Connector.Connector.message == "one warn deleted")
                                            {
                                                await client.SendTextMessageAsync(msg.Chat.Id, "–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –ø–µ—Ä–≤–æ–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ‚úÖ!");
                                            }
                                        }
                                    }
                                }

                            }

                            if (msg.Text.ToLower() == "-–≤–∞—Ä–Ω—ã")
                            {
                                if (msg.From.Id == msg.Chat.Id)
                                {
                                    return;
                                }
                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(msg.Chat.Id, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                }
                                else if (msg.ReplyToMessage.From.IsBot)
                                {
                                    await client.SendTextMessageAsync(msg.Chat.Id, $"@{msg.ReplyToMessage.From.FirstName} —è–≤–ª—è–µ—Ç—Å—è –±–æ—Ç–æ–ºü§ñ");
                                }
                                else
                                {
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else
                                    {
                                        Connector.Connector.CheckUserWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                        if (Connector.Connector.message == "not found")
                                        {
                                            await client.SendTextMessageAsync(msg.Chat.Id, $@"<b>üìõ–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–ª—É—á–∞–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π</b>", ParseMode.Html);
                                        }
                                        else
                                        {
                                            Connector.Connector.DeleteReasonsOfWarns(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                            Connector.Connector.DeleteWarnUser(msg.ReplyToMessage.From.Id, msg.Chat.Id);
                                            await client.SendTextMessageAsync(msg.Chat.Id, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ç–µ–ø–µ—Ä—å –Ω–µ—Ç –Ω–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π‚úÖ!");
                                        }
                                    }
                                }

                            }

                            if (msg.Text.ToLower().StartsWith("/fba_news "))
                            {
                                var split = msg.Text.ToLower().Split(' ');
                                if (Connector.Connector.GetFBANews(msg.Chat.Id) == false)
                                {
                                    switch (split[1])
                                    {
                                        case "on":
                                            Connector.Connector.CreateFBANews(msg.Chat.Id, "on");
                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚úÖ–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç FBA Studio!");
                                            break;
                                        case "off":
                                            Connector.Connector.CreateFBANews(msg.Chat.Id, "off");
                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚úÖ–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç FBA Studio!");
                                            break;
                                        default:
                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚ö†Ô∏è{split[1]} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
                                            break;
                                    }
                                }
                                else
                                {
                                    switch (split[1])
                                    {
                                        case "on":
                                            Connector.Connector.UpdateFBANews(msg.Chat.Id, "on");
                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚úÖ–í—ã –≤–∫–ª—é—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç FBA Studio!");
                                            break;
                                        case "off":
                                            Connector.Connector.UpdateFBANews(msg.Chat.Id, "off");
                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚úÖ–í—ã –æ—Ç–∫–ª—é—á–∏–ª–∏ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π –æ—Ç FBA Studio!");
                                            break;
                                        default:
                                            await client.SendTextMessageAsync(msg.Chat.Id, $"‚ö†Ô∏è{split[1]} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!");
                                            break;
                                    }
                                }
                            }

                            if (msg.Text.ToLower().StartsWith("/set_capcha") || msg.Text.ToLower().StartsWith("/set_capcha@laura_cm_bot"))
                            {
                                if(msg.From.Id == msg.Chat.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(msg.Chat.Id);
                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else
                                    {
                                        Connector.Connector.GetCapchaSetting(msg.Chat.Id);
                                        var active = msg.Text.ToLower().Split(' ')[1];
                                        if(Connector.Connector.message == "not found")
                                        {
                                            switch(active)
                                            {
                                                case "on":
                                                    Connector.Connector.CreateCapchaSetting(msg.Chat.Id, active, 5);
                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"<code>‚úÖ–ö–∞–ø—á–∞ –≤ —á–∞—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</code>", ParseMode.Html);
                                                    break;
                                                case "off":
                                                    Connector.Connector.CreateCapchaSetting(msg.Chat.Id, active, 5);
                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"<code>‚õîÔ∏è–ö–∞–ø—á–∞ –≤ —á–∞—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞!</code>", ParseMode.Html);
                                                    break;
                                                default:
                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"<code>‚ö†Ô∏è–ó–Ω–∞—á–µ–Ω–∏–µ '{active}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</code>", ParseMode.Html);
                                                    break;
                                            }   
                                        }
                                        else
                                        {
                                            switch (active)
                                            {
                                                case "on":
                                                    Connector.Connector.UpdateCapchaSetting(msg.Chat.Id, active, 5);
                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"<code>‚úÖ–ö–∞–ø—á–∞ –≤ —á–∞—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!</code>", ParseMode.Html);
                                                    break;
                                                case "off":
                                                    Connector.Connector.UpdateCapchaSetting(msg.Chat.Id, active, 5);
                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"<code>‚õîÔ∏è–ö–∞–ø—á–∞ –≤ —á–∞—Ç–µ –æ—Ç–∫–ª—é—á–µ–Ω–∞!</code>", ParseMode.Html);
                                                    break;
                                                default:
                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"<code>‚ö†Ô∏è–ó–Ω–∞—á–µ–Ω–∏–µ '{active}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç</code>", ParseMode.Html);
                                                    break;
                                            }
                                        }
                                    }
                                }
                            }

                            if (msg.Text.ToLower().StartsWith("+–Ω–æ—Ç–∏—Ñ –∫–æ–º–º–µ–Ω—Ç\n"))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else
                                    {
                                        var inputNotifComment = msg.Text.Split(msg.Text.Split('\n')[0] + '\n')[1];
                                        var check = await client.SendTextMessageAsync(msg.Chat.Id, "<i>–ò–¥—ë—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ HTML-—Ç–µ–≥–æ–≤...</i>", ParseMode.Html);
                                        Thread.Sleep(350);
                                        try
                                        {
                                            await client.EditMessageTextAsync(msg.Chat.Id, check.MessageId, inputNotifComment, ParseMode.Html);
                                            await client.SendTextMessageAsync(msg.Chat.Id, "‚úÖHTML-—Ç–µ–≥–∏ –≤–≤–µ–¥–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–ª–∏ –≤–æ–≤—Å–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã, –≤—ã—à–µ –≤—ã –≤–∏–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –ø–æ—Å—Ç–∞ –∫–∞–Ω–∞–ª–∞");
                                            if (Connector.Connector.GetNotifComment(msg.Chat.Id) == null)
                                            {
                                                Connector.Connector.CreateNotifComment(msg.Chat.Id, inputNotifComment);
                                                await client.SendTextMessageAsync(msg.Chat.Id, "‚úÖ–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∞–Ω");
                                            }
                                            else
                                            {
                                                Connector.Connector.UpdateNotifComment(msg.Chat.Id, inputNotifComment);
                                                await client.SendTextMessageAsync(msg.Chat.Id, "‚úÖ–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∞–Ω");
                                            }
                                        }
                                        catch (ApiRequestException html)
                                        {
                                            await client.EditMessageTextAsync(msg.Chat.Id, check.MessageId, $"<code>üëæError occured: {html.Message}</code>\n<b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ–≥–∏ –∏ –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å: <a href=\"https://telegra.ph/Rabota-s-HTML-tegami-dlya-oformleniya-kommentariya-uvedomlenii-11-02\">–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è</a></b>", ParseMode.Html, disableWebPagePreview: true);
                                        }
                                    }
                                }

                                //RP commands
                                if (msg.Text.StartsWith("+"))
                                {
                                    {
                                        if (msg.Chat.Id == msg.From.Id)
                                        {
                                            return;
                                        }
                                        else if (msg.ReplyToMessage == null)
                                        {
                                            return;
                                        }
                                        else if (msg.ReplyToMessage != null)
                                        {
                                            if (msg.ReplyToMessage.From.Id == msg.From.Id)
                                            {
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –∞ —É –≤–∞—Å, –∫–∞–∫ —è –≤–∏–∂—É, –≤—ã—Å–æ–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞üòè", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                return;
                                            }
                                            else
                                            {
                                                Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                                if (Connector.Connector.message == "don't rate")
                                                {
                                                    Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                                    if (Connector.Connector.message == "not rated")
                                                    {
                                                        Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, 1);
                                                        Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                    else
                                                    {
                                                        Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                        var rating = Connector.Connector.user_rating + 1;
                                                        Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                }
                                                else
                                                {
                                                    Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                                    if (Connector.Connector.message == "not rated")
                                                    {
                                                        Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, 1);
                                                        Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                    else
                                                    {
                                                        Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                                        if (Connector.Connector.count_control >= 4)
                                                        {
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"üö´–í—ã —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è <b>{msg.ReplyToMessage.From.FirstName}</b>\n‚è±–î–∞—Ç–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞: {Connector.Connector.soc_control}", ParseMode.Html);
                                                        }
                                                        else
                                                        {
                                                            var control = Connector.Connector.count_control + 1;
                                                            Connector.Connector.UpdateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, control, DateTime.Now.AddDays(1));
                                                            var rating = Connector.Connector.user_rating + 1;
                                                            Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (msg.Text.StartsWith("-"))
                                {
                                    {
                                        if (msg.Chat.Id == msg.From.Id)
                                        {
                                            return;
                                        }
                                        else if (msg.ReplyToMessage == null)
                                        {
                                            return;
                                        }
                                        else if (msg.ReplyToMessage != null)
                                        {
                                            if (msg.Text.Contains("_") || msg.Text.ToLower().StartsWith("-–≤–∞—Ä–Ω"))
                                            {
                                                return;
                                            }
                                            else if (msg.ReplyToMessage.From.Id == msg.From.Id)
                                            {
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –∑–∞—á–µ–º —Å–µ–±—è —Ç–∞–∫ —É–Ω–∏–∂–∞—Ç—åüòï", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                return;
                                            }
                                            else
                                            {
                                                Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                                if (Connector.Connector.message == "don't rate")
                                                {
                                                    Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                                    if (Connector.Connector.message == "not rated")
                                                    {
                                                        Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, -1);
                                                        Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: -1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                    else
                                                    {
                                                        Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                        var rating = Connector.Connector.user_rating - 1;
                                                        Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                }
                                                else
                                                {
                                                    Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                                    if (Connector.Connector.message == "not rated")
                                                    {
                                                        Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, -1);
                                                        Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: -1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                    else
                                                    {
                                                        Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                                        if (Connector.Connector.count_control >= 4)
                                                        {
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"üö´–í—ã —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è <b>{msg.ReplyToMessage.From.FirstName}</b>\n‚è±–î–∞—Ç–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞: {Connector.Connector.soc_control}", ParseMode.Html);
                                                        }
                                                        else
                                                        {
                                                            var control = Connector.Connector.count_control + 1;
                                                            Connector.Connector.UpdateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, control, DateTime.Now.AddDays(1));
                                                            var rating = Connector.Connector.user_rating - 1;
                                                            Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        return;
                                    }
                                }


                                if (msg.Text.ToUpper() == "–û–ë–ù–Ø–¢–¨")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –æ–±–Ω—è–ª —Å–µ–±—èü§ó", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id{msg.From.Id}\">{msg.From.FirstName}</a> –æ–±–Ω—è–ª <a href = \"tg://user?id{msg.ReplyToMessage.From.Username}\">{msg.ReplyToMessage.From.FirstName}</a>ü§ó", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }

                                }

                                if (msg.Text.ToUpper() == "–£–î–ê–†–ò–¢–¨")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —É–¥–∞—Ä–∏–ª —Å–æ –≤—Å–µ–π —Å–∏–ª–æ–π –≤ –ø—É—Å—Ç–æ—Ç—Éüò∂", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —É–¥–∞—Ä–∏–ª —Å–æ –≤—Å–µ–π —Å–∏–ª–æ–π –≤ <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>ü§ï", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                }

                                if (msg.Text.ToUpper() == "–£–ë–ò–¢–¨")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –ø–æ–∫–æ–Ω—á–∏–ª —Å–≤–æ—é –∂–∏–∑–Ω—å —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ–ºü§°üî™", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —É–±–∏–≤–∞–µ—Ç <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üî™üò¢", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }

                                }

                                if (msg.Text.ToUpper() == "–£–ö–£–°–ò–¢–¨")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —É–∫—É—Å–∏–ª —Å–µ–±—èü§°", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –¥–µ–ª–∞–µ—Ç —É–∫—É—Å <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üê∫", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }

                                }

                                if (msg.Text.ToUpper() == "–ü–û–ö–ê–ó–ê–¢–¨ –Ø–ó–´–ö")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞–ª —è–∑—ã–∫üëÖ", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?sid={msg.From.Id}\">{msg.From.FirstName}</a> –ø–æ–∫–∞–∑–∞–ª —è–∑—ã–∫ <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üòú", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }

                                }

                                if (msg.Text.ToUpper() == "–ù–ê–ö–û–†–ú–ò–¢–¨")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –≤–∫—É—Å–Ω–æ –ø–æ–∫–æ—Ä–º–∏–ª —Å–µ–±—èüòã", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –≤–∫—É—Å–Ω–æ –ø–æ–∫–æ—Ä–º–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞ <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üçîüçüüå≠", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }

                                if (msg.Text.ToUpper() == "–ö–ê–°–¢–†–ò–†–û–í–ê–¢–¨")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —Å–µ–±—è –∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–ªü´°", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>‚úÇÔ∏è", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }

                                //Buttons/easters
                                switch (msg.Text)
                                {

                                    //Just button
                                    case "VPN":
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "<b>FBA Studio x LibreNet</b>\n\n<b><i>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:</i></b>\n<i>LanceVPN_Netherlands:</i>\n¬¨–°–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: 250 –ú–ë–∏—Ç/—Å\n¬¨–°—Ç—Ä–∞–Ω–∞: –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã\n¬¨–¶–µ–Ω–∞: 50 –†—É–±/–º–µ—Å\n–ü—Ä–æ—Ç–æ–∫–æ–ª: WireGuard", parseMode: ParseMode.Html, replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithUrl("–ü—Ä–∞–π—Å–ª–∏—Å—Ç", "https://t.me/LanceVPN")));
                                            break;
                                        }

                                    //Buttons from "GetButtons"
                                    case "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüìö":
                                        if (msg.Chat.Id != msg.From.Id)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º:\ntelegra.ph/Rabota-s-botom-Laura-10-18", parseMode: ParseMode.Html, disableWebPagePreview: false);
                                            break;
                                        }

                                    case "–û –Ω–∞—Åüìí":
                                        if (msg.Chat.Id != msg.From.Id)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            InlineKeyboardButton ProjectNews = new InlineKeyboardButton();
                                            InlineKeyboardButton Dev1 = new InlineKeyboardButton();
                                            InlineKeyboardButton Dev2 = new InlineKeyboardButton();
                                            InlineKeyboardButton ScladOfRes = new InlineKeyboardButton();

                                            ProjectNews.Text = "–ö–∞–Ω–∞–ª –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º –ø—Ä–æ–µ–∫—Ç–æ–≤üì°";
                                            ProjectNews.Url = "https://t.me/FBA_Studio";

                                            Dev1.Text = "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—åü§¥";
                                            Dev1.Url = "https://t.me/LanceMinecraft";

                                            Dev2.Text = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ 2üë®‚Äçüíª";
                                            Dev2.Url = "https://t.me/TheShadow_hk";

                                            ScladOfRes.Text = "–ö–∞–Ω–∞–ª —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –¥–ª—è –±–æ—Ç–∞üìö";
                                            ScladOfRes.Url = "https://t.me/ScladOfRes";

                                            InlineKeyboardButton[] Row1 = new InlineKeyboardButton[] { ProjectNews };
                                            InlineKeyboardButton[] Row2 = new InlineKeyboardButton[] { Dev1, Dev2 };
                                            InlineKeyboardButton[] Row3 = new InlineKeyboardButton[] { ScladOfRes };

                                            InlineKeyboardButton[][] InfoButtons = new InlineKeyboardButton[][] { Row1, Row2, Row3 };
                                            InlineKeyboardMarkup InfoKeyboard = new InlineKeyboardMarkup(InfoButtons);

                                            await client.SendTextMessageAsync(
                                                chatId: msg.Chat.Id,
                                                "<b href=\"t.me/FBA_Studio\">FBA Studio</b> - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–≤ —Å –Ω—É–∂–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã, –æ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞ –º–Ω–µ–Ω–∏–µ –∫–æ–º—å—é–Ω–∏—Ç–∏, –¥—É–º–∞—é, —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å –∏—Ö –∫–∞–Ω–∞–ªü§ó",
                                                replyMarkup: InfoKeyboard, parseMode: ParseMode.Html);
                                            break;
                                        }


                                    case "–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç‚ûï":
                                        if (msg.Chat.Id != msg.From.Id)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, text: $"<b>‚ùó–ü—Ä–∞–≤–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏ –±–æ—Ç–∞:</b>\n\n<i>-–∏–∑–º–µ–Ω–µ–Ω–Ω–∏—è –ø—Ä–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞</i>\n<i>-—É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —á–∞—Ç–∞</i>\n<i>-—É–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</i>\n<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —á–∞—Ç–∞</i>", parseMode: ParseMode.Html, replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithUrl("–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É", "http://t.me/Laura_cm_bot?startgroup=start&admin=change_info+restrict_members+delete_messages+pin_messages+invite_users")));
                                            break;
                                        }

                                    //Sponsors of the bot
                                    case "–ü–∞—Ä—Ç–Ω—ë—Ä—ã –±–æ—Ç–∞":
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, text: "<b>–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã –±–æ—Ç–∞ü§ù:</b>\n<i>-@FlushaStudio(–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞)</i>\n<i>-@RiceTeamStudio(–ü–∏–∞—Ä –ø—Ä–æ–µ–∫—Ç–∞)</i>\n<i>-@banan4ikmoder(–ü–∏–∞—Ä)</i>\n<i>@TheShadow_hk(Dev, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –±–∞–Ω–∞ –≤ —á–∞—Ç–µ)</i>\n<i>Maxim Bysh(–ü–æ–º–æ–≥ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –º—É—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)</i>\n<i>Libreto(–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞)</i>\n<i>–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è</i>", parseMode: ParseMode.Html);
                                        break;
                                }

                                //Get Chat Id (For admins)
                                if (msg.Text.StartsWith("/getchatid"))
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /getmyid");
                                        return;
                                    }
                                    else if (msg.Chat.Id != msg.From.Id)
                                    {
                                        Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                        bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                        var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                        if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî@{msg.From.Username}, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!");
                                            return;
                                        }

                                        else
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"ID –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞üÜî: <code>{msg.Chat.Id}</code>", parseMode: ParseMode.Html); ;
                                        return;
                                    }
                                }

                                //Get Uptime
                                if (msg.Text.ToLower().StartsWith("/uptime"))
                                {
                                    await client.SendTextMessageAsync(msg.Chat.Id, $"–ú–æ–π Uptime:\n{timeOfStart}");
                                }

                                //Get your id 
                                if (msg.Text == "/getmyid")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–í–∞—à –ª–∏—á–Ω—ã–π ID: <code>{msg.From.Id}</code>", parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (msg.Chat.Id != msg.From.Id)
                                    {
                                        return;
                                    }
                                }

                                //Get our id
                                if (msg.Text.StartsWith("/getourid"))
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else
                                    {
                                        if (msg.ReplyToMessage == null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                        }
                                        else
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.ReplyToMessage.From.FirstName}:\n<code>{msg.ReplyToMessage.From.Id}</code>", parseMode: ParseMode.Html);
                                        }

                                    }
                                }

                                //Random rating
                                if (msg.Text.StartsWith("–æ—Ü–µ–Ω–∫—É") | msg.Text.StartsWith("–û—Ü–µ–Ω–∫—É"))
                                {
                                    string[] rateAnswer = { "-10/10, —á—Ç–æ –∑–∞ –∫—Ä–∏–Ω–∂ —Ç—ã –∫–∏–Ω—É–ªü§¢", "4/10, —Ç–∞–∫ —Å–µ–±–µ —Å–¥–µ–ª–∞–Ω–æüôÑ", "0/10, —Ñ–∏–≥–Ω—è, –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–π", "100/10, –ø—Ä–æ—Å—Ç–æ –∫—Ä—É—á–µ –Ω–µ–∫—É–¥–∞ü§©", "7/10, –Ω–µ–ø–ª–æ—Ö–æ, –≤–ø–æ–ª–Ω–µ –¥–æ—Å—Ç–æ–π–Ω–æüôÇ", "10/10, —Å—É–ø–µ—Ä‚ú®" };
                                    Random rndAnswer = new Random();
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, rateAnswer[rndAnswer.Next(rateAnswer.Length)]);
                                }

                                if (msg.Text.ToUpper() == "–õ–ò–í–ê–ô, –õ–ê–£–†–ê")
                                {
                                    if (msg.From.Id != 5287392256)
                                    {
                                        return;
                                    }
                                    else
                                    {
                                        if (msg.Chat.Id != msg.From.Id)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –≤—ã–π—Ç–∏ —Å –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞!\n–í—Å–µ–º —É–¥–∞—á–∏...");
                                            await Task.Delay(1500);
                                            await client.LeaveChatAsync(chatId: msg.Chat.Id);
                                            return;
                                        }
                                        else
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–õ–∞–Ω—Å, —ç—Ç–æ –ª—Å .-.");
                                            return;
                                        }
                                    }
                                }

                                //Weather request from WeatherClassApi.cs
                                if (msg.Text.ToLower().StartsWith("–ø–æ–≥–æ–¥–∞ –≤"))
                                {
                                    string[] strings = msg.Text.Split(' ');
                                    String[] InpResponse = msg.Text.Split(strings[0] + ' ' + strings[1] + ' ');
                                    var inputCityName = InpResponse[1];
                                    WeatherApi.Weather(inputCityName);
                                    WeatherApi.Celsius(celsius: WeatherApi.temperatureCity);
                                    WeatherApi.WindCourse(WeatherApi.windDegCity);

                                    if (WeatherApi.ResponseIsNormal == true)
                                    {
                                        var MainWeather = await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<b>{WeatherApi.answer}</b>\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞ <code>{WeatherApi.nameCity}</code>:</b>\n–ò–Ω–¥–µ–∫—Å Air Pollutionüí®: <code>{WeatherApi.aqi}</code>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–∞üå°: <code>{Math.Round(WeatherApi.temperatureCity)}¬∞C</code>\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <code>{Math.Round(WeatherApi.tempFeelsLikeCity)}¬∞C</code>\n–ü–æ–≥–æ–¥–∞‚õÖ: <code>{WeatherApi.weatherCity}</code>\n–î–∞–≤–ª–µ–Ω–∏–µ‚¨á:<code>{WeatherApi.pressureCity} –≥–ü–∞</code>\n–í–∏–¥–∏–º–æ—Å—Ç—åüëÅ: <code>{WeatherApi.visibilityCity} –∫–º</code>\n–í–ª–∞–∂–Ω–æ—Å—Ç—åüíß: <code>{WeatherApi.humidityCity}%</code>\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üå´: <code>{WeatherApi.windSpeedCity} –º/c</code>\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: <code>{WeatherApi.windDegCity}¬∞ ({WeatherApi.WindAnswer})</code>", parseMode: ParseMode.Html);
                                        await client.SendTextMessageAsync(
                                            msg.Chat.Id,
                                            replyToMessageId: MainWeather.MessageId,
                                            text:
    @$"<b>AirPollution - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–æ–∑–¥—É—Ö–∞:</b>
CO: <i>{WeatherApi.co} –º–∫–≥/–º3</i>
NO: <i>{WeatherApi.no} –º–∫–≥/–º3</i>
NO2: <i>{WeatherApi.no2} –º–∫–≥/–º3</i>
O3: <i>{WeatherApi.o3} –º–∫–≥/–º3</i>
SO2: <i>{WeatherApi.so2} –º–∫–≥/–º3</i>
PM2.5: <i>{WeatherApi.pm2_5} –º–∫–≥/–º3</i>
PM10: <i>{WeatherApi.pm10} –º–∫–≥/–º3</i>
NH3: <i>{WeatherApi.nh3} –º–∫–≥/–º3</i>
",
                                            parseMode: ParseMode.Html);
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<b>–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã‚ö†!</b>\n–ì–æ—Ä–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –Ω–∞–ø–∏—Å–∞–Ω –Ω–µ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ.\n\n<i>–ü—Ä–∏–º–µ—Ä: –ü–æ–≥–æ–¥–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</i>", parseMode: ParseMode.Html);
                                    }
                                }

                                //Random % of question
                                if (msg.Text.ToLower().StartsWith("–ª–∞—É—Ä–∞ –∏–Ω—Ñ–∞"))
                                {
                                    Random rndm_count = new Random();
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"ü§î–Ø –¥—É–º–∞—é, —á—Ç–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞ {rndm_count.Next(0, 100)}%");
                                }

                                if ((msg.Text.StartsWith("–õ–∞—É—Ä–∞") | msg.Text.StartsWith("–ª–∞—É—Ä–∞")) & (msg.Text.Contains("–°–∫–∞–∂–∏") | msg.Text.Contains("—Å–∫–∞–∂–∏")))
                                {
                                    String[] answers = { "–ù–µ—Ç, –Ω–µ —Ö–æ—á—É", "–ü–æ—à—ë–ª —Ç—ã!", "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —è –±–æ—Ç, –Ω–æ —è –Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å!", "–î–ê –ò–î–ò –¢–´ –ù–ê–§–ò–ì!!!", "–•–æ—Ä–æ—à–æ, —è —ç—Ç–æ —Å–∫–∞–∂—É..." };
                                    Random random = new Random();

                                    var myAnswerResult = await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"{answers[random.Next(answers.Length)]}");
                                    var SplitSymbol = msg.Text.Split("–∫–∞–∂–∏");
                                    var phrase = SplitSymbol[+1];
                                    if (myAnswerResult.Text == "–•–æ—Ä–æ—à–æ, —è —ç—Ç–æ —Å–∫–∞–∂—É...")
                                    {
                                        await Task.Delay(2250);
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"{phrase}");
                                        return;
                                    }
                                    else
                                    {
                                        return;
                                    }

                                }

                                //AI Activation
                                if (msg.ReplyToMessage != null && msg.ReplyToMessage.From.Id == myId)
                                {
                                    AIHandler.AIAnswer(msg.Text, msg.From.FirstName);
                                    if (AIHandler.Status != true)
                                    {
                                        return;
                                    }
                                    else if (AIHandler.HaveSticker == true)
                                    {
                                        await client.SendStickerAsync(chatId: msg.Chat.Id, sticker: AIHandler.StickerUrl);
                                        await Task.Delay(1500);
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, AIHandler.AIMessage);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, AIHandler.AIMessage);
                                        return;
                                    }
                                }

                                //Random user (in Dev)
                                if (msg.Text.ToLower().StartsWith("–ª–∞—É—Ä–∞ –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è "))
                                {
                                    var splitter = msg.Text.Split(' ');
                                    var SplitPredictPhrase = msg.Text.Split($"{splitter[0]} {splitter[1]} {splitter[2]} ");
                                    var PredictPhrase = SplitPredictPhrase[1];

                                    String[] botText = { "üîÆ–®–∞—Ä —è—Å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ", "üåå–î—Ä–µ–≤–Ω–∏–µ –±–æ–≥–∏ –≥–ª–∞—Å—è—Ç, —á—Ç–æ" };
                                    Random random_botText = new Random();
                                    var user = await MessageParser.GetRandomMemberAsync(msg.Chat.Id, token, msg.Chat.Type, msg.MessageId);

                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"{botText[random_botText.Next(botText.Length)]} <a href = \"tg://user?id={user[1]}\">{user[0]}</a> —Å–µ–≥–æ–¥–Ω—è {PredictPhrase}", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                }

                                if ((msg.Text.Contains("—á–∞—Ç") | msg.Text.Contains("–ß–∞—Ç")) & (msg.Text.Contains("—É–º–µ—Ä") | msg.Text.Contains("–£–º–µ—Ä") | msg.Text.Contains("—Å–¥–æ—Ö") | msg.Text.Contains("–°–¥–æ—Ö")))
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"F, {msg.Chat.Title}");
                                        return;
                                    }
                                }

                                else if (msg.Chat.Id != msg.From.Id)
                                {
                                    if (msg.From.Id == channel || msg.From.Id == group || msg.From.Id == anonim)
                                    {
                                        return;
                                    }
                                    Connector.Connector.GetAntiSpam(msg.From.Id, msg.Chat.Id);
                                    if (Connector.Connector.message == "not found")
                                    {
                                        Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                        if (Connector.Connector.message == "not found")
                                        {
                                            return;
                                        }
                                        else
                                        {
                                            if (Connector.Connector.as_active == "off")
                                            {
                                                return;
                                            }
                                            else
                                            {
                                                Connector.Connector.CreateAntiSpam(msg.From.Id, msg.Chat.Id, 1);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                        if (Connector.Connector.message == "not found")
                                        {
                                            return;
                                        }
                                        else
                                        {
                                            if (Connector.Connector.as_active == "off")
                                            {
                                                return;
                                            }
                                            else
                                            {
                                                if (Connector.Connector.countMess >= Connector.Connector.maxMess)
                                                {
                                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(msg.Chat.Id);
                                                    if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == myId; }) == null)
                                                    {
                                                        return;
                                                    }
                                                    else if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == msg.From.Id; }) != null)
                                                    {
                                                        return;
                                                    }
                                                    else
                                                    {
                                                        Connector.Connector.DeleteAntiSpam(msg.Chat.Id, msg.From.Id);
                                                        await client.RestrictChatMemberAsync(msg.Chat.Id, msg.From.Id, new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false }, DateTime.Now.AddMinutes(30));
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —Ñ–ª—É–¥–∏—Ç, —è –∑–∞–≥–ª—É—à–∏–ª–∞ –µ–≥–æ –Ω–∞ 30 –º–∏–Ω—É—Çüîá", ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                }
                                                else
                                                {
                                                    var max = Connector.Connector.countMess + 1;
                                                    Connector.Connector.UpdateAntiSpam(msg.Chat.Id, msg.From.Id, max);
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if (msg.Text.ToLower() == "-–Ω–æ—Ç–∏—Ñ –∫–æ–º–º–µ–Ω—Ç")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == myId; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–Ø –Ω–µ —è–≤–ª—è—é—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —á–∞—Ç–∞üôÖüèª‚Äç‚ôÄÔ∏è!", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!¬ª", disableWebPagePreview: true, parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else
                                    {
                                        if(Connector.Connector.GetNotifComment(msg.Chat.Id) == null)
                                        {
                                            await client.SendTextMessageAsync(msg.Chat.Id, "‚õî–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –±—ã–ª –∑–∞–¥–∞–Ω!");
                                        }
                                        else
                                        {
                                            Connector.Connector.DeleteNotifComment(msg.Chat.Id);
                                            await client.SendTextMessageAsync(msg.Chat.Id, "‚úÖ–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!");
                                        }
                                    }
                                }

                                //RP commands
                                if (msg.Text.StartsWith("+"))
                                {
                                    {
                                        if (msg.Chat.Id == msg.From.Id)
                                        {
                                            return;
                                        }
                                        else if (msg.ReplyToMessage == null)
                                        {
                                            return;
                                        }
                                        else if (msg.ReplyToMessage != null)
                                        {
                                            if (msg.ReplyToMessage.From.Id == msg.From.Id)
                                            {
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –∞ —É –≤–∞—Å, –∫–∞–∫ —è –≤–∏–∂—É, –≤—ã—Å–æ–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞üòè", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                return;
                                            }
                                            else
                                            {
                                                Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                                if (Connector.Connector.message == "don't rate")
                                                {
                                                    Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                                    if (Connector.Connector.message == "not rated")
                                                    {
                                                        Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, 1);
                                                        Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                    else
                                                    {
                                                        Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                        var rating = Connector.Connector.user_rating + 1;
                                                        Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                }
                                                else
                                                {
                                                    Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                                    if (Connector.Connector.message == "not rated")
                                                    {
                                                        Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, 1);
                                                        Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                    else
                                                    {
                                                        Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                                        if (Connector.Connector.count_control >= 4)
                                                        {
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"üö´–í—ã —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è <b>{msg.ReplyToMessage.From.FirstName}</b>\n‚è±–î–∞—Ç–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞: {Connector.Connector.soc_control}", ParseMode.Html);
                                                        }
                                                        else
                                                        {
                                                            var control = Connector.Connector.count_control + 1;
                                                            Connector.Connector.UpdateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, control, DateTime.Now.AddDays(1));
                                                            var rating = Connector.Connector.user_rating + 1;
                                                            Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                                if (msg.Text.StartsWith("-"))
                                {
                                    {
                                        if (msg.Chat.Id == msg.From.Id)
                                        {
                                            return;
                                        }
                                        else if (msg.ReplyToMessage == null)
                                        {
                                            return;
                                        }
                                        else if (msg.ReplyToMessage != null)
                                        {
                                            if (msg.Text.Contains("_") || msg.Text.ToLower().StartsWith("-–≤–∞—Ä–Ω"))
                                            {
                                                return;
                                            }
                                            else if (msg.ReplyToMessage.From.Id == msg.From.Id)
                                            {
                                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –∑–∞—á–µ–º —Å–µ–±—è —Ç–∞–∫ —É–Ω–∏–∂–∞—Ç—åüòï", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                return;
                                            }
                                            else
                                            {
                                                Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                                if (Connector.Connector.message == "don't rate")
                                                {
                                                    Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                                    if (Connector.Connector.message == "not rated")
                                                    {
                                                        Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, -1);
                                                        Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: -1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                    else
                                                    {
                                                        Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                        var rating = Connector.Connector.user_rating - 1;
                                                        Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                }
                                                else
                                                {
                                                    Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                                    if (Connector.Connector.message == "not rated")
                                                    {
                                                        Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, -1);
                                                        Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: -1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                    else
                                                    {
                                                        Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                                        if (Connector.Connector.count_control >= 4)
                                                        {
                                                            await client.SendTextMessageAsync(msg.Chat.Id, $"üö´–í—ã —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è <b>{msg.ReplyToMessage.From.FirstName}</b>\n‚è±–î–∞—Ç–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞: {Connector.Connector.soc_control}", ParseMode.Html);
                                                        }
                                                        else
                                                        {
                                                            var control = Connector.Connector.count_control + 1;
                                                            Connector.Connector.UpdateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, control, DateTime.Now.AddDays(1));
                                                            var rating = Connector.Connector.user_rating - 1;
                                                            Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                        return;
                                    }
                                }


                                if (msg.Text.ToUpper() == "–û–ë–ù–Ø–¢–¨")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –æ–±–Ω—è–ª —Å–µ–±—èü§ó", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id{msg.From.Id}\">{msg.From.FirstName}</a> –æ–±–Ω—è–ª <a href = \"tg://user?id{msg.ReplyToMessage.From.Username}\">{msg.ReplyToMessage.From.FirstName}</a>ü§ó", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }

                                }

                                if (msg.Text.ToUpper() == "–£–î–ê–†–ò–¢–¨")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —É–¥–∞—Ä–∏–ª —Å–æ –≤—Å–µ–π —Å–∏–ª–æ–π –≤ –ø—É—Å—Ç–æ—Ç—Éüò∂", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —É–¥–∞—Ä–∏–ª —Å–æ –≤—Å–µ–π —Å–∏–ª–æ–π –≤ <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>ü§ï", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                }

                                if (msg.Text.ToUpper() == "–£–ë–ò–¢–¨")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –ø–æ–∫–æ–Ω—á–∏–ª —Å–≤–æ—é –∂–∏–∑–Ω—å —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ–ºü§°üî™", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —É–±–∏–≤–∞–µ—Ç <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üî™üò¢", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }

                                }

                                if (msg.Text.ToUpper() == "–£–ö–£–°–ò–¢–¨")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —É–∫—É—Å–∏–ª —Å–µ–±—èü§°", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –¥–µ–ª–∞–µ—Ç —É–∫—É—Å <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üê∫", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }

                                }

                                if (msg.Text.ToUpper() == "–ü–û–ö–ê–ó–ê–¢–¨ –Ø–ó–´–ö")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞–ª —è–∑—ã–∫üëÖ", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?sid={msg.From.Id}\">{msg.From.FirstName}</a> –ø–æ–∫–∞–∑–∞–ª —è–∑—ã–∫ <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üòú", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }

                                }

                                if (msg.Text.ToUpper() == "–ù–ê–ö–û–†–ú–ò–¢–¨")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –≤–∫—É—Å–Ω–æ –ø–æ–∫–æ—Ä–º–∏–ª —Å–µ–±—èüòã", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –≤–∫—É—Å–Ω–æ –ø–æ–∫–æ—Ä–º–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞ <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üçîüçüüå≠", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }

                                if (msg.Text.ToUpper() == "–ö–ê–°–¢–†–ò–†–û–í–ê–¢–¨")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —Å–µ–±—è –∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–ªü´°", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }
                                    else
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>‚úÇÔ∏è", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }

                                //Buttons/easters
                                switch (msg.Text)
                                {

                                    //Just button
                                    case "VPN":
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "<b>FBA Studio x LibreNet</b>\n\n<b><i>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:</i></b>\n<i>LanceVPN_Netherlands:</i>\n¬¨–°–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: 250 –ú–ë–∏—Ç/—Å\n¬¨–°—Ç—Ä–∞–Ω–∞: –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã\n¬¨–¶–µ–Ω–∞: 50 –†—É–±/–º–µ—Å\n–ü—Ä–æ—Ç–æ–∫–æ–ª: WireGuard", parseMode: ParseMode.Html, replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithUrl("–ü—Ä–∞–π—Å–ª–∏—Å—Ç", "https://t.me/LanceVPN")));
                                            break;
                                        }

                                    //Buttons from "GetButtons"
                                    case "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüìö":
                                        if (msg.Chat.Id != msg.From.Id)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º:\ntelegra.ph/Rabota-s-botom-Laura-10-18", parseMode: ParseMode.Html, disableWebPagePreview: false);
                                            break;
                                        }

                                    case "–û –Ω–∞—Åüìí":
                                        if (msg.Chat.Id != msg.From.Id)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            InlineKeyboardButton ProjectNews = new InlineKeyboardButton();
                                            InlineKeyboardButton Dev1 = new InlineKeyboardButton();
                                            InlineKeyboardButton Dev2 = new InlineKeyboardButton();
                                            InlineKeyboardButton ScladOfRes = new InlineKeyboardButton();

                                            ProjectNews.Text = "–ö–∞–Ω–∞–ª –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º –ø—Ä–æ–µ–∫—Ç–æ–≤üì°";
                                            ProjectNews.Url = "https://t.me/FBA_Studio";

                                            Dev1.Text = "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—åü§¥";
                                            Dev1.Url = "https://t.me/LanceMinecraft";

                                            Dev2.Text = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ 2üë®‚Äçüíª";
                                            Dev2.Url = "https://t.me/TheShadow_hk";

                                            ScladOfRes.Text = "–ö–∞–Ω–∞–ª —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –¥–ª—è –±–æ—Ç–∞üìö";
                                            ScladOfRes.Url = "https://t.me/ScladOfRes";

                                            InlineKeyboardButton[] Row1 = new InlineKeyboardButton[] { ProjectNews };
                                            InlineKeyboardButton[] Row2 = new InlineKeyboardButton[] { Dev1, Dev2 };
                                            InlineKeyboardButton[] Row3 = new InlineKeyboardButton[] { ScladOfRes };

                                            InlineKeyboardButton[][] InfoButtons = new InlineKeyboardButton[][] { Row1, Row2, Row3 };
                                            InlineKeyboardMarkup InfoKeyboard = new InlineKeyboardMarkup(InfoButtons);

                                            await client.SendTextMessageAsync(
                                                chatId: msg.Chat.Id,
                                                "<b href=\"t.me/FBA_Studio\">FBA Studio</b> - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–≤ —Å –Ω—É–∂–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã, –æ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞ –º–Ω–µ–Ω–∏–µ –∫–æ–º—å—é–Ω–∏—Ç–∏, –¥—É–º–∞—é, —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å –∏—Ö –∫–∞–Ω–∞–ªü§ó",
                                                replyMarkup: InfoKeyboard, parseMode: ParseMode.Html);
                                            break;
                                        }


                                    case "–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç‚ûï":
                                        if (msg.Chat.Id != msg.From.Id)
                                        {
                                            break;
                                        }
                                        else
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, text: $"<b>‚ùó–ü—Ä–∞–≤–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏ –±–æ—Ç–∞:</b>\n\n<i>-–∏–∑–º–µ–Ω–µ–Ω–Ω–∏—è –ø—Ä–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞</i>\n<i>-—É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —á–∞—Ç–∞</i>\n<i>-—É–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</i>\n<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —á–∞—Ç–∞</i>", parseMode: ParseMode.Html, replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithUrl("–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É", "http://t.me/Laura_cm_bot?startgroup=start&admin=change_info+restrict_members+delete_messages+pin_messages+invite_users")));
                                            break;
                                        }

                                    //Sponsors of the bot
                                    case "–ü–∞—Ä—Ç–Ω—ë—Ä—ã –±–æ—Ç–∞":
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, text: "<b>–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã –±–æ—Ç–∞ü§ù:</b>\n<i>-@FlushaStudio(–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞)</i>\n<i>-@RiceTeamStudio(–ü–∏–∞—Ä –ø—Ä–æ–µ–∫—Ç–∞)</i>\n<i>-@banan4ikmoder(–ü–∏–∞—Ä)</i>\n<i>@TheShadow_hk(Dev, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –±–∞–Ω–∞ –≤ —á–∞—Ç–µ)</i>\n<i>Maxim Bysh(–ü–æ–º–æ–≥ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –º—É—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)</i>\n<i>Libreto(–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞)</i>\n<i>–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è</i>", parseMode: ParseMode.Html);
                                        break;
                                }

                                //Get Chat Id (For admins)
                                if (msg.Text.StartsWith("/getchatid"))
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /getmyid");
                                        return;
                                    }
                                    else if (msg.Chat.Id != msg.From.Id)
                                    {
                                        Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                        bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                        var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                        if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî@{msg.From.Username}, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!");
                                            return;
                                        }

                                        else
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"ID –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞üÜî: <code>{msg.Chat.Id}</code>", parseMode: ParseMode.Html); ;
                                        return;
                                    }
                                }

                                //Get Uptime
                                if (msg.Text.ToLower().StartsWith("/uptime"))
                                {
                                    await client.SendTextMessageAsync(msg.Chat.Id, $"–ú–æ–π Uptime:\n{timeOfStart}");
                                }

                                //Get your id 
                                if (msg.Text == "/getmyid")
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–í–∞—à –ª–∏—á–Ω—ã–π ID: <code>{msg.From.Id}</code>", parseMode: ParseMode.Html);
                                        return;
                                    }
                                    else if (msg.Chat.Id != msg.From.Id)
                                    {
                                        return;
                                    }
                                }

                                //Get our id
                                if (msg.Text.StartsWith("/getourid"))
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else
                                    {
                                        if (msg.ReplyToMessage == null)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                        }
                                        else
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.ReplyToMessage.From.FirstName}:\n<code>{msg.ReplyToMessage.From.Id}</code>", parseMode: ParseMode.Html);
                                        }

                                    }
                                }

                                //Random rating
                                if (msg.Text.StartsWith("–æ—Ü–µ–Ω–∫—É") | msg.Text.StartsWith("–û—Ü–µ–Ω–∫—É"))
                                {
                                    string[] rateAnswer = { "-10/10, —á—Ç–æ –∑–∞ –∫—Ä–∏–Ω–∂ —Ç—ã –∫–∏–Ω—É–ªü§¢", "4/10, —Ç–∞–∫ —Å–µ–±–µ —Å–¥–µ–ª–∞–Ω–æüôÑ", "0/10, —Ñ–∏–≥–Ω—è, –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–π", "100/10, –ø—Ä–æ—Å—Ç–æ –∫—Ä—É—á–µ –Ω–µ–∫—É–¥–∞ü§©", "7/10, –Ω–µ–ø–ª–æ—Ö–æ, –≤–ø–æ–ª–Ω–µ –¥–æ—Å—Ç–æ–π–Ω–æüôÇ", "10/10, —Å—É–ø–µ—Ä‚ú®" };
                                    Random rndAnswer = new Random();
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, rateAnswer[rndAnswer.Next(rateAnswer.Length)]);
                                }

                                if (msg.Text.ToUpper() == "–õ–ò–í–ê–ô, –õ–ê–£–†–ê")
                                {
                                    if (msg.From.Id != 5287392256)
                                    {
                                        return;
                                    }
                                    else
                                    {
                                        if (msg.Chat.Id != msg.From.Id)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –≤—ã–π—Ç–∏ —Å –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞!\n–í—Å–µ–º —É–¥–∞—á–∏...");
                                            await Task.Delay(1500);
                                            await client.LeaveChatAsync(chatId: msg.Chat.Id);
                                            return;
                                        }
                                        else
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–õ–∞–Ω—Å, —ç—Ç–æ –ª—Å .-.");
                                            return;
                                        }
                                    }
                                }

                                //Weather request from WeatherClassApi.cs
                                if (msg.Text.ToLower().StartsWith("–ø–æ–≥–æ–¥–∞ –≤"))
                                {
                                    string[] strings = msg.Text.Split(' ');
                                    String[] InpResponse = msg.Text.Split(strings[0] + ' ' + strings[1] + ' ');
                                    var inputCityName = InpResponse[1];
                                    WeatherApi.Weather(inputCityName);
                                    WeatherApi.Celsius(celsius: WeatherApi.temperatureCity);
                                    WeatherApi.WindCourse(WeatherApi.windDegCity);

                                    if (WeatherApi.ResponseIsNormal == true)
                                    {
                                        var MainWeather = await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<b>{WeatherApi.answer}</b>\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞ <code>{WeatherApi.nameCity}</code>:</b>\n–ò–Ω–¥–µ–∫—Å Air Pollutionüí®: <code>{WeatherApi.aqi}</code>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–∞üå°: <code>{Math.Round(WeatherApi.temperatureCity)}¬∞C</code>\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <code>{Math.Round(WeatherApi.tempFeelsLikeCity)}¬∞C</code>\n–ü–æ–≥–æ–¥–∞‚õÖ: <code>{WeatherApi.weatherCity}</code>\n–î–∞–≤–ª–µ–Ω–∏–µ‚¨á:<code>{WeatherApi.pressureCity} –≥–ü–∞</code>\n–í–∏–¥–∏–º–æ—Å—Ç—åüëÅ: <code>{WeatherApi.visibilityCity} –∫–º</code>\n–í–ª–∞–∂–Ω–æ—Å—Ç—åüíß: <code>{WeatherApi.humidityCity}%</code>\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üå´: <code>{WeatherApi.windSpeedCity} –º/c</code>\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: <code>{WeatherApi.windDegCity}¬∞ ({WeatherApi.WindAnswer})</code>", parseMode: ParseMode.Html);
                                        await client.SendTextMessageAsync(
                                            msg.Chat.Id,
                                            replyToMessageId: MainWeather.MessageId,
                                            text:
    @$"<b>AirPollution - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–æ–∑–¥—É—Ö–∞:</b>
CO: <i>{WeatherApi.co} –º–∫–≥/–º3</i>
NO: <i>{WeatherApi.no} –º–∫–≥/–º3</i>
NO2: <i>{WeatherApi.no2} –º–∫–≥/–º3</i>
O3: <i>{WeatherApi.o3} –º–∫–≥/–º3</i>
SO2: <i>{WeatherApi.so2} –º–∫–≥/–º3</i>
PM2.5: <i>{WeatherApi.pm2_5} –º–∫–≥/–º3</i>
PM10: <i>{WeatherApi.pm10} –º–∫–≥/–º3</i>
NH3: <i>{WeatherApi.nh3} –º–∫–≥/–º3</i>
",
                                            parseMode: ParseMode.Html);
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<b>–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã‚ö†!</b>\n–ì–æ—Ä–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –Ω–∞–ø–∏—Å–∞–Ω –Ω–µ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ.\n\n<i>–ü—Ä–∏–º–µ—Ä: –ü–æ–≥–æ–¥–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</i>", parseMode: ParseMode.Html);
                                    }
                                }

                                //Random % of question
                                if (msg.Text.ToLower().StartsWith("–ª–∞—É—Ä–∞ –∏–Ω—Ñ–∞"))
                                {
                                    Random rndm_count = new Random();
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"ü§î–Ø –¥—É–º–∞—é, —á—Ç–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞ {rndm_count.Next(0, 100)}%");
                                }

                                if ((msg.Text.StartsWith("–õ–∞—É—Ä–∞") | msg.Text.StartsWith("–ª–∞—É—Ä–∞")) & (msg.Text.Contains("–°–∫–∞–∂–∏") | msg.Text.Contains("—Å–∫–∞–∂–∏")))
                                {
                                    String[] answers = { "–ù–µ—Ç, –Ω–µ —Ö–æ—á—É", "–ü–æ—à—ë–ª —Ç—ã!", "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —è –±–æ—Ç, –Ω–æ —è –Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å!", "–î–ê –ò–î–ò –¢–´ –ù–ê–§–ò–ì!!!", "–•–æ—Ä–æ—à–æ, —è —ç—Ç–æ —Å–∫–∞–∂—É..." };
                                    Random random = new Random();

                                    var myAnswerResult = await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"{answers[random.Next(answers.Length)]}");
                                    var SplitSymbol = msg.Text.Split("–∫–∞–∂–∏");
                                    var phrase = SplitSymbol[+1];
                                    if (myAnswerResult.Text == "–•–æ—Ä–æ—à–æ, —è —ç—Ç–æ —Å–∫–∞–∂—É...")
                                    {
                                        await Task.Delay(2250);
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"{phrase}");
                                        return;
                                    }
                                    else
                                    {
                                        return;
                                    }

                                }

                                //AI Activation
                                if (msg.ReplyToMessage != null && msg.ReplyToMessage.From.Id == myId)
                                {
                                    AIHandler.AIAnswer(msg.Text, msg.From.FirstName);
                                    if (AIHandler.Status != true)
                                    {
                                        return;
                                    }
                                    else if (AIHandler.HaveSticker == true)
                                    {
                                        await client.SendStickerAsync(chatId: msg.Chat.Id, sticker: AIHandler.StickerUrl);
                                        await Task.Delay(1500);
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, AIHandler.AIMessage);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, AIHandler.AIMessage);
                                        return;
                                    }
                                }

                                //Random user (in Dev)
                                if (msg.Text.ToLower().StartsWith("–ª–∞—É—Ä–∞ –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è "))
                                {
                                    var splitter = msg.Text.Split(' ');
                                    var SplitPredictPhrase = msg.Text.Split($"{splitter[0]} {splitter[1]} {splitter[2]} ");
                                    var PredictPhrase = SplitPredictPhrase[1];

                                    String[] botText = { "üîÆ–®–∞—Ä —è—Å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ", "üåå–î—Ä–µ–≤–Ω–∏–µ –±–æ–≥–∏ –≥–ª–∞—Å—è—Ç, —á—Ç–æ" };
                                    Random random_botText = new Random();
                                    var user = await MessageParser.GetRandomMemberAsync(msg.Chat.Id, token, msg.Chat.Type, msg.MessageId);

                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"{botText[random_botText.Next(botText.Length)]} <a href = \"tg://user?id={user[1]}\">{user[0]}</a> —Å–µ–≥–æ–¥–Ω—è {PredictPhrase}", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                }

                                if ((msg.Text.Contains("—á–∞—Ç") | msg.Text.Contains("–ß–∞—Ç")) & (msg.Text.Contains("—É–º–µ—Ä") | msg.Text.Contains("–£–º–µ—Ä") | msg.Text.Contains("—Å–¥–æ—Ö") | msg.Text.Contains("–°–¥–æ—Ö")))
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"F, {msg.Chat.Title}");
                                        return;
                                    }
                                }

                                else if (msg.Chat.Id != msg.From.Id)
                                {
                                    if (msg.From.Id == channel || msg.From.Id == group || msg.From.Id == anonim)
                                    {
                                        return;
                                    }
                                    Connector.Connector.GetAntiSpam(msg.From.Id, msg.Chat.Id);
                                    if (Connector.Connector.message == "not found")
                                    {
                                        Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                        if (Connector.Connector.message == "not found")
                                        {
                                            return;
                                        }
                                        else
                                        {
                                            if (Connector.Connector.as_active == "off")
                                            {
                                                return;
                                            }
                                            else
                                            {
                                                Connector.Connector.CreateAntiSpam(msg.From.Id, msg.Chat.Id, 1);
                                            }
                                        }
                                    }
                                    else
                                    {
                                        Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                        if (Connector.Connector.message == "not found")
                                        {
                                            return;
                                        }
                                        else
                                        {
                                            if (Connector.Connector.as_active == "off")
                                            {
                                                return;
                                            }
                                            else
                                            {
                                                if (Connector.Connector.countMess >= Connector.Connector.maxMess)
                                                {
                                                    ChatMember[] admins = await client.GetChatAdministratorsAsync(msg.Chat.Id);
                                                    if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == myId; }) == null)
                                                    {
                                                        return;
                                                    }
                                                    else if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == msg.From.Id; }) != null)
                                                    {
                                                        return;
                                                    }
                                                    else
                                                    {
                                                        Connector.Connector.DeleteAntiSpam(msg.Chat.Id, msg.From.Id);
                                                        await client.RestrictChatMemberAsync(msg.Chat.Id, msg.From.Id, new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false }, DateTime.Now.AddMinutes(30));
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —Ñ–ª—É–¥–∏—Ç, —è –∑–∞–≥–ª—É—à–∏–ª–∞ –µ–≥–æ –Ω–∞ 30 –º–∏–Ω—É—Çüîá", ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                }
                                                else
                                                {
                                                    var max = Connector.Connector.countMess + 1;
                                                    Connector.Connector.UpdateAntiSpam(msg.Chat.Id, msg.From.Id, max);
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            //RP commands
                            if (msg.Text.StartsWith("+"))
                            {
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage != null)
                                    {
                                        if (msg.ReplyToMessage.From.Id == msg.From.Id)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –∞ —É –≤–∞—Å, –∫–∞–∫ —è –≤–∏–∂—É, –≤—ã—Å–æ–∫–∞—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∞üòè", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                            return;
                                        }
                                        else
                                        {
                                            Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                            if (Connector.Connector.message == "don't rate")
                                            {
                                                Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                                if (Connector.Connector.message == "not rated")
                                                {
                                                    Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, 1);
                                                    Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                }
                                                else
                                                {
                                                    Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                    var rating = Connector.Connector.user_rating + 1;
                                                    Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                }
                                            }
                                            else
                                            {
                                                Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                                if (Connector.Connector.message == "not rated")
                                                {
                                                    Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, 1);
                                                    Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: 1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                }
                                                else
                                                {
                                                    Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                                    if (Connector.Connector.count_control >= 4)
                                                    {
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"üö´–í—ã —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è <b>{msg.ReplyToMessage.From.FirstName}</b>\n‚è±–î–∞—Ç–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞: {Connector.Connector.soc_control}", ParseMode.Html);
                                                    }
                                                    else
                                                    {
                                                        var control = Connector.Connector.count_control + 1;
                                                        Connector.Connector.UpdateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, control, DateTime.Now.AddDays(1));
                                                        var rating = Connector.Connector.user_rating + 1;
                                                        Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>‚úÖ\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }

                            if (msg.Text.StartsWith("-"))
                            {
                                {
                                    if (msg.Chat.Id == msg.From.Id)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage == null)
                                    {
                                        return;
                                    }
                                    else if (msg.ReplyToMessage != null)
                                    {
                                        if (msg.Text.Contains("_") || msg.Text.ToLower().StartsWith("-–≤–∞—Ä–Ω"))
                                        {
                                            return;
                                        }
                                        else if (msg.ReplyToMessage.From.Id == msg.From.Id)
                                        {
                                            await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a>, –∑–∞—á–µ–º —Å–µ–±—è —Ç–∞–∫ —É–Ω–∏–∂–∞—Ç—åüòï", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                            return;
                                        }
                                        else
                                        {
                                            Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                            if (Connector.Connector.message == "don't rate")
                                            {
                                                Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                                if (Connector.Connector.message == "not rated")
                                                {
                                                    Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, -1);
                                                    Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: -1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                }
                                                else
                                                {
                                                    Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                    var rating = Connector.Connector.user_rating - 1;
                                                    Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                }
                                            }
                                            else
                                            {
                                                Connector.Connector.GetSocialData(msg.ReplyToMessage.From.Id);
                                                if (Connector.Connector.message == "not rated")
                                                {
                                                    Connector.Connector.CreateSocialData(msg.ReplyToMessage.From.Id, -1);
                                                    Connector.Connector.CreateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, 1, DateTime.Now.AddDays(1));
                                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: -1", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                }
                                                else
                                                {
                                                    Connector.Connector.GetControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id);
                                                    if (Connector.Connector.count_control >= 4)
                                                    {
                                                        await client.SendTextMessageAsync(msg.Chat.Id, $"üö´–í—ã —É–∂–µ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è <b>{msg.ReplyToMessage.From.FirstName}</b>\n‚è±–î–∞—Ç–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞: {Connector.Connector.soc_control}", ParseMode.Html);
                                                    }
                                                    else
                                                    {
                                                        var control = Connector.Connector.count_control + 1;
                                                        Connector.Connector.UpdateControlSocData(msg.From.Id, msg.ReplyToMessage.From.Id, control, DateTime.Now.AddDays(1));
                                                        var rating = Connector.Connector.user_rating - 1;
                                                        Connector.Connector.UpdateSocialData(msg.ReplyToMessage.From.Id, rating);
                                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName} {msg.From.LastName}</a> –Ω–µ —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è —Å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName} {msg.ReplyToMessage.From.LastName}</a>üí¢\n\n–°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {rating}üìä", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                    return;
                                }
                            }


                            if (msg.Text.ToUpper() == "–û–ë–ù–Ø–¢–¨")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –æ–±–Ω—è–ª —Å–µ–±—èü§ó", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id{msg.From.Id}\">{msg.From.FirstName}</a> –æ–±–Ω—è–ª <a href = \"tg://user?id{msg.ReplyToMessage.From.Username}\">{msg.ReplyToMessage.From.FirstName}</a>ü§ó", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }

                            }

                            if (msg.Text.ToUpper() == "–£–î–ê–†–ò–¢–¨")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —É–¥–∞—Ä–∏–ª —Å–æ –≤—Å–µ–π —Å–∏–ª–æ–π –≤ –ø—É—Å—Ç–æ—Ç—Éüò∂", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —É–¥–∞—Ä–∏–ª —Å–æ –≤—Å–µ–π —Å–∏–ª–æ–π –≤ <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>ü§ï", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                            }

                            if (msg.Text.ToUpper() == "–£–ë–ò–¢–¨")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –ø–æ–∫–æ–Ω—á–∏–ª —Å–≤–æ—é –∂–∏–∑–Ω—å —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ–ºü§°üî™", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —É–±–∏–≤–∞–µ—Ç <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üî™üò¢", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }

                            }

                            if (msg.Text.ToUpper() == "–£–ö–£–°–ò–¢–¨")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —É–∫—É—Å–∏–ª —Å–µ–±—èü§°", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –¥–µ–ª–∞–µ—Ç —É–∫—É—Å <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üê∫", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }

                            }

                            if (msg.Text.ToUpper() == "–ü–û–ö–ê–ó–ê–¢–¨ –Ø–ó–´–ö")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑–∞–ª —è–∑—ã–∫üëÖ", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?sid={msg.From.Id}\">{msg.From.FirstName}</a> –ø–æ–∫–∞–∑–∞–ª —è–∑—ã–∫ <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üòú", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }

                            }

                            if (msg.Text.ToUpper() == "–ù–ê–ö–û–†–ú–ò–¢–¨")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –≤–∫—É—Å–Ω–æ –ø–æ–∫–æ—Ä–º–∏–ª —Å–µ–±—èüòã", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                                else
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –≤–∫—É—Å–Ω–æ –ø–æ–∫–æ—Ä–º–∏–ª —É—á–∞—Å—Ç–Ω–∏–∫–∞ <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>üçîüçüüå≠", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                return;
                            }

                            if (msg.Text.ToUpper() == "–ö–ê–°–¢–†–ò–†–û–í–ê–¢–¨")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else if (msg.ReplyToMessage == null)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —Å–µ–±—è –∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–ªü´°", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                    return;
                                }
                                else
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<a href = \"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> –∫–∞—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª <a href = \"tg://user?id={msg.ReplyToMessage.From.Id}\">{msg.ReplyToMessage.From.FirstName}</a>‚úÇÔ∏è", parseMode: ParseMode.Html, disableWebPagePreview: true);
                                return;
                            }

                            //Buttons/easters
                            switch (msg.Text)
                            {

                                //Just button
                                case "VPN":
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, "<b>FBA Studio x LibreNet</b>\n\n<b><i>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–∞:</i></b>\n<i>LanceVPN_Netherlands:</i>\n¬¨–°–∫–æ—Ä–æ—Å—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: 250 –ú–ë–∏—Ç/—Å\n¬¨–°—Ç—Ä–∞–Ω–∞: –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã\n¬¨–¶–µ–Ω–∞: 50 –†—É–±/–º–µ—Å\n–ü—Ä–æ—Ç–æ–∫–æ–ª: WireGuard", parseMode: ParseMode.Html, replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithUrl("–ü—Ä–∞–π—Å–ª–∏—Å—Ç", "https://t.me/LanceVPN")));
                                        break;
                                    }

                                //Buttons from "GetButtons"
                                case "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüìö":
                                    if (msg.Chat.Id != msg.From.Id)
                                    {
                                        break;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–º:\ntelegra.ph/Rabota-s-botom-Laura-10-18", parseMode: ParseMode.Html, disableWebPagePreview: false);
                                        break;
                                    }

                                case "–û –Ω–∞—Åüìí":
                                    if (msg.Chat.Id != msg.From.Id)
                                    {
                                        break;
                                    }
                                    else
                                    {
                                        InlineKeyboardButton ProjectNews = new InlineKeyboardButton();
                                        InlineKeyboardButton Dev1 = new InlineKeyboardButton();
                                        InlineKeyboardButton Dev2 = new InlineKeyboardButton();
                                        InlineKeyboardButton ScladOfRes = new InlineKeyboardButton();

                                        ProjectNews.Text = "–ö–∞–Ω–∞–ª –ø–æ –Ω–æ–≤–æ—Å—Ç—è–º –ø—Ä–æ–µ–∫—Ç–æ–≤üì°";
                                        ProjectNews.Url = "https://t.me/FBA_Studio";

                                        Dev1.Text = "–û—Å–Ω–æ–≤–∞—Ç–µ–ª—åü§¥";
                                        Dev1.Url = "https://t.me/LanceMinecraft";

                                        Dev2.Text = "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ 2üë®‚Äçüíª";
                                        Dev2.Url = "https://t.me/TheShadow_hk";

                                        ScladOfRes.Text = "–ö–∞–Ω–∞–ª —Å —Ä–µ—Å—É—Ä—Å–∞–º–∏ –¥–ª—è –±–æ—Ç–∞üìö";
                                        ScladOfRes.Url = "https://t.me/ScladOfRes";

                                        InlineKeyboardButton[] Row1 = new InlineKeyboardButton[] { ProjectNews };
                                        InlineKeyboardButton[] Row2 = new InlineKeyboardButton[] { Dev1, Dev2 };
                                        InlineKeyboardButton[] Row3 = new InlineKeyboardButton[] { ScladOfRes };

                                        InlineKeyboardButton[][] InfoButtons = new InlineKeyboardButton[][] { Row1, Row2, Row3 };
                                        InlineKeyboardMarkup InfoKeyboard = new InlineKeyboardMarkup(InfoButtons);

                                        await client.SendTextMessageAsync(
                                            chatId: msg.Chat.Id,
                                            "<b href=\"t.me/FBA_Studio\">FBA Studio</b> - —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–ª–∞—é—Ç –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–æ–≤ —Å –Ω—É–∂–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã, –æ–Ω–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω–∞ –º–Ω–µ–Ω–∏–µ –∫–æ–º—å—é–Ω–∏—Ç–∏, –¥—É–º–∞—é, —Ç–µ–±–µ —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å –∏—Ö –∫–∞–Ω–∞–ªü§ó",
                                            replyMarkup: InfoKeyboard, parseMode: ParseMode.Html);
                                        break;
                                    }


                                case "–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç‚ûï":
                                    if (msg.Chat.Id != msg.From.Id)
                                    {
                                        break;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, text: $"<b>‚ùó–ü—Ä–∞–≤–∞, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏ –±–æ—Ç–∞:</b>\n\n<i>-–∏–∑–º–µ–Ω–µ–Ω–Ω–∏—è –ø—Ä–∞–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞</i>\n<i>-—É–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏–∑ —á–∞—Ç–∞</i>\n<i>-—É–¥–∞–ª–µ–Ω–∏–µ —á—É–∂–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</i>\n<i>–ò–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —á–∞—Ç–∞</i>", parseMode: ParseMode.Html, replyMarkup: new InlineKeyboardMarkup(InlineKeyboardButton.WithUrl("–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É", "http://t.me/Laura_cm_bot?startgroup=Laura&admin=change_info+restrict_members+delete_messages+pin_messages+invite_users")));
                                        break;
                                    }

                                //Sponsors of the bot
                                case "–ü–∞—Ä—Ç–Ω—ë—Ä—ã –±–æ—Ç–∞":
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, text: "<b>–ù–∞—à–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—ã –±–æ—Ç–∞ü§ù:</b>\n<i>-@FlushaStudio(–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞)</i>\n<i>-@RiceTeamStudio(–ü–∏–∞—Ä –ø—Ä–æ–µ–∫—Ç–∞)</i>\n<i>-@banan4ikmoder(–ü–∏–∞—Ä)</i>\n<i>@TheShadow_hk(Dev, —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–ª –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –±–∞–Ω–∞ –≤ —á–∞—Ç–µ)</i>\n<i>Maxim Bysh(–ü–æ–º–æ–≥ —Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–æ–π –º—É—Ç–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏)</i>\n<i>Libreto(–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞)</i>\n<i>–°–ø–∏—Å–æ–∫ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è</i>", parseMode: ParseMode.Html);
                                    break;
                            }

                            //Get Chat Id (For admins)
                            if (msg.Text.StartsWith("/getchatid"))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å ID –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /getmyid");
                                    return;
                                }
                                else if (msg.Chat.Id != msg.From.Id)
                                {
                                    Telegram.Bot.Types.ChatMember[] admins = await client.GetChatAdministratorsAsync(chatId: msg.Chat.Id);
                                    bool IsAdmin = admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) != null;
                                    var MemberOutput = await client.GetChatMemberAsync(chatId: msg.Chat.Id, userId: msg.From.Id);
                                    if (admins.FirstOrDefault(a => { return a.User != null && a.User.Id == msg.From.Id; }) == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"‚õî<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a>, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º/—Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞!", ParseMode.Html, disableWebPagePreview: true);
                                        return;
                                    }

                                    else
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"ID –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞üÜî: <code>{msg.Chat.Id}</code>", parseMode: ParseMode.Html); ;
                                    return;
                                }
                            }

                            //Get Uptime
                            if (msg.Text.ToLower().StartsWith("/uptime"))
                            {
                                await client.SendTextMessageAsync(msg.Chat.Id, $"–ú–æ–π Uptime:\n{timeOfStart}");
                            }

                            //Get your id 
                            if (msg.Text == "/getmyid")
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"–í–∞—à –ª–∏—á–Ω—ã–π ID: <code>{msg.From.Id}</code>", parseMode: ParseMode.Html);
                                    return;
                                }
                                else if (msg.Chat.Id != msg.From.Id)
                                {
                                    return;
                                }
                            }

                            //Get our id
                            if (msg.Text.StartsWith("/getourid"))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    if (msg.ReplyToMessage == null)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!");
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {msg.ReplyToMessage.From.FirstName}:\n<code>{msg.ReplyToMessage.From.Id}</code>", parseMode: ParseMode.Html);
                                    }

                                }
                            }

                            //Random rating
                            if (msg.Text.StartsWith("–æ—Ü–µ–Ω–∫—É") | msg.Text.StartsWith("–û—Ü–µ–Ω–∫—É"))
                            {
                                string[] rateAnswer = { "-10/10, —á—Ç–æ –∑–∞ –∫—Ä–∏–Ω–∂ —Ç—ã –∫–∏–Ω—É–ªü§¢", "4/10, —Ç–∞–∫ —Å–µ–±–µ —Å–¥–µ–ª–∞–Ω–æüôÑ", "0/10, —Ñ–∏–≥–Ω—è, –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞–π", "100/10, –ø—Ä–æ—Å—Ç–æ –∫—Ä—É—á–µ –Ω–µ–∫—É–¥–∞ü§©", "7/10, –Ω–µ–ø–ª–æ—Ö–æ, –≤–ø–æ–ª–Ω–µ –¥–æ—Å—Ç–æ–π–Ω–æüôÇ", "10/10, —Å—É–ø–µ—Ä‚ú®" };
                                Random rndAnswer = new Random();
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, rateAnswer[rndAnswer.Next(rateAnswer.Length)]);
                            }

                            if (msg.Text.ToUpper() == "–õ–ò–í–ê–ô, –õ–ê–£–†–ê")
                            {
                                if (msg.From.Id != 5287392256)
                                {
                                    return;
                                }
                                else
                                {
                                    if (msg.Chat.Id != msg.From.Id)
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–°–æ–∑–¥–∞—Ç–µ–ª—å –ø—Ä–∏–∫–∞–∑–∞–ª –≤—ã–π—Ç–∏ —Å –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞!\n–í—Å–µ–º —É–¥–∞—á–∏...");
                                        await Task.Delay(1500);
                                        await client.LeaveChatAsync(chatId: msg.Chat.Id);
                                        return;
                                    }
                                    else
                                    {
                                        await client.SendTextMessageAsync(chatId: msg.Chat.Id, "–õ–∞–Ω—Å, —ç—Ç–æ –ª—Å .-.");
                                        return;
                                    }
                                }
                            }

                            //Weather request from WeatherClassApi.cs
                            if (msg.Text.ToLower().StartsWith("–ø–æ–≥–æ–¥–∞ –≤"))
                            {
                                string[] strings = msg.Text.Split(' ');
                                String[] InpResponse = msg.Text.Split(strings[0] + ' ' + strings[1] + ' ');
                                var inputCityName = InpResponse[1];
                                WeatherApi.Weather(inputCityName);
                                WeatherApi.Celsius(celsius: WeatherApi.temperatureCity);
                                WeatherApi.WindCourse(WeatherApi.windDegCity);

                                if (WeatherApi.ResponseIsNormal == true)
                                {
                                    var MainWeather = await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<b>{WeatherApi.answer}</b>\n\n<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≥–æ—Ä–æ–¥–∞ <code>{WeatherApi.nameCity}</code>:</b>\n–ò–Ω–¥–µ–∫—Å Air Pollutionüí®: <code>{WeatherApi.aqi}</code>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≥–æ—Ä–æ–¥–∞üå°: <code>{Math.Round(WeatherApi.temperatureCity)}¬∞C</code>\n–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: <code>{Math.Round(WeatherApi.tempFeelsLikeCity)}¬∞C</code>\n–ü–æ–≥–æ–¥–∞‚õÖ: <code>{WeatherApi.weatherCity}</code>\n–î–∞–≤–ª–µ–Ω–∏–µ‚¨á:<code>{WeatherApi.pressureCity} –≥–ü–∞</code>\n–í–∏–¥–∏–º–æ—Å—Ç—åüëÅ: <code>{WeatherApi.visibilityCity} –∫–º</code>\n–í–ª–∞–∂–Ω–æ—Å—Ç—åüíß: <code>{WeatherApi.humidityCity}%</code>\n–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞üå´: <code>{WeatherApi.windSpeedCity} –º/c</code>\n–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–µ—Ç—Ä–∞: <code>{WeatherApi.windDegCity}¬∞ ({WeatherApi.WindAnswer})</code>", parseMode: ParseMode.Html);
                                    await client.SendTextMessageAsync(
                                        msg.Chat.Id,
                                        replyToMessageId: MainWeather.MessageId,
                                        text:
@$"<b>AirPollution - –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤–æ–∑–¥—É—Ö–∞:</b>
CO: <i>{WeatherApi.co} –º–∫–≥/–º3</i>
NO: <i>{WeatherApi.no} –º–∫–≥/–º3</i>
NO2: <i>{WeatherApi.no2} –º–∫–≥/–º3</i>
O3: <i>{WeatherApi.o3} –º–∫–≥/–º3</i>
SO2: <i>{WeatherApi.so2} –º–∫–≥/–º3</i>
PM2.5: <i>{WeatherApi.pm2_5} –º–∫–≥/–º3</i>
PM10: <i>{WeatherApi.pm10} –º–∫–≥/–º3</i>
NH3: <i>{WeatherApi.nh3} –º–∫–≥/–º3</i>
",
                                        parseMode: ParseMode.Html);
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"<b>–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–≥–æ–¥—ã‚ö†!</b>\n–ì–æ—Ä–æ–¥ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ª–∏–±–æ –Ω–∞–ø–∏—Å–∞–Ω –Ω–µ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ.\n\n<i>–ü—Ä–∏–º–µ—Ä: –ü–æ–≥–æ–¥–∞ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥</i>", parseMode: ParseMode.Html);
                                }
                            }

                            //Random % of question
                            if (msg.Text.ToLower().StartsWith("–ª–∞—É—Ä–∞ –∏–Ω—Ñ–∞"))
                            {
                                Random rndm_count = new Random();
                                await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"ü§î–Ø –¥—É–º–∞—é, —á—Ç–æ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞ {rndm_count.Next(0, 100)}%");
                            }

                            if ((msg.Text.StartsWith("–õ–∞—É—Ä–∞") | msg.Text.StartsWith("–ª–∞—É—Ä–∞")) & (msg.Text.Contains("–°–∫–∞–∂–∏") | msg.Text.Contains("—Å–∫–∞–∂–∏")))
                            {
                                String[] answers = { "–ù–µ—Ç, –Ω–µ —Ö–æ—á—É", "–ü–æ—à—ë–ª —Ç—ã!", "–Ø –ø–æ–Ω–∏–º–∞—é, —á—Ç–æ —è –±–æ—Ç, –Ω–æ —è –Ω–µ —Å–æ–±–∏—Ä–∞—é—Å—å —ç—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç—å!", "–î–ê –ò–î–ò –¢–´ –ù–ê–§–ò–ì!!!", "–•–æ—Ä–æ—à–æ, —è —ç—Ç–æ —Å–∫–∞–∂—É..." };
                                Random random = new Random();

                                var myAnswerResult = await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"{answers[random.Next(answers.Length)]}");
                                var SplitSymbol = msg.Text.Split("–∫–∞–∂–∏");
                                var phrase = SplitSymbol[+1];
                                if (myAnswerResult.Text == "–•–æ—Ä–æ—à–æ, —è —ç—Ç–æ —Å–∫–∞–∂—É...")
                                {
                                    await Task.Delay(2250);
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"{phrase}");
                                    return;
                                }
                                else
                                {
                                    return;
                                }

                            }

                            //AI Activation
                            if (msg.ReplyToMessage != null && msg.ReplyToMessage.From.Id == myId)
                            {
                                AIHandler.AIAnswer(msg.Text, msg.From.FirstName);
                                if (AIHandler.Status != true)
                                {
                                    return;
                                }
                                else if (AIHandler.HaveSticker == true)
                                {
                                    await client.SendStickerAsync(chatId: msg.Chat.Id, sticker: AIHandler.StickerUrl);
                                    await Task.Delay(1500);
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, AIHandler.AIMessage);
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, AIHandler.AIMessage);
                                    return;
                                }
                            }

                            //Random user (in Dev)
                            //if (msg.Text.ToLower().StartsWith("–ª–∞—É—Ä–∞ –∫—Ç–æ —Å–µ–≥–æ–¥–Ω—è "))
                            //{
                            //    var splitter = msg.Text.Split(' ');
                            //    var SplitPredictPhrase = msg.Text.Split($"{splitter[0]} {splitter[1]} {splitter[2]} ");
                            //    var PredictPhrase = SplitPredictPhrase[1];

                            //    String[] botText = { "üîÆ–®–∞—Ä —è—Å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —á—Ç–æ", "üåå–õ–µ–≥–µ–Ω–¥—ã –≥–ª–∞—Å—è—Ç, —á—Ç–æ", "üí°–û–¥–∏–Ω –º—É–¥—Ä–µ—Ü –≥–ª–∞—Å–∏—Ç, —á—Ç–æ", "üë®‚Äçüíª–û–¥–∏–Ω –∏–∑ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ FBA –≥–æ–≤–æ—Ä–∏—Ç, —á—Ç–æ" };
                            //    Random random_botText = new Random();
                            //    var user = await MessageParser.GetRandomMemberAsync(msg.Chat.Id, token, msg.Chat.Type, msg.MessageId);

                            //    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"{botText[random_botText.Next(botText.Length)]} <a href = \"tg://user?id={user[1]}\">{user[0]}</a> —Å–µ–≥–æ–¥–Ω—è {PredictPhrase}", parseMode: ParseMode.Html, disableWebPagePreview: true);
                            //}

                            if ((msg.Text.Contains("—á–∞—Ç") | msg.Text.Contains("–ß–∞—Ç")) & (msg.Text.Contains("—É–º–µ—Ä") | msg.Text.Contains("–£–º–µ—Ä") | msg.Text.Contains("—Å–¥–æ—Ö") | msg.Text.Contains("–°–¥–æ—Ö")))
                            {
                                if (msg.Chat.Id == msg.From.Id)
                                {
                                    return;
                                }
                                else
                                {
                                    await client.SendTextMessageAsync(chatId: msg.Chat.Id, $"F, {msg.Chat.Title}");
                                    return;
                                }
                            }

                            else if (msg.Chat.Id != msg.From.Id)
                            {
                                if(msg.From.Id == channel || msg.From.Id == group || msg.From.Id == anonim)
                                {
                                    return;
                                }
                                Connector.Connector.GetAntiSpam(msg.From.Id, msg.Chat.Id);
                                if (Connector.Connector.message == "not found")
                                {
                                    Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                    if (Connector.Connector.message == "not found")
                                    {
                                        return;
                                    }
                                    else
                                    {
                                        if (Connector.Connector.as_active == "off")
                                        {
                                            return;
                                        }
                                        else
                                        {
                                            Connector.Connector.CreateAntiSpam(msg.From.Id, msg.Chat.Id, 1);
                                        }
                                    }
                                }
                                else
                                {
                                    Connector.Connector.GetSpamConfig(msg.Chat.Id);
                                    if (Connector.Connector.message == "not found")
                                    {
                                        return;
                                    }
                                    else
                                    {
                                        if (Connector.Connector.as_active == "off")
                                        {
                                            return;
                                        }
                                        else
                                        {
                                            if (Connector.Connector.countMess >= Connector.Connector.maxMess)
                                            {
                                                ChatMember[] admins = await client.GetChatAdministratorsAsync(msg.Chat.Id);
                                                if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == myId; }) == null)
                                                {
                                                    return;
                                                }
                                                else if (admins.FirstOrDefault(a => { return a.User.Id != null && a.User.Id == msg.From.Id; }) != null)
                                                {
                                                    return;
                                                }
                                                else
                                                {
                                                    Connector.Connector.DeleteAntiSpam(msg.Chat.Id, msg.From.Id);
                                                    await client.RestrictChatMemberAsync(msg.Chat.Id, msg.From.Id, new ChatPermissions { CanSendMessages = false, CanSendMediaMessages = false, CanSendOtherMessages = false }, DateTime.Now.AddMinutes(30));
                                                    await client.SendTextMessageAsync(msg.Chat.Id, $"<a href=\"tg://user?id={msg.From.Id}\">{msg.From.FirstName}</a> —Ñ–ª—É–¥–∏—Ç, —è –∑–∞–≥–ª—É—à–∏–ª–∞ –µ–≥–æ –Ω–∞ 30 –º–∏–Ω—É—Çüîá", ParseMode.Html, disableWebPagePreview: true);
                                                }
                                            }
                                            else
                                            {
                                                var max = Connector.Connector.countMess + 1;
                                                Connector.Connector.UpdateAntiSpam(msg.Chat.Id, msg.From.Id, max);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }


                    catch (ApiRequestException exc)
                    {
                        Console.WriteLine(exc.ToString());
                        return;
                    }
                    catch (FormatException exc2)
                    {
                        Console.WriteLine(exc2.ToString());
                        return;
                    }
                    catch (MySqlException exc3)
                    {
                        Console.WriteLine($"Error occured: {exc3.Message}");
                        return;
                    }
                }

            }


        }

        private static IReplyMarkup GetButtons() => new ReplyKeyboardMarkup
        {
            ResizeKeyboard = true,
            Keyboard = new List<List<KeyboardButton>>
            {
                    new List<KeyboardButton>{new KeyboardButton{ Text = "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—èüìö" }, new KeyboardButton { Text = "–û –Ω–∞—Åüìí"}, },
                    new List<KeyboardButton>{new KeyboardButton{ Text = "–î–æ–±–∞–≤–∏—Ç—å –±–æ—Ç–∞ –≤ —á–∞—Ç‚ûï"}, new KeyboardButton { Text = "VPN" } }
            }
        };
    }
}
